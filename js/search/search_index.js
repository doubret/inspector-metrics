var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.032,1,1.268]],["body/classes/BaseMetric.html",[0,0.053,1,2.243,2,0.189,3,0.253,4,0.13,5,1.875,6,0.436,7,2.65,8,1.847,9,1.371,10,0.864,11,3.185,12,3.185,13,0.782,14,0.024,15,2.243,16,0.982,17,4.523,18,3.581,19,0.792,20,0.111,21,1.19,22,1.181,23,1.79,24,2.305,25,3.624,26,1.086,27,3.384,28,5.114,29,3.967,30,0.38,31,4.561,32,3.763,33,3.185,34,3.763,35,4.561,36,4.238,37,3.185,38,3.185,39,3.185,40,3.185,41,3.185,42,3.185,43,3.185,44,3.763,45,0.841,46,0.836,47,1.589,48,1.06,49,0.832,50,0.763,51,2.491,52,1.106,53,3.185,54,4.255,55,2.817,56,2.182,57,2.491,58,2.491,59,3.185,60,2.491,61,0.515,62,1.254,63,2.491,64,2.542,65,2.491,66,2.491,67,2.491,68,0.53,69,2.491,70,2.817,71,2.491,72,1.186,73,3.684,74,1.285,75,2.491,76,2.491,77,2.817,78,2.491,79,2.491,80,2.817,81,2.491,82,2.817,83,2.491,84,1.751,85,3.827,86,2.491,87,2.817,88,2.491,89,2.817,90,2.491,91,3.827,92,2.491,93,2.817,94,2.491,95,2.491,96,0.379,97,0.209,98,3.103,99,2.323,100,1.546,101,3.103,102,1.875,103,0.379,104,0.128,105,1.128,106,0.253,107,0.535,108,0.449,109,2.119,110,3.185,111,0.625,112,2.119,113,2.119,114,2.383,115,2.542,116,3.827,117,2.119,118,2.119,119,2.119,120,2.119,121,2.119,122,0.012,123,0.012]],["title/interfaces/BucketCounting.html",[104,0.121,124,2.024]],["body/interfaces/BucketCounting.html",[0,0.048,2,0.303,3,0.354,4,0.208,6,0.271,8,2.581,9,1.313,10,0.995,14,0.024,20,0.178,23,1.663,24,2.411,26,0.602,30,0.531,45,0.968,48,0.938,49,0.891,50,0.683,61,0.497,62,1.46,68,0.497,96,0.396,97,0.337,100,2.487,103,0.497,104,0.228,105,1.606,106,0.433,107,0.519,108,0.741,111,1.312,122,0.017,123,0.017,124,3.662,125,2.722,126,3.29,127,2.845,128,3.496,129,3.046,130,4.646,131,4.193,132,3.394,133,4.009,134,1.965,135,1.851,136,1.851,137,4.009,138,4.076,139,3.553,140,3.937,141,1.067,142,3.017,143,3.017,144,1.851,145,2.124,146,2.581,147,1.132,148,1.436,149,3.017,150,1.624,151,3.017,152,3.017,153,0.947,154,3.017,155,2.487,156,2.124,157,3.937,158,3.017,159,3.017,160,3.017,161,3.017,162,3.017,163,3.017,164,2.292]],["title/classes/Buckets.html",[0,0.032,128,1.747]],["body/classes/Buckets.html",[0,0.051,2,0.277,3,0.333,4,0.19,6,0.247,8,1.804,9,1.256,10,0.793,14,0.024,16,0.778,19,1.162,20,0.163,21,1.564,23,2.034,24,2.268,26,0.836,27,3.704,30,0.5,45,1.017,46,0.715,47,1.769,48,1.085,49,0.812,50,0.687,52,0.673,61,0.451,62,1.558,68,0.484,72,1.024,74,1.163,96,0.373,97,0.307,100,3.054,103,0.484,104,0.212,105,1.493,106,0.376,107,0.5,108,0.715,111,1.234,122,0.016,123,0.016,124,3.403,125,2.483,126,3.241,127,2.268,128,3.497,129,2.428,130,3.704,131,2.483,132,2.608,134,1.66,135,1.892,136,1.769,138,4.18,139,2.483,140,2.751,141,0.973,142,2.751,143,2.751,144,1.769,145,1.937,146,2.428,147,1.032,148,1.31,149,3.704,150,1.994,151,3.704,152,3.704,153,1.406,154,4.48,155,3.453,156,2.608,157,4.48,158,2.751,159,3.704,160,4.676,161,4.188,162,2.751,163,2.751,164,2.09,165,4.188,166,1.162,167,3.657,168,3.657,169,3.657,170,3.657,171,3.657,172,3.657,173,3.657,174,2.751,175,2.269,176,1.162,177,3.657,178,1.937,179,2.751,180,3.657,181,3.657,182,3.704,183,3.657,184,2.751,185,3.657]],["title/classes/Clock.html",[0,0.032,186,1.747]],["body/classes/Clock.html",[0,0.059,2,0.312,3,0.399,4,0.214,6,0.278,7,3.616,10,0.951,13,0.86,14,0.024,19,1.309,20,0.183,26,0.938,30,0.54,45,0.925,47,1.309,49,1.183,50,0.456,61,0.312,68,0.517,72,0.98,96,0.312,97,0.346,103,0.517,104,0.182,105,1.335,106,0.399,107,0.448,108,0.639,111,1.479,122,0.017,123,0.017,134,1.796,135,1.309,136,1.875,141,1.096,148,1.907,150,2.39,186,3.455,187,2.555,188,3.044,189,4.007,190,2.968,191,4.118,192,4.008,193,4.007,194,3.304,195,2.454,196,2.616,197,2.797,198,4.236,199,2.797,200,2.032,201,2.797,202,2.797,203,2.555,204,2.797,205,4.007,206,3.099,207,3.099,208,3.616,209,4.007,210,3.099,211,3.099,212,4.007,213,3.099,214,3.127,215,3.099,216,2.555,217,3.099,218,3.099]],["title/interfaces/Counting.html",[104,0.121,126,1.632]],["body/interfaces/Counting.html",[0,0.048,2,0.311,3,0.359,4,0.213,6,0.277,8,2.025,9,1.32,10,0.856,14,0.024,20,0.183,23,1.688,24,2.871,26,0.617,30,0.539,45,0.985,48,1.004,49,0.912,50,0.588,61,0.472,62,1.477,68,0.488,96,0.402,97,0.345,100,2.547,103,0.5,104,0.225,105,1.618,106,0.421,107,0.524,108,0.748,111,1.332,122,0.017,123,0.017,124,3.562,125,2.787,126,3.261,127,2.448,128,3.453,129,2.621,130,3.998,131,2.787,132,3.419,134,1.987,135,1.688,136,1.688,138,3.866,139,2.787,140,3.089,141,1.414,142,3.998,143,3.998,144,1.872,145,2.815,146,3.073,147,1.5,148,1.903,149,3.089,150,1.662,151,3.089,152,3.089,153,0.969,154,3.089,155,2.547,156,2.175,157,3.998,158,3.089,159,3.089,160,3.089,161,3.089,162,3.089,163,3.089,164,2.346,219,4.104]],["title/classes/DefaultReservoir.html",[0,0.032,220,2.197]],["body/classes/DefaultReservoir.html",[0,0.05,2,0.274,3,0.33,4,0.188,6,0.244,10,0.997,14,0.024,16,0.683,19,1.149,20,0.161,21,1.553,22,1.566,26,1.021,30,0.496,45,1.02,46,0.766,47,1.149,48,1.171,50,0.706,52,1.018,61,0.274,62,1.486,68,0.494,72,0.899,74,1.021,84,1.473,96,0.37,97,0.304,103,0.449,104,0.167,106,0.374,107,0.557,108,0.664,122,0.016,123,0.016,141,0.962,153,1.399,166,1.149,220,4.216,221,2.456,222,3.318,223,3.465,224,4.216,225,4.801,226,4.46,227,4.46,228,4.908,229,2.672,230,2.959,231,2.793,232,3.677,233,4.886,234,3.758,235,3.616,236,3.616,237,2.109,238,3.677,239,1.673,240,3.616,241,3.434,242,3.616,243,2.388,244,1.75,245,3.677,246,3.677,247,3.032,248,1.916,249,1.295,250,2.721,251,3.032]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.032,252,2.405]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.039,2,0.175,3,0.239,4,0.12,6,0.156,10,0.775,13,0.738,14,0.024,16,0.6,19,0.734,20,0.103,21,1.123,22,1.625,23,2.126,26,1.03,30,0.359,45,1.016,46,0.816,47,1.866,48,1.119,49,0.954,50,0.74,52,0.65,61,0.175,68,0.491,72,0.79,74,0.897,84,1.455,96,0.267,97,0.194,103,0.364,104,0.12,106,0.397,107,0.554,108,0.683,111,0.886,122,0.011,123,0.011,127,1.064,134,1.98,141,0.94,147,0.652,148,1.959,153,0.834,165,2.659,166,1.364,175,1.432,176,2.126,178,3.254,182,1.737,190,2.487,194,1.432,195,1.064,196,1.948,216,2.192,231,3.356,237,0.996,239,1.464,241,2.664,243,1.853,252,4.513,253,5.064,254,1.568,255,4.092,256,4.092,257,4.218,258,5.725,259,4.087,260,4.092,261,4.092,262,4.092,263,4.092,264,4.092,265,4.092,266,4.842,267,5.457,268,3.667,269,4.092,270,3.919,271,4.411,272,3.006,273,4.092,274,4.653,275,3.006,276,3.824,277,3.534,278,2.308,279,4.092,280,5.391,281,5.391,282,2.308,283,2.308,284,3.266,285,2.308,286,2.308,287,2.308,288,2.308,289,3.266,290,2.308,291,2.308,292,2.308,293,1.743,294,2.308,295,4.092,296,2.192,297,2.308,298,3.653,299,2.308,300,2.308,301,2.308,302,2.192,303,2.75,304,3.006,305,2.659,306,3.006,307,3.006,308,3.006,309,3.006,310,2.308,311,1.432,312,1.964,313,2.915,314,1.223,315,1.964,316,1.223,317,1.32,318,1.964,319,3.653,320,3.006,321,3.006,322,1.964,323,1.964,324,4.653,325,1.964,326,3.653]],["title/interfaces/Gauge.html",[104,0.121,327,1.528]],["body/interfaces/Gauge.html",[0,0.049,1,2.145,2,0.322,3,0.367,4,0.221,6,0.441,8,2.096,9,1.331,10,0.875,14,0.024,15,1.946,16,0.883,20,0.189,22,1.283,26,0.9,30,0.551,45,0.949,46,0.719,48,1.126,49,1.207,50,0.47,52,0.782,56,1.891,61,0.411,68,0.478,73,3.608,74,1.251,84,1.131,96,0.411,97,0.357,103,0.478,104,0.204,105,1.635,106,0.405,107,0.548,108,0.719,114,2.251,115,2.885,122,0.017,123,0.017,134,2.2,141,1.446,147,1.2,153,1.003,184,3.197,222,2.885,229,1.834,244,1.522,327,3.037,328,3.615,329,4.088,330,3.218,331,4.249,332,2.885,333,1.958,334,3.615,335,5.104,336,3.615,337,2.251,338,4.088,339,4.249]],["title/interfaces/Groupable.html",[98,2.197,104,0.121]],["body/interfaces/Groupable.html",[2,0.365,3,0.397,4,0.251,6,0.397,8,2.9,9,1.296,14,0.024,15,2.105,16,0.991,18,4.112,20,0.215,29,3.992,30,0.597,32,4.969,40,5.001,46,0.579,50,0.65,56,2.123,61,0.365,62,1.474,68,0.48,72,0.887,74,1.007,84,1.564,87,4.423,96,0.365,97,0.405,98,4.2,103,0.445,104,0.231,106,0.397,107,0.494,108,0.579,122,0.019,123,0.019,136,1.868,333,2.709,340,4.101,341,4.821,342,4.821]],["title/classes/Int64Wrapper.html",[0,0.032,343,2.197]],["body/classes/Int64Wrapper.html",[0,0.059,2,0.316,3,0.282,4,0.217,6,0.282,14,0.024,16,0.751,19,1.327,20,0.186,21,1.707,22,1.481,26,1.055,30,0.545,44,4.719,45,0.982,46,0.753,48,1.123,49,0.928,50,0.718,52,1.154,56,1.943,62,1.047,68,0.511,72,0.989,74,1.122,84,1.43,102,4.043,103,0.407,106,0.363,107,0.545,108,0.645,111,1.047,122,0.017,123,0.017,153,1.268,166,1.327,184,3.142,239,1.517,243,2.706,343,4.325,344,3.142,345,4.571,346,5.372,347,6.271,348,6.271,349,6.271,350,5.372,351,5.372,352,5.372,353,4.175,354,4.175,355,6.271,356,5.372,357,5.372,358,5.372,359,5.335,360,4.175,361,4.571,362,4.043,363,2.591,364,3.552,365,3.552,366,4.175,367,5.372,368,4.175,369,4.175,370,4.175,371,4.175]],["title/interfaces/LengthAttributeInterface.html",[104,0.121,372,2.024]],["body/interfaces/LengthAttributeInterface.html",[0,0.042,1,1.901,2,0.253,3,0.313,4,0.174,6,0.387,9,1.125,10,0.745,13,0.967,14,0.024,15,1.196,16,0.743,20,0.149,21,1.47,22,1.092,23,2.069,25,3.449,26,0.695,30,0.47,45,0.945,46,0.637,48,0.538,52,0.615,56,1.717,61,0.35,68,0.512,96,0.402,97,0.281,103,0.506,104,0.236,105,1.16,106,0.313,107,0.537,108,0.767,122,0.015,123,0.015,134,1.561,135,1.979,144,1.822,147,1.499,153,0.788,166,1.47,176,1.47,229,2.809,237,1.441,239,1.618,244,1.657,249,2.573,293,1.647,327,2.598,330,1.647,333,1.539,337,1.769,372,3.65,373,1.909,374,1.769,375,4.088,376,3.864,377,3.605,378,3.56,379,3.56,380,3.56,381,3.294,382,4.151,383,3.893,384,2.268,385,3.893,386,3.893,387,2.268,388,2.268,389,3.893,390,2.268,391,2.268,392,2.268,393,2.268,394,2.268,395,4.229,396,2.268,397,2.268,398,2.268]],["title/interfaces/LengthMethodInterface.html",[104,0.121,378,2.024]],["body/interfaces/LengthMethodInterface.html",[0,0.042,1,1.901,2,0.253,3,0.313,4,0.174,6,0.387,9,1.125,10,0.745,13,0.967,14,0.024,15,1.196,16,0.743,20,0.149,22,1.092,23,2.069,25,3.449,26,0.695,30,0.611,45,0.936,46,0.555,48,0.538,50,0.369,52,0.615,56,1.717,61,0.35,68,0.516,96,0.402,97,0.281,103,0.506,104,0.236,105,1.16,106,0.313,107,0.537,108,0.767,122,0.015,123,0.015,134,1.561,135,1.979,144,1.822,147,1.306,153,0.788,166,1.47,176,1.47,229,2.809,237,1.441,239,1.618,244,1.196,249,2.573,293,1.647,327,2.598,330,1.647,333,1.539,337,1.769,372,3.56,373,2.645,374,1.769,375,4.088,376,3.864,377,3.142,378,3.65,379,3.56,380,3.56,381,3.294,382,4.151,383,3.893,384,2.268,385,3.893,386,3.893,387,2.268,388,2.268,389,3.893,390,2.268,391,2.268,392,2.268,393,2.268,394,2.268,395,4.229,396,2.268,397,2.268,398,2.268,399,3.339]],["title/interfaces/Logger.html",[104,0.121,400,2.665]],["body/interfaces/Logger.html",[2,0.521,3,0.412,4,0.266,6,0.346,7,3.23,13,1.486,14,0.023,20,0.228,21,1.937,46,0.809,61,0.388,96,0.388,97,0.43,103,0.461,104,0.222,122,0.019,123,0.019,136,1.937,400,5.179,401,4.357,402,5.187,403,6.738,404,5.733,405,6.738,406,6.738]],["title/interfaces/MetadataContainer.html",[99,2.197,104,0.121]],["body/interfaces/MetadataContainer.html",[0,0.048,2,0.306,3,0.355,4,0.21,6,0.419,14,0.024,15,1.883,16,0.996,20,0.18,29,4.88,30,0.534,33,4.474,34,4.66,37,4.474,41,4.474,46,0.79,48,1.061,50,0.685,52,1.211,56,2.104,61,0.498,64,4.616,68,0.529,70,3.957,72,1.211,73,4.084,74,1.221,80,3.957,84,1.399,89,3.957,96,0.306,97,0.34,99,4.159,103,0.398,104,0.219,106,0.419,107,0.52,108,0.743,122,0.017,123,0.017,135,1.671,239,1.749,332,3.971,407,5.463,408,3.04,409,4.04,410,6.583,411,4.04,412,5.259,413,5.259,414,5.259,415,5.259,416,4.04,417,2.786,418,4.474,419,4.04]],["title/interfaces/Metered.html",[104,0.121,420,1.876]],["body/interfaces/Metered.html",[2,0.324,3,0.369,4,0.222,6,0.289,9,1.333,10,0.879,13,1.139,14,0.024,20,0.19,30,0.553,45,1.008,50,0.723,61,0.324,68,0.53,96,0.413,97,0.359,103,0.413,104,0.205,105,1.506,106,0.473,107,0.549,122,0.017,123,0.017,127,2.915,129,3.296,132,3.352,141,1.451,147,1.54,178,2.889,237,2.353,284,3.703,296,4.46,303,3.82,311,3.383,316,3.541,420,3.643,421,3.636,422,4.103,423,3.117,424,4.64,425,5.382,426,5.382,427,5.382,428,5.382,429,4.274,430,4.274,431,4.274,432,4.274,433,5.453,434,4.274]],["title/interfaces/Metric.html",[9,0.695,104,0.121]],["body/interfaces/Metric.html",[0,0.051,1,2.346,2,0.243,3,0.304,4,0.167,5,2.415,6,0.449,7,2.754,8,1.583,9,1.402,10,0.837,11,2.73,12,2.73,13,0.67,14,0.024,15,2.308,16,0.947,17,3.911,18,3.221,20,0.143,22,1.063,23,1.652,24,1.479,25,3.517,26,1.044,27,2.415,28,4.422,29,3.53,30,0.457,31,5.048,32,2.415,34,2.415,35,5.048,36,2.415,39,3.829,42,3.829,44,2.415,45,0.727,46,0.774,48,0.991,49,0.713,50,0.623,52,1.037,53,2.73,54,3.829,55,2.415,56,2.172,59,2.73,61,0.502,62,1.128,64,2.179,68,0.526,70,2.415,72,0.828,73,3.392,74,0.94,77,2.415,80,2.415,82,2.415,84,1.766,85,4.422,87,2.415,89,2.415,91,4.422,93,2.415,96,0.426,97,0.27,98,3.681,99,2.792,100,1.991,101,3.496,102,3.386,103,0.426,104,0.177,105,1.413,106,0.381,107,0.564,108,0.54,109,2.73,110,3.829,111,0.805,112,2.73,113,2.73,114,2.754,115,3.056,116,4.422,117,2.73,118,2.73,119,2.73,120,2.73,121,2.73,122,0.014,123,0.014,435,3.209,436,3.209,437,3.209,438,3.209]],["title/classes/MetricRegistration.html",[0,0.032,439,2.405]],["body/classes/MetricRegistration.html",[0,0.038,1,0.943,2,0.087,3,0.134,4,0.059,6,0.371,9,1.392,10,0.32,13,0.657,14,0.024,15,1.397,16,0.964,18,3.241,19,0.364,20,0.186,21,0.631,22,1.405,23,1.827,24,2.941,26,1.04,45,0.278,46,0.632,47,0.999,49,0.699,50,0.291,52,1.264,56,2.125,61,0.488,62,1.519,68,0.534,72,0.211,73,3.286,74,0.239,84,1.46,96,0.389,97,0.096,103,0.317,105,0.498,106,0.383,107,0.57,108,0.826,111,1.476,114,0.606,122,0.006,123,0.006,126,0.527,128,2.293,132,0.606,135,1.588,136,1.871,141,0.304,144,1.995,145,3.12,146,3.014,147,0.561,150,1.882,153,0.622,166,0.364,176,1.24,186,2.836,188,2.536,200,0.564,214,1.053,223,2.599,239,1.312,243,1.684,244,1.397,249,0.711,302,1.233,317,2.23,327,2.086,329,1.981,332,2.135,362,0.861,417,2.067,420,3.237,439,3.012,440,1.666,441,0.71,442,1.69,443,3.319,444,1.69,445,3.565,446,1.69,447,1.987,448,1.144,449,2.763,450,2.723,451,3.578,452,2.421,453,0.71,454,3.791,455,3.338,456,2.24,457,3.027,458,1.495,459,0.973,460,0.973,461,2.6,462,3.873,463,0.973,464,4.823,465,0.973,466,0.973,467,0.973,468,3.774,469,0.973,470,5.238,471,3.565,472,0.973,473,0.973,474,0.973,475,0.973,476,0.973,477,0.973,478,0.973,479,1.69,480,0.973,481,1.69,482,1.69,483,1.69,484,0.973,485,1.69,486,0.973,487,0.973,488,0.973,489,0.861,490,2.24,491,1.69,492,2.6,493,0.973,494,0.973,495,0.973,496,0.973,497,0.973,498,0.861,499,0.973,500,0.973,501,0.973,502,0.973,503,0.973,504,0.973,505,0.973,506,2.675,507,0.973,508,4.326,509,4.326,510,4.266,511,1.69,512,4.326,513,4.67,514,1.69,515,3.319,516,3.319,517,4.373,518,1.69,519,0.973,520,1.69,521,1.69,522,0.973,523,1.69,524,1.69,525,0.973,526,1.69,527,1.69,528,0.973,529,1.69,530,3.153,531,3.319,532,1.981,533,0.973,534,0.973,535,0.861,536,0.861,537,0.973,538,1.69,539,0.973,540,0.973,541,3.027,542,0.973,543,0.973,544,0.973,545,0.973,546,0.973,547,0.973,548,0.973,549,0.973,550,0.973,551,0.973,552,0.973,553,0.973,554,0.973,555,3.955,556,0.973,557,0.973,558,0.973,559,0.973,560,0.973,561,0.973,562,0.973,563,3.319,564,0.973,565,0.973,566,1.69,567,1.69,568,0.973,569,1.69,570,1.69,571,0.973,572,0.973,573,0.973,574,0.973,575,0.973,576,3.027,577,0.973,578,0.973,579,0.973,580,0.973,581,3.565,582,3.027,583,0.973,584,4.266,585,0.973,586,1.69,587,1.69,588,0.973,589,0.973,590,1.69,591,0.973,592,0.973,593,1.69,594,0.861,595,0.973,596,0.973,597,1.69,598,0.973,599,1.69,600,0.861,601,0.973,602,0.973,603,0.973,604,0.973,605,0.973,606,0.973,607,0.973,608,0.973,609,0.973,610,1.69,611,1.69,612,1.69,613,1.69,614,1.69,615,0.973,616,1.69,617,0.973,618,0.973,619,0.973,620,0.973,621,0.973,622,0.973,623,0.973,624,0.973,625,0.973,626,0.973,627,0.973,628,0.973,629,1.69,630,0.973,631,0.973,632,0.973,633,0.973,634,0.973,635,0.973,636,0.973,637,0.973,638,0.973,639,0.973,640,0.973,641,0.973,642,0.973,643,1.495,644,0.71,645,0.973,646,1.69,647,0.973,648,0.973,649,0.973]],["title/interfaces/MetricRegistryListener.html",[104,0.121,449,2.024]],["body/interfaces/MetricRegistryListener.html",[2,0.346,3,0.384,4,0.237,6,0.384,9,1.444,14,0.024,16,0.974,20,0.203,30,0.577,46,0.682,50,0.629,56,2.086,61,0.346,68,0.43,72,1.046,74,1.188,84,1.724,96,0.43,97,0.384,103,0.43,104,0.227,107,0.478,108,0.778,122,0.018,123,0.018,135,1.806,144,1.806,417,3.433,423,3.704,440,3.28,449,3.81,450,3.28,451,3.86,462,3.704,644,3.527,650,3.435,651,4.836,652,5.685,653,4.836,654,5.685,655,5.685,656,4.836,657,4.565,658,4.836,659,4.565]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.032,461,2.197]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.038,1,0.945,2,0.087,3,0.135,4,0.06,6,0.371,9,1.39,10,0.321,13,0.658,14,0.024,15,1.4,16,0.957,18,3.195,19,0.365,20,0.187,22,1.406,23,1.828,24,2.942,26,1.037,30,0.202,45,0.279,46,0.6,47,1.001,49,0.7,50,0.22,52,1.265,56,2.123,61,0.488,62,1.52,68,0.534,72,0.211,73,3.081,74,0.24,84,1.487,96,0.39,97,0.096,103,0.318,105,0.499,106,0.383,107,0.571,108,0.826,111,1.477,114,0.608,122,0.006,123,0.006,126,0.529,128,2.296,132,0.608,135,1.538,136,1.892,141,0.53,144,1.997,145,3.122,146,3.016,147,0.324,150,1.799,153,0.623,166,0.365,176,1.242,186,2.838,188,2.54,200,0.566,214,1.055,223,2.602,239,1.314,243,1.687,244,1.4,249,0.713,302,0.712,317,2.234,327,2.089,329,1.986,332,2.14,362,0.864,417,2.65,420,3.24,439,2.654,440,1.398,441,0.712,442,0.977,443,2.681,444,0.977,445,2.245,446,0.977,449,3.015,450,2.961,451,3.795,452,2.425,453,0.712,454,3.794,455,3.343,456,2.245,457,3.033,458,1.986,459,1.695,460,1.695,461,2.888,462,3.889,463,0.977,464,4.895,465,0.977,466,0.977,467,0.977,468,3.78,469,0.977,470,5.241,471,3.571,472,0.977,473,0.977,474,0.977,475,0.977,476,0.977,477,0.977,478,0.977,479,1.695,480,0.977,481,1.695,482,1.695,483,1.695,484,0.977,485,1.695,486,0.977,487,0.977,488,0.977,489,0.864,490,2.245,491,1.695,492,2.604,493,0.977,494,0.977,495,0.977,496,0.977,497,0.977,498,0.864,499,0.977,500,0.977,501,0.977,502,0.977,503,0.977,504,0.977,505,0.977,506,2.681,507,0.977,508,4.329,509,4.329,510,4.27,511,1.695,512,4.329,513,4.674,514,1.695,515,3.325,516,3.325,517,4.378,518,1.695,519,0.977,520,1.695,521,1.695,522,0.977,523,1.695,524,1.695,525,0.977,526,1.695,527,1.695,528,0.977,529,1.695,530,3.158,531,3.325,532,1.986,533,0.977,534,0.977,535,0.864,536,0.864,537,0.977,538,1.695,539,0.977,540,0.977,541,3.033,542,0.977,543,0.977,544,0.977,545,0.977,546,0.977,547,0.977,548,0.977,549,0.977,550,0.977,551,0.977,552,0.977,553,0.977,554,0.977,555,3.96,556,0.977,557,0.977,558,0.977,559,0.977,560,0.977,561,0.977,562,0.977,563,3.325,564,0.977,565,0.977,566,1.695,567,1.695,568,0.977,569,1.695,570,1.695,571,0.977,572,0.977,573,0.977,574,0.977,575,0.977,576,3.033,577,0.977,578,0.977,579,0.977,580,0.977,581,3.571,582,3.033,583,0.977,584,4.27,585,0.977,586,1.695,587,1.695,588,0.977,589,0.977,590,1.695,591,0.977,592,0.977,593,1.695,594,0.864,595,0.977,596,0.977,597,1.695,598,0.977,599,1.695,600,0.864,601,0.977,602,0.977,603,0.977,604,0.977,605,0.977,606,0.977,607,0.977,608,0.977,609,0.977,610,1.695,611,1.695,612,1.695,613,1.695,614,1.695,615,0.977,616,1.695,617,0.977,618,0.977,619,0.977,620,0.977,621,0.977,622,0.977,623,0.977,624,0.977,625,0.977,626,0.977,627,0.977,628,0.977,629,1.695,630,0.977,631,0.977,632,0.977,633,0.977,634,0.977,635,0.977,636,0.977,637,0.977,638,0.977,639,0.977,640,0.977,641,0.977,642,0.977,643,1.499,644,0.712,645,0.977,646,1.695,647,0.977,648,0.977,649,0.977,660,1.148,661,1.148,662,1.148]],["title/classes/MetricReporter.html",[0,0.032,663,2.405]],["body/classes/MetricReporter.html",[0,0.058,2,0.305,3,0.355,4,0.21,6,0.273,7,3.672,8,2.592,9,1.315,10,1.06,14,0.024,16,0.735,19,1.282,20,0.26,21,1.67,25,3.28,26,1.056,30,0.533,45,0.564,46,0.743,47,1.282,48,0.65,50,0.71,52,0.967,61,0.305,62,1.318,68,0.469,72,0.967,74,1.098,84,1.808,96,0.398,97,0.339,103,0.398,107,0.539,108,0.631,111,1.012,122,0.017,123,0.017,144,1.857,156,3.487,176,1.67,243,2.268,317,3.004,333,3.131,417,2.784,423,3.539,440,3.487,450,2.138,462,4.171,644,3.261,663,4.614,664,2.741,665,5.255,666,5.255,667,4.952,668,4.036,669,5.255,670,4.036,671,5.255,672,4.036,673,5.255,674,4.036,675,4.036,676,4.036,677,4.036,678,4.036]],["title/interfaces/MetricSet.html",[104,0.121,452,2.197]],["body/interfaces/MetricSet.html",[2,0.364,3,0.397,4,0.25,6,0.325,9,1.427,14,0.024,16,0.821,20,0.214,30,0.596,50,0.649,52,1.266,61,0.521,68,0.499,96,0.444,97,0.404,103,0.444,104,0.216,105,1.588,106,0.446,107,0.493,122,0.019,123,0.019,136,1.528,141,1.562,144,1.865,249,2.102,440,3.357,452,4.197,508,3.618,509,3.618,510,3.618,512,3.618,530,4.416,535,4.964,536,5.09,679,3.618,680,4.993,681,4.808,682,4.808]],["title/interfaces/MovingAverage.html",[104,0.121,259,2.405]],["body/interfaces/MovingAverage.html",[0,0.037,2,0.215,3,0.278,4,0.147,6,0.192,10,0.858,13,0.593,14,0.024,16,0.576,20,0.126,22,1.563,23,1.876,26,0.995,30,0.418,45,1.007,46,0.749,48,1.1,49,0.916,50,0.589,52,0.522,61,0.215,68,0.506,72,0.758,74,0.861,84,1.571,96,0.312,97,0.238,103,0.403,104,0.166,106,0.412,107,0.574,108,0.731,111,1.033,122,0.013,123,0.013,127,1.899,134,1.797,141,1.418,147,1.163,148,1.738,153,0.67,165,2.135,166,0.901,175,2.557,176,2.021,178,2.998,182,3.101,190,2.467,194,2.557,195,1.899,196,1.966,216,1.76,231,3.567,237,1.778,239,1.504,241,3.011,243,2.095,252,4.606,253,4.258,254,1.926,255,3.506,256,3.506,257,4.208,258,5.631,259,4.32,260,2.413,261,2.413,262,2.413,263,2.413,264,2.413,265,2.413,266,4.532,267,5.022,268,3.482,269,2.413,270,3.877,271,4.814,272,3.506,273,2.413,274,5.182,275,2.413,276,3.819,279,3.506,280,5.022,281,5.022,284,2.799,289,3.296,293,1.399,295,3.506,296,1.76,298,4.129,302,1.76,303,2.356,304,2.413,305,2.135,306,2.413,307,2.413,308,2.413,309,2.413,311,2.557,312,3.506,313,4.009,314,2.184,315,3.506,316,2.184,317,2.356,318,3.506,319,4.129,320,3.506,321,3.506,322,2.413,323,2.413,324,5.022,325,2.413,326,4.129,683,2.837,684,2.837,685,2.837,686,2.837]],["title/interfaces/Reservoir.html",[104,0.121,223,1.747]],["body/interfaces/Reservoir.html",[0,0.047,2,0.3,3,0.351,4,0.206,6,0.268,10,0.933,14,0.024,16,0.554,20,0.176,22,1.451,26,0.87,30,0.527,45,1.012,46,0.695,48,1.155,50,0.641,52,0.729,61,0.3,62,1.452,68,0.505,72,0.729,74,0.827,84,1.541,96,0.393,97,0.333,103,0.465,104,0.197,106,0.391,107,0.569,108,0.695,122,0.017,123,0.017,141,1.381,153,1.367,220,4.199,221,2.69,222,2.69,223,3.517,224,3.959,225,4.358,226,3.906,227,3.906,228,4.358,229,2.754,230,3.004,231,2.968,232,2.98,234,3.932,237,1.709,238,2.98,239,1.466,241,3.593,243,2.499,244,1.418,245,2.98,246,2.98,247,2.457,248,2.099,249,1.859,250,2.98,251,3.221,687,3.961,688,3.961,689,3.961]],["title/interfaces/Sampling.html",[104,0.121,148,1.268]],["body/interfaces/Sampling.html",[0,0.056,2,0.389,3,0.413,4,0.267,6,0.348,9,1.199,14,0.023,20,0.229,30,0.62,48,1.087,50,0.569,61,0.389,68,0.463,96,0.463,97,0.432,103,0.463,104,0.235,106,0.413,107,0.432,122,0.02,123,0.02,148,2.417,230,3.091,492,3.792,690,4.375,691,5.2,692,5.741,693,5.143]],["title/classes/SimpleSnapshot.html",[0,0.032,248,1.876]],["body/classes/SimpleSnapshot.html",[0,0.038,2,0.165,3,0.228,4,0.113,6,0.147,10,0.813,14,0.024,16,0.472,19,0.691,20,0.225,21,1.073,22,1.101,23,0.691,26,1.068,30,0.343,45,1.022,46,0.56,47,1.314,48,1.166,49,1.279,50,0.716,52,0.621,61,0.165,68,0.546,72,0.621,74,0.705,96,0.165,97,0.183,103,0.353,104,0.159,106,0.466,107,0.582,108,0.497,111,1.339,122,0.011,123,0.011,129,1.665,138,4.182,144,0.691,147,0.953,153,0.797,164,1.93,166,0.691,174,2.54,175,2.094,176,1.481,178,1.788,179,2.54,200,1.665,224,1.35,229,2.178,230,2.894,239,1.168,244,2.164,247,2.094,248,3.553,249,1.481,251,3.573,257,3.313,268,2.885,289,1.477,303,1.93,330,2.748,338,3.112,376,1.93,423,3.572,694,1.637,695,4.293,696,4.293,697,4.293,698,4.293,699,4.293,700,4.293,701,4.293,702,4.293,703,4.293,704,4.293,705,2.872,706,3.375,707,3.966,708,2.175,709,2.872,710,3.112,711,2.175,712,2.872,713,3.112,714,2.175,715,2.872,716,3.519,717,2.175,718,2.872,719,3.519,720,2.175,721,2.872,722,3.519,723,2.175,724,2.175,725,2.175,726,2.872,727,3.797,728,2.175,729,2.175,730,3.519,731,3.519,732,2.175,733,2.872,734,2.54,735,2.872,736,2.54,737,2.872,738,2.872,739,2.872,740,2.872,741,2.872,742,2.872,743,2.872,744,4.74,745,2.54,746,2.872,747,2.872,748,2.872,749,2.872,750,2.872,751,2.872,752,3.519,753,2.175,754,2.175,755,1.851,756,1.851,757,1.851,758,1.851,759,1.851,760,1.851,761,1.851,762,1.851,763,1.851,764,1.851,765,1.851,766,1.851,767,1.851,768,2.872,769,1.851,770,2.566,771,1.851,772,1.851,773,2.872,774,1.851,775,1.851,776,3.519,777,2.872,778,2.872,779,1.851]],["title/interfaces/SizeAttributeInterface.html",[104,0.121,380,2.024]],["body/interfaces/SizeAttributeInterface.html",[0,0.042,1,1.901,2,0.253,3,0.312,4,0.173,6,0.387,9,1.124,10,0.745,13,0.966,14,0.024,15,1.656,16,0.742,20,0.148,21,1.469,22,1.092,23,2.068,25,3.448,26,0.695,30,0.469,45,0.945,46,0.637,48,0.537,52,0.614,56,1.716,61,0.402,68,0.512,96,0.402,97,0.28,103,0.506,104,0.236,105,1.159,106,0.312,107,0.537,108,0.766,122,0.015,123,0.015,134,1.56,135,1.979,144,1.821,147,1.498,153,0.788,166,1.469,176,1.469,229,2.942,237,1.44,239,1.618,244,1.195,249,2.573,293,1.646,327,2.597,330,1.646,333,1.537,337,1.768,372,3.559,373,1.907,374,1.768,375,4.086,376,3.65,377,3.604,378,3.559,379,3.559,380,3.65,381,3.293,382,4.151,383,3.891,384,2.266,385,3.891,386,3.891,387,2.266,388,2.266,389,3.891,390,2.266,391,2.266,392,2.266,393,2.266,394,2.266,395,4.228,396,2.266,397,2.266,398,2.266]],["title/interfaces/SizeMethodInterface.html",[104,0.121,379,2.024]],["body/interfaces/SizeMethodInterface.html",[0,0.042,1,1.901,2,0.253,3,0.313,4,0.174,6,0.387,9,1.125,10,0.745,13,0.967,14,0.024,15,1.196,16,0.743,20,0.149,22,1.092,23,2.069,25,3.449,26,0.695,30,0.611,45,0.936,46,0.555,48,0.538,50,0.369,52,0.615,56,1.717,61,0.35,68,0.516,96,0.402,97,0.281,103,0.506,104,0.236,105,1.16,106,0.313,107,0.537,108,0.767,122,0.015,123,0.015,134,1.561,135,1.979,144,1.822,147,1.306,153,0.788,166,1.47,176,1.47,229,2.942,237,1.441,239,1.618,244,1.196,249,2.573,293,1.647,327,2.598,330,1.647,333,1.539,337,1.769,372,3.56,373,2.645,374,1.769,375,4.088,376,3.65,377,3.142,378,3.56,379,3.65,380,3.56,381,3.294,382,4.151,383,3.893,384,2.268,385,3.893,386,3.893,387,2.268,388,2.268,389,3.893,390,2.268,391,2.268,392,2.268,393,2.268,394,2.268,395,4.229,396,2.268,397,2.268,398,2.268,780,3.339]],["title/classes/SlidingWindowReservoir.html",[0,0.032,453,2.197]],["body/classes/SlidingWindowReservoir.html",[0,0.05,2,0.271,3,0.328,4,0.186,6,0.242,10,0.951,14,0.024,16,0.678,19,1.137,20,0.274,21,1.541,22,1.601,26,1.019,30,0.492,45,1.019,46,0.781,47,1.541,48,1.17,49,0.795,50,0.719,52,0.893,61,0.271,62,1.38,68,0.492,72,0.893,74,1.013,84,1.464,96,0.367,97,0.301,103,0.447,104,0.165,106,0.372,107,0.556,108,0.661,122,0.015,123,0.015,134,1.206,136,1.137,141,0.952,153,1.393,166,1.137,220,4.105,221,2.429,222,2.429,223,3.488,224,4.035,225,4.785,226,3.65,227,3.65,228,4.894,229,2.662,230,2.953,231,2.773,232,3.65,234,4.188,237,1.544,238,2.692,239,1.369,241,3.414,243,2.375,244,2.113,245,3.65,246,2.692,247,2.219,248,1.895,249,1.281,250,2.692,251,3.009,453,3.009,651,3.043,653,3.043,781,3.577,782,4.85,783,4.85,784,4.85,785,3.577,786,3.577,787,3.577,788,3.577,789,3.577]],["title/interfaces/Snapshot.html",[104,0.121,230,1.528]],["body/interfaces/Snapshot.html",[0,0.032,2,0.178,3,0.242,4,0.122,6,0.159,10,0.699,14,0.024,16,0.328,20,0.216,22,0.845,23,1.137,26,0.977,30,0.363,45,1.024,46,0.429,47,0.745,48,1.163,49,1.311,50,0.712,52,0.432,61,0.178,68,0.549,72,0.432,74,0.49,96,0.178,97,0.197,103,0.367,104,0.165,106,0.477,107,0.587,108,0.521,111,1.38,122,0.011,123,0.011,129,1.765,138,4.228,144,0.745,147,0.662,153,0.554,164,2.045,174,1.765,175,1.455,176,1.541,178,1.243,179,1.765,200,1.157,224,2.22,229,2.254,230,2.911,239,1.224,244,1.87,247,1.455,248,3.554,249,1.553,251,3.661,257,3.415,268,2.985,289,1.593,303,1.341,330,2.823,338,3.263,376,1.341,423,3.146,694,1.765,695,4.443,696,4.443,697,4.443,698,4.443,699,4.443,700,4.443,701,4.443,702,4.443,703,4.443,704,4.443,705,1.996,707,3.043,709,1.996,710,3.263,712,1.996,713,3.263,715,1.996,716,3.689,718,1.996,719,3.689,721,1.996,722,3.689,726,1.996,727,3.65,730,3.689,731,3.689,733,1.996,734,1.765,735,1.996,736,1.765,737,1.996,738,1.996,739,1.996,740,1.996,741,1.996,742,1.996,743,1.996,744,4.682,745,1.765,746,1.996,747,1.996,748,1.996,749,1.996,750,1.996,751,1.996,752,3.043,755,3.043,756,3.043,757,1.996,758,1.996,759,1.996,760,1.996,761,1.996,762,1.996,763,1.996,764,1.996,765,1.996,766,1.996,767,1.996,768,3.043,769,1.996,770,2.69,771,1.996,772,1.996,773,3.043,774,1.996,775,1.996,776,3.689,777,3.043,778,3.043,779,1.996,790,2.346,791,2.346,792,2.346,793,2.346,794,2.346,795,2.346,796,2.346,797,2.346,798,2.346,799,2.346,800,2.346,801,2.346,802,2.346]],["title/classes/StdClock.html",[0,0.032,214,1.876]],["body/classes/StdClock.html",[0,0.058,2,0.304,3,0.417,4,0.209,6,0.271,7,3.546,10,0.995,13,0.838,14,0.024,19,1.275,20,0.179,26,0.988,30,0.531,45,0.919,47,1.664,49,1.163,50,0.579,61,0.304,68,0.524,72,0.964,96,0.304,97,0.337,103,0.514,104,0.179,105,1.461,106,0.394,107,0.44,108,0.629,111,1.461,122,0.017,123,0.017,134,1.766,135,1.664,136,1.852,141,1.068,148,1.875,150,2.36,186,3.462,187,2.49,188,2.294,189,3.02,190,2.973,192,3.976,193,3.94,194,3.249,195,2.413,196,2.661,197,2.725,198,4.195,199,2.725,200,1.98,201,2.725,202,2.725,203,2.49,204,2.725,205,3.94,206,3.02,207,3.02,208,3.556,209,3.94,210,3.02,211,3.02,212,4.386,213,3.94,214,3.273,215,3.94,216,3.249,217,3.94,218,3.94,803,4.013,804,4.013,805,4.013]],["title/classes/StopWatch.html",[0,0.032,806,2.405]],["body/classes/StopWatch.html",[0,0.053,1,1.581,2,0.183,3,0.247,4,0.126,6,0.358,9,0.866,10,0.711,13,1.029,14,0.024,15,1.764,16,0.779,19,0.768,20,0.108,21,1.163,22,1.591,26,1.032,30,0.371,45,0.915,46,0.746,49,0.537,50,0.616,52,0.813,56,1.585,61,0.334,62,1.327,68,0.526,72,0.445,74,0.505,84,1.539,96,0.49,97,0.203,103,0.373,105,0.917,106,0.427,107,0.58,108,0.732,111,0.917,114,1.28,115,1.641,122,0.012,123,0.012,124,2.091,126,2.035,127,2.269,128,3.066,129,1.192,131,1.641,132,1.939,136,1.681,141,0.643,144,1.937,146,3.115,148,1.764,153,1.042,156,3.155,166,1.163,176,0.768,178,1.28,186,3.445,188,2.524,190,2.412,196,2.412,203,4.155,223,2.746,230,2.283,243,2.283,257,2.74,268,1.381,270,2.524,276,2.524,284,1.641,293,1.805,296,3.454,303,3.025,313,2.998,314,2.339,316,2.339,333,1.686,337,1.28,343,2.74,345,3.113,363,1.499,418,2.056,420,3.346,422,4.189,425,2.056,426,2.056,427,2.056,428,2.056,454,4.458,492,1.499,498,1.818,594,1.818,600,1.818,643,2.753,667,3.706,692,2.056,770,1.499,806,4.442,807,2.056,808,3.659,809,5.955,810,3.659,811,3.659,812,2.416,813,2.416,814,2.416,815,2.484,816,2.416,817,3.659,818,5.567,819,2.998,820,3.659,821,2.416,822,2.416,823,5.782,824,2.416,825,2.416,826,2.416,827,2.416,828,2.416,829,2.416,830,2.416,831,2.416,832,4.925,833,2.416,834,3.659,835,2.056,836,2.416,837,2.416,838,2.416,839,2.416,840,2.416,841,2.416,842,3.113,843,2.416,844,2.416,845,3.659,846,2.416,847,3.659,848,2.416,849,2.416,850,3.659,851,4.415,852,2.416,853,2.416,854,3.113,855,2.416,856,2.416,857,2.416,858,2.416,859,2.416]],["title/interfaces/Summarizing.html",[104,0.121,819,2.405]],["body/interfaces/Summarizing.html",[0,0.056,2,0.389,3,0.413,4,0.267,6,0.348,9,1.199,14,0.023,20,0.229,30,0.62,48,1.087,50,0.569,61,0.389,68,0.463,96,0.463,97,0.432,103,0.463,104,0.235,106,0.413,107,0.432,122,0.02,123,0.02,268,3.857,343,4.187,363,3.191,492,3.792,691,5.2,819,4.582,835,5.741,860,4.375,861,5.143]],["title/interfaces/Taggable.html",[101,2.197,104,0.121]],["body/interfaces/Taggable.html",[0,0.051,2,0.337,3,0.378,4,0.231,6,0.301,14,0.024,15,2.003,16,0.978,17,5.215,20,0.198,30,0.568,36,5.08,38,4.758,43,4.758,46,0.734,48,1.034,50,0.71,56,2.176,61,0.486,68,0.511,72,1.126,74,1.278,77,4.208,82,4.208,84,1.708,93,4.208,96,0.337,97,0.374,101,4.338,103,0.423,104,0.226,106,0.434,107,0.539,108,0.77,122,0.018,123,0.018,239,1.906,417,2.963,584,4.208,862,3.784,863,4.447,864,5.592,865,4.447,866,4.447,867,4.447]],["title/interfaces/Time.html",[104,0.121,190,1.434]],["body/interfaces/Time.html",[0,0.057,2,0.315,3,0.401,4,0.217,6,0.282,7,3.435,10,0.864,13,0.87,14,0.024,20,0.185,21,1.705,26,0.806,45,0.975,46,0.644,47,1.324,49,1.192,61,0.315,68,0.511,72,0.987,96,0.315,97,0.35,103,0.518,104,0.202,105,1.345,106,0.363,107,0.451,108,0.644,111,1.488,122,0.017,123,0.017,134,1.405,135,1.324,136,1.705,141,1.427,148,1.921,150,2.403,186,3.374,187,2.585,188,2.381,189,3.135,190,2.958,192,4.023,193,3.135,194,2.585,195,2.988,196,2.77,197,2.829,198,4.255,199,2.829,200,2.055,201,2.829,202,2.829,203,2.585,204,2.829,205,4.037,206,3.135,207,3.135,208,3.643,209,4.037,210,3.135,211,3.135,212,4.037,213,3.135,214,3.144,215,3.135,216,2.585,217,3.135,218,3.135]],["title/classes/TimeUnit.html",[0,0.032,276,2.024]],["body/classes/TimeUnit.html",[0,0.052,2,0.296,3,0.348,4,0.203,6,0.264,14,0.024,16,0.719,19,1.241,20,0.174,21,1.634,22,1.443,26,1.014,30,0.522,45,1.002,46,0.734,48,1.023,50,0.676,52,0.947,61,0.296,62,1.667,68,0.494,72,0.947,74,1.074,96,0.296,97,0.328,103,0.517,106,0.348,107,0.514,108,0.69,111,1.667,122,0.016,123,0.016,141,1.369,147,1.452,150,2.475,153,1.214,166,1.241,176,1.634,190,2.733,195,1.799,196,2.765,208,3.493,239,1.452,270,4.069,276,4.018,314,3.047,316,3.047,317,2.94,361,4.376,868,4.779,869,2.652,870,4.328,871,6.649,872,5.143,873,6.112,874,5.143,875,5.143,876,5.143,877,3.905,878,5.143,879,4.779,880,6.112,881,5.143,882,3.905,883,5.751,884,3.905,885,3.322,886,3.322,887,3.322,888,3.322,889,3.322,890,3.322,891,2.939,892,3.322]],["title/coverage.html",[893,3.625]],["body/coverage.html",[0,0.065,1,1.32,4,0.192,5,3.725,9,0.723,13,0.77,14,0.024,24,1.699,46,0.443,49,1.48,62,0.924,98,2.287,99,2.287,101,2.287,104,0.245,122,0.016,123,0.016,124,2.107,125,3.795,126,1.699,128,1.818,145,1.953,146,1.818,148,1.32,186,1.818,187,3.706,190,1.493,195,1.699,196,1.493,214,1.953,220,2.287,221,3.795,223,1.818,230,1.591,248,1.953,252,2.503,253,3.725,254,3.361,259,2.503,276,2.107,314,1.953,316,1.953,327,1.591,328,4.211,335,2.774,340,3.136,343,2.287,344,3.725,363,2.287,372,2.107,373,3.562,374,3.302,378,2.107,379,2.107,380,2.107,382,2.287,400,2.774,401,3.136,407,3.136,408,2.774,420,2.623,421,3.136,439,2.503,440,3.399,441,3.467,449,2.107,450,1.953,452,2.287,453,2.287,454,2.287,461,2.287,462,2.107,650,2.774,663,2.503,664,3.361,679,2.774,690,3.136,694,3.725,727,4.828,736,2.774,770,2.287,806,2.503,807,4.211,815,4.524,819,2.503,860,3.136,862,3.136,868,5.013,869,4.524,870,2.774,879,2.774,891,2.774,893,2.774,894,3.136,895,3.686,896,3.136,897,6.177,898,5.301,899,5.458,900,3.686,901,3.686,902,3.136,903,4.95,904,4.95,905,3.686,906,3.686,907,3.686,908,3.686,909,3.686,910,3.686,911,3.686,912,3.686,913,3.686,914,4.754,915,6.662,916,3.136,917,3.136,918,3.686,919,3.686,920,6.231,921,3.686,922,3.686,923,3.686,924,4.211,925,4.95,926,3.686,927,3.686,928,3.686,929,3.686,930,3.686,931,4.211,932,3.136,933,5.973,934,3.136,935,3.686,936,3.686,937,3.136,938,3.136]],["title/dependencies.html",[311,2.64,939,2.965]],["body/dependencies.html",[3,0.382,14,0.022,61,0.428,122,0.021,123,0.021,311,3.505,940,5.648,941,5.648,942,5.648,943,4.806,944,5.648]],["title/miscellaneous/functions.html",[13,0.889,945,1.695]],["body/miscellaneous/functions.html",[6,0.365,13,1.129,14,0.021,16,0.756,20,0.24,72,1.225,74,1.129,106,0.365,122,0.02,123,0.02,148,2.254,150,2.548,187,3.353,190,2.862,192,3.904,196,2.188,197,3.67,198,4.521,199,3.67,200,2.666,201,3.67,202,3.67,204,3.67,770,3.904,945,3.089,946,5.404,947,6.292]],["title/index.html",[20,0.132,106,0.2,156,1.571]],["body/index.html",[0,0.038,1,1.485,9,1.399,10,0.668,13,1.019,14,0.024,16,0.682,18,3.058,19,0.909,22,0.676,24,2.616,26,0.804,45,0.961,46,0.343,47,0.909,48,0.984,49,1.084,52,0.763,55,2.153,56,1.461,62,1.678,68,0.217,84,1.104,96,0.483,105,0.717,106,0.28,111,1.804,114,1.516,122,0.013,123,0.013,126,2.728,127,1.319,129,2.801,135,0.909,136,1.804,139,1.943,145,2.584,146,2.406,147,1.603,150,1.159,155,2.573,164,1.636,176,2.084,190,2.299,192,2.573,195,2.248,196,1.159,203,1.775,230,2.794,231,2.371,234,2.816,244,1.025,249,1.025,293,2.406,296,2.573,302,2.573,305,3.121,313,1.943,314,1.516,327,2.751,330,1.411,333,2.983,334,3.528,335,2.153,336,2.434,337,1.516,359,3.528,402,4.551,404,3.528,417,1.516,420,2.584,422,4.596,423,2.788,424,4.15,449,2.371,450,3.43,451,3.312,454,3.789,458,2.153,461,2.573,462,3.965,532,2.153,644,1.775,656,2.434,658,2.434,663,2.816,667,2.153,680,2.434,745,2.153,806,2.816,842,2.434,854,2.434,917,2.434,943,3.528,948,6.558,949,2.861,950,2.861,951,2.861,952,4.147,953,2.861,954,2.861,955,2.861,956,2.861,957,2.861,958,2.861,959,4.147,960,2.861,961,2.861,962,2.861,963,2.861,964,2.861,965,2.861,966,2.861,967,2.861,968,2.861,969,2.861,970,2.861,971,2.861,972,4.147,973,2.861,974,2.861,975,2.861,976,2.861,977,2.861,978,2.861,979,4.147,980,2.861,981,2.861,982,2.861,983,2.861,984,2.861,985,2.861,986,2.861,987,2.861,988,2.861,989,2.861,990,2.861,991,2.861,992,2.861,993,2.861,994,2.861,995,2.861,996,2.861,997,2.861,998,2.861,999,2.861,1000,2.861,1001,2.861,1002,2.861,1003,4.147,1004,2.861,1005,4.147,1006,2.861,1007,2.861,1008,4.147,1009,2.861,1010,2.861,1011,4.147,1012,2.861,1013,2.861,1014,2.861,1015,2.861,1016,2.861,1017,2.861,1018,2.861,1019,2.861,1020,2.861,1021,2.861,1022,2.861,1023,2.861,1024,2.861,1025,2.861,1026,2.861,1027,4.147,1028,2.861,1029,4.147,1030,2.861,1031,4.147,1032,2.861,1033,2.861,1034,2.861,1035,2.861,1036,2.861,1037,2.861,1038,2.861,1039,2.861,1040,2.861,1041,2.861,1042,4.878,1043,2.861,1044,2.861,1045,4.147,1046,4.147,1047,2.861,1048,2.861,1049,2.861,1050,2.861,1051,2.861,1052,2.861,1053,2.861,1054,2.861,1055,2.861,1056,2.861,1057,2.861,1058,2.861,1059,2.861,1060,2.861,1061,2.861,1062,2.861,1063,4.147,1064,2.861,1065,2.861,1066,2.861,1067,2.861,1068,5.349,1069,2.861,1070,2.861,1071,2.861,1072,2.861,1073,2.861,1074,2.861,1075,2.153,1076,2.434]],["title/license.html",[106,0.2,156,1.571,1075,2.231]],["body/license.html",[4,0.261,14,0.019,64,3.405,122,0.019,123,0.019,127,2.311,136,1.913,155,3.111,489,3.773,734,3.773,894,4.266,1075,3.773,1076,4.266,1077,6.452,1078,5.014,1079,5.014,1080,6.02,1081,5.014,1082,5.014,1083,5.014,1084,5.014,1085,6.02,1086,5.014,1087,6.691,1088,7.133,1089,6.02,1090,6.452,1091,5.014,1092,6.452,1093,6.02,1094,5.014,1095,5.014,1096,5.014,1097,5.014,1098,5.014,1099,5.014,1100,5.014,1101,5.014,1102,5.014,1103,5.014,1104,5.014,1105,5.014,1106,6.02,1107,6.02,1108,5.014,1109,5.014,1110,6.02,1111,5.014,1112,5.014,1113,5.014,1114,5.014,1115,5.014,1116,5.014,1117,5.014,1118,5.014,1119,5.014,1120,5.014,1121,5.014,1122,5.014,1123,5.014,1124,5.014,1125,5.014,1126,5.014,1127,5.014,1128,5.014,1129,5.014,1130,5.014,1131,5.014,1132,5.014]],["title/modules.html",[1133,4.099]],["body/modules.html",[14,0.021,122,0.021,123,0.021,1133,4.874]],["title/overview.html",[1134,4.099]],["body/overview.html",[0,0.052,14,0.021,104,0.194,122,0.021,123,0.021,1134,4.843,1135,5.693,1136,5.693]],["title/miscellaneous/typealiases.html",[945,1.695,1137,4.255]],["body/miscellaneous/typealiases.html",[13,1.4,14,0.02,20,0.244,46,0.659,122,0.02,123,0.02,373,3.141,374,3.366,381,4.159,440,2.911,441,3.942,455,5.044,664,4.314,916,4.674,945,3.141,1138,5.494,1139,5.494,1140,6.703,1141,5.494,1142,5.494]],["title/unit-test.html",[270,2.178,1143,3.242]],["body/unit-test.html",[4,0.185,13,0.744,14,0.024,49,0.792,62,0.893,122,0.015,123,0.015,254,2.419,270,2.037,374,1.888,408,2.681,441,2.211,450,1.888,650,2.681,664,3.285,679,2.681,710,2.681,713,4.635,869,2.419,893,2.681,896,3.031,897,6.315,898,4.673,899,5.24,902,3.031,914,3.031,924,5.24,931,5.012,932,3.031,934,4.115,937,3.031,938,3.031,1143,3.031,1144,3.563,1145,3.563,1146,7.222,1147,3.563,1148,4.837,1149,3.563,1150,3.563,1151,4.837,1152,3.563,1153,3.563,1154,3.563,1155,3.563,1156,3.563,1157,3.563,1158,5.492,1159,7.317,1160,3.563,1161,3.563,1162,4.837,1163,3.563,1164,4.837,1165,4.837,1166,3.563,1167,3.563,1168,4.837,1169,3.563,1170,3.563,1171,3.563,1172,5.891,1173,3.563,1174,3.563,1175,3.563,1176,3.563,1177,3.563,1178,4.837,1179,3.563,1180,5.891,1181,5.492,1182,3.563,1183,3.563,1184,3.563,1185,3.563,1186,3.563,1187,3.563,1188,3.563,1189,4.837,1190,3.563,1191,3.563,1192,3.563,1193,4.837,1194,3.563,1195,4.837,1196,3.563,1197,3.563,1198,3.563,1199,3.563,1200,3.563,1201,3.563,1202,3.563,1203,3.563,1204,3.563,1205,3.563,1206,3.563,1207,3.563,1208,3.563,1209,5.492,1210,3.563,1211,3.563,1212,3.563,1213,4.837,1214,3.563,1215,3.563]],["title/miscellaneous/variables.html",[815,2.889,945,1.695]],["body/miscellaneous/variables.html",[14,0.023,20,0.225,47,2.255,48,1.143,62,1.765,122,0.019,123,0.019,195,2.983,196,2.622,314,3.431,316,3.431,344,3.805,363,4.017,364,4.302,365,4.302,815,3.434,868,3.805,869,4.819,870,4.872,879,4.872,885,4.302,886,4.302,887,4.302,888,4.302,889,4.302,890,4.302,891,4.872,892,4.302,945,2.89,1216,7.039,1217,5.056]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["0.005",{"_index":169,"title":{},"body":{"classes/Buckets.html":{}}}],["0.01",{"_index":170,"title":{},"body":{"classes/Buckets.html":{}}}],["0.025",{"_index":171,"title":{},"body":{"classes/Buckets.html":{}}}],["0.05",{"_index":172,"title":{},"body":{"classes/Buckets.html":{}}}],["0.1",{"_index":173,"title":{},"body":{"classes/Buckets.html":{}}}],["0.25",{"_index":174,"title":{},"body":{"classes/Buckets.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":175,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5.9",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":748,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.95",{"_index":751,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0/0",{"_index":1159,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1190,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":176,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["1.0",{"_index":289,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.3",{"_index":510,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.5",{"_index":621,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1/1",{"_index":902,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":179,"title":{},"body":{"classes/Buckets.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["100",{"_index":897,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["10000",{"_index":161,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["1000000",{"_index":208,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":1044,"title":{},"body":{"index.html":{}}}],["100m",{"_index":1045,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":1148,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":735,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["12/12",{"_index":1213,"title":{},"body":{"unit-test.html":{}}}],["12/27",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["12345",{"_index":1011,"title":{},"body":{"index.html":{}}}],["13/15",{"_index":1207,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["13/28",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":1200,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":284,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{}}}],["15/16",{"_index":1191,"title":{},"body":{"unit-test.html":{}}}],["15/30",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":934,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["162/172",{"_index":1187,"title":{},"body":{"unit-test.html":{}}}],["166/176",{"_index":1182,"title":{},"body":{"unit-test.html":{}}}],["17/17",{"_index":1208,"title":{},"body":{"unit-test.html":{}}}],["18/19",{"_index":1215,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":1203,"title":{},"body":{"unit-test.html":{}}}],["19/39",{"_index":1171,"title":{},"body":{"unit-test.html":{}}}],["2.0.0",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["2.5",{"_index":177,"title":{},"body":{"classes/Buckets.html":{}}}],["2/2",{"_index":898,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":736,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["20/20",{"_index":1195,"title":{},"body":{"unit-test.html":{}}}],["20/35",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["2017",{"_index":1079,"title":{},"body":{"license.html":{}}}],["21",{"_index":1136,"title":{},"body":{"overview.html":{}}}],["21/24",{"_index":1173,"title":{},"body":{"unit-test.html":{}}}],["21/25",{"_index":1199,"title":{},"body":{"unit-test.html":{}}}],["22",{"_index":737,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["22/25",{"_index":1189,"title":{},"body":{"unit-test.html":{}}}],["23",{"_index":1135,"title":{},"body":{"overview.html":{}}}],["24.25",{"_index":746,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["25",{"_index":738,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["25/28",{"_index":1156,"title":{},"body":{"unit-test.html":{}}}],["25/40",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["26/26",{"_index":1162,"title":{},"body":{"unit-test.html":{}}}],["26/29",{"_index":1152,"title":{},"body":{"unit-test.html":{}}}],["27/27",{"_index":1193,"title":{},"body":{"unit-test.html":{}}}],["28/28",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":745,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["3/3",{"_index":899,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":1166,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":739,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["30.000",{"_index":315,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["30/45",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":740,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["32bit",{"_index":357,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":747,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["39/41",{"_index":1209,"title":{},"body":{"unit-test.html":{}}}],["4/4",{"_index":924,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/5",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":741,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["41/43",{"_index":1205,"title":{},"body":{"unit-test.html":{}}}],["44",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["46",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["47/47",{"_index":1178,"title":{},"body":{"unit-test.html":{}}}],["49",{"_index":1170,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":178,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["5/5",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1165,"title":{},"body":{"unit-test.html":{}}}],["50",{"_index":727,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["500",{"_index":312,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["51,25",{"_index":750,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["54/86",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":742,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["56",{"_index":743,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["57",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":914,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/9",{"_index":1154,"title":{},"body":{"unit-test.html":{}}}],["60",{"_index":281,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["62",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["64bit",{"_index":355,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["66",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["67",{"_index":1153,"title":{},"body":{"unit-test.html":{}}}],["68",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":931,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["75",{"_index":710,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["79/85",{"_index":1186,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":749,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["8/23",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":932,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":1201,"title":{},"body":{"unit-test.html":{}}}],["83",{"_index":1164,"title":{},"body":{"unit-test.html":{}}}],["83/97",{"_index":1184,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":1198,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":1183,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":1206,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":1172,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":1155,"title":{},"body":{"unit-test.html":{}}}],["9/11",{"_index":1202,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":1158,"title":{},"body":{"unit-test.html":{}}}],["90",{"_index":1151,"title":{},"body":{"unit-test.html":{}}}],["91/95",{"_index":1174,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":1185,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":1181,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":713,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95/99",{"_index":1169,"title":{},"body":{"unit-test.html":{}}}],["96",{"_index":1168,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":716,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99",{"_index":722,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9",{"_index":719,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["abov",{"_index":1105,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/Logger.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":375,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accord",{"_index":193,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["action",{"_index":1126,"title":{},"body":{"license.html":{}}}],["actual",{"_index":237,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":644,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"index.html":{}}}],["add",{"_index":243,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{}}}],["add(valu",{"_index":352,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration(dur",{"_index":829,"title":{},"body":{"classes/StopWatch.html":{}}}],["addlistener(listen",{"_index":495,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistri",{"_index":665,"title":{},"body":{"classes/MetricReporter.html":{}}}],["addmetricregistry(metricregistri",{"_index":669,"title":{},"body":{"classes/MetricReporter.html":{}}}],["again",{"_index":460,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["alias",{"_index":1138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":1070,"title":{},"body":{"index.html":{}}}],["alpha",{"_index":258,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_sampler",{"_index":262,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_sampler",{"_index":263,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_sampler",{"_index":260,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_sampler",{"_index":261,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_sampler",{"_index":264,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_sampler",{"_index":265,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alway",{"_index":217,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["and/or",{"_index":1099,"title":{},"body":{"license.html":{}}}],["applic",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"index.html":{}}}],["arg",{"_index":406,"title":{},"body":{"interfaces/Logger.html":{}}}],["aris",{"_index":1130,"title":{},"body":{"license.html":{}}}],["around",{"_index":1043,"title":{},"body":{"index.html":{}}}],["arr",{"_index":633,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":634,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":635,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":244,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["array(count",{"_index":162,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["arraylength",{"_index":1006,"title":{},"body":{"index.html":{}}}],["arraylength.getvalue();histogram",{"_index":1016,"title":{},"body":{"index.html":{}}}],["arraylengthgaug",{"_index":1001,"title":{},"body":{"index.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":1007,"title":{},"body":{"index.html":{}}}],["associ",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"license.html":{}}}],["assum",{"_index":199,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["asynchron",{"_index":852,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribut",{"_index":377,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["author",{"_index":1119,"title":{},"body":{"license.html":{}}}],["averag",{"_index":257,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.t",{"_index":254,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:103",{"_index":294,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:111",{"_index":277,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:134",{"_index":297,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:144",{"_index":300,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:155",{"_index":299,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:168",{"_index":310,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:182",{"_index":301,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":683,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":684,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:37",{"_index":686,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:45",{"_index":685,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:57",{"_index":282,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:58",{"_index":283,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:59",{"_index":287,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":288,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":285,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":286,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:71",{"_index":278,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:79",{"_index":291,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:87",{"_index":292,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:95",{"_index":290,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["avg",{"_index":266,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":1053,"title":{},"body":{"index.html":{}}}],["b",{"_index":164,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{}}}],["basemetr",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["basemetric.count",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["basenam",{"_index":456,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basic",{"_index":958,"title":{},"body":{"index.html":{}}}],["begin",{"_index":783,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["between",{"_index":817,"title":{},"body":{"classes/StopWatch.html":{}}}],["book",{"_index":962,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":480,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["boundari",{"_index":138,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":1144,"title":{},"body":{"unit-test.html":{}}}],["bucket",{"_index":128,"title":{"classes/Buckets.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["bucketcount",{"_index":124,"title":{"interfaces/BucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["buckets(boundari",{"_index":163,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buckets=new",{"_index":826,"title":{},"body":{"classes/StopWatch.html":{}}}],["bucketwidth",{"_index":157,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buffer",{"_index":1068,"title":{},"body":{"index.html":{}}}],["build",{"_index":492,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["c",{"_index":1078,"title":{},"body":{"license.html":{}}}],["calcul",{"_index":255,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":423,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["callcount",{"_index":1023,"title":{},"body":{"index.html":{}}}],["callcount.get15minuter",{"_index":1028,"title":{},"body":{"index.html":{}}}],["callcount.get1minuter",{"_index":1032,"title":{},"body":{"index.html":{}}}],["callcount.get5minuter",{"_index":1030,"title":{},"body":{"index.html":{}}}],["callcount.getcount",{"_index":1026,"title":{},"body":{"index.html":{}}}],["callcount.getmeanrate();tim",{"_index":1033,"title":{},"body":{"index.html":{}}}],["callcount.mark(1",{"_index":1025,"title":{},"body":{"index.html":{}}}],["callstat",{"_index":1034,"title":{},"body":{"index.html":{}}}],["callstats.addduration(100",{"_index":1036,"title":{},"body":{"index.html":{}}}],["callstats.get15minuter",{"_index":1038,"title":{},"body":{"index.html":{}}}],["callstats.get1minuter",{"_index":1040,"title":{},"body":{"index.html":{}}}],["callstats.get5minuter",{"_index":1039,"title":{},"body":{"index.html":{}}}],["callstats.getcount",{"_index":1037,"title":{},"body":{"index.html":{}}}],["callstats.getmeanr",{"_index":1041,"title":{},"body":{"index.html":{}}}],["callstats.getsnapshot",{"_index":1042,"title":{},"body":{"index.html":{}}}],["callstats.newstopwatch",{"_index":1047,"title":{},"body":{"index.html":{}}}],["callstats.tim",{"_index":1051,"title":{},"body":{"index.html":{}}}],["callstats.timeasync(async",{"_index":1054,"title":{},"body":{"index.html":{}}}],["capac",{"_index":234,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["carbon",{"_index":973,"title":{},"body":{"index.html":{}}}],["catch((err",{"_index":855,"title":{},"body":{"classes/StopWatch.html":{}}}],["caus",{"_index":997,"title":{},"body":{"index.html":{}}}],["chang",{"_index":413,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["charg",{"_index":1084,"title":{},"body":{"license.html":{}}}],["check",{"_index":383,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["child",{"_index":608,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["cint64",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["cint64\").int64",{"_index":365,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":1122,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["clock",{"_index":186,"title":{"classes/Clock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["clock:49",{"_index":805,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=this.defaultclock",{"_index":590,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["code",{"_index":864,"title":{},"body":{"interfaces/Taggable.html":{}}}],["collect",{"_index":249,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["collection.length",{"_index":386,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.s",{"_index":389,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["combin",{"_index":825,"title":{},"body":{"classes/StopWatch.html":{}}}],["commonli",{"_index":11,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["compon",{"_index":216,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["condit",{"_index":1104,"title":{},"body":{"license.html":{}}}],["config",{"_index":841,"title":{},"body":{"classes/StopWatch.html":{}}}],["connect",{"_index":1132,"title":{},"body":{"license.html":{}}}],["consid",{"_index":733,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["consol",{"_index":972,"title":{},"body":{"index.html":{}}}],["console.log(`ad",{"_index":1056,"title":{},"body":{"index.html":{}}}],["console.log(`remov",{"_index":1057,"title":{},"body":{"index.html":{}}}],["const",{"_index":111,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["constructor(alpha",{"_index":275,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(boundari",{"_index":167,"title":{},"body":{"classes/Buckets.html":{}}}],["constructor(clock",{"_index":810,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(initi",{"_index":350,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listen",{"_index":660,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(maxs",{"_index":232,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":446,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(nam",{"_index":336,"title":{},"body":{"interfaces/Gauge.html":{},"index.html":{}}}],["constructor(nanosecondsperunit",{"_index":874,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(priv",{"_index":463,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(valu",{"_index":705,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["contain",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{}}}],["container.t",{"_index":408,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{},"unit-test.html":{}}}],["container.ts:19",{"_index":411,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:29",{"_index":409,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:39",{"_index":416,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:49",{"_index":419,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["contract",{"_index":1127,"title":{},"body":{"license.html":{}}}],["conveni",{"_index":808,"title":{},"body":{"classes/StopWatch.html":{}}}],["convert",{"_index":361,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":872,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(valu",{"_index":876,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copi",{"_index":1087,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1077,"title":{},"body":{"license.html":{}}}],["correspond",{"_index":140,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["corrspond",{"_index":494,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["count",{"_index":126,"title":{"interfaces/Counting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["countabl",{"_index":143,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["counter",{"_index":24,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["counter(nam",{"_index":585,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.setgroup(group",{"_index":586,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["coverag",{"_index":893,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":153,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["current",{"_index":134,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["damag",{"_index":1123,"title":{},"body":{"license.html":{}}}],["data",{"_index":1064,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":212,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["day",{"_index":891,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":1089,"title":{},"body":{"license.html":{}}}],["debug",{"_index":403,"title":{},"body":{"interfaces/Logger.html":{}}}],["default",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultclock",{"_index":490,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultnamefactory(basenam",{"_index":488,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultreservoir",{"_index":220,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defin",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["delet",{"_index":501,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["depend",{"_index":311,"title":{"dependencies.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"dependencies.html":{}}}],["deprec",{"_index":508,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["description=nul",{"_index":582,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["determin",{"_index":188,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{}}}],["deviat",{"_index":730,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":770,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(on",{"_index":204,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["differ",{"_index":302,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["directgaug",{"_index":479,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["distribut",{"_index":155,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{},"license.html":{}}}],["divid",{"_index":304,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["document",{"_index":894,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":203,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["dure",{"_index":1071,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":147,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["each",{"_index":1062,"title":{},"body":{"index.html":{}}}],["elaps",{"_index":197,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elasticsearch",{"_index":975,"title":{},"body":{"index.html":{}}}],["elder",{"_index":201,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["element",{"_index":1067,"title":{},"body":{"index.html":{}}}],["embed",{"_index":832,"title":{},"body":{"classes/StopWatch.html":{}}}],["end",{"_index":151,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["entitycount",{"_index":1017,"title":{},"body":{"index.html":{}}}],["entitycount.getsnapshot",{"_index":1021,"title":{},"body":{"index.html":{}}}],["entitycount.getvalu",{"_index":1020,"title":{},"body":{"index.html":{}}}],["entitycount.update(12345",{"_index":1019,"title":{},"body":{"index.html":{}}}],["equal",{"_index":880,"title":{},"body":{"classes/TimeUnit.html":{}}}],["err",{"_index":857,"title":{},"body":{"classes/StopWatch.html":{}}}],["error",{"_index":404,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["errorcount",{"_index":994,"title":{},"body":{"index.html":{}}}],["errorcount.getcount",{"_index":999,"title":{},"body":{"index.html":{}}}],["errorcount.incr",{"_index":998,"title":{},"body":{"index.html":{}}}],["errorcount.increment(1",{"_index":996,"title":{},"body":{"index.html":{}}}],["errorcount.reset();gaug",{"_index":1000,"title":{},"body":{"index.html":{}}}],["event",{"_index":127,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{},"license.html":{}}}],["everyth",{"_index":142,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["exampl",{"_index":19,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["execut",{"_index":1072,"title":{},"body":{"index.html":{}}}],["exponenti",{"_index":165,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponential(initi",{"_index":181,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentiallyweightedmovingaverag",{"_index":252,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":103,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["express",{"_index":1112,"title":{},"body":{"license.html":{}}}],["extend",{"_index":105,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["extractor",{"_index":391,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":850,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":182,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factori",{"_index":491,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["few",{"_index":986,"title":{},"body":{"index.html":{}}}],["field",{"_index":1065,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["filter((metr",{"_index":637,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.iscount",{"_index":514,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgaug",{"_index":520,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":523,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismet",{"_index":526,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecount",{"_index":534,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istim",{"_index":529,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["final",{"_index":418,"title":{},"body":{"interfaces/MetadataContainer.html":{},"classes/StopWatch.html":{}}}],["find",{"_index":631,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricadded(nam",{"_index":645,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved(nam",{"_index":648,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":200,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["fit",{"_index":1115,"title":{},"body":{"license.html":{}}}],["fo",{"_index":691,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/Summarizing.html":{}}}],["follow",{"_index":734,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((registr",{"_index":515,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["free",{"_index":1083,"title":{},"body":{"license.html":{}}}],["function",{"_index":13,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["function'",{"_index":845,"title":{},"body":{"classes/StopWatch.html":{}}}],["furnish",{"_index":1102,"title":{},"body":{"license.html":{}}}],["futur",{"_index":412,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["gather",{"_index":1063,"title":{},"body":{"index.html":{}}}],["gaug",{"_index":327,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"index.html":{}}}],["gauge.t",{"_index":374,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":399,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":780,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugeregistr",{"_index":482,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gener",{"_index":487,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generatename(nam",{"_index":640,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["get",{"_index":106,"title":{"index.html":{},"license.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get15minuter",{"_index":425,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get1minuter",{"_index":426,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get5minuter",{"_index":427,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentil",{"_index":695,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentil",{"_index":696,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentil",{"_index":697,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentil",{"_index":698,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentil",{"_index":699,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getalpha",{"_index":271,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverag",{"_index":272,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":298,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbucket",{"_index":131,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/StopWatch.html":{}}}],["getbyname(nam",{"_index":636,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":132,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["getcounter(nam",{"_index":543,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":511,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbynam",{"_index":542,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname(nam",{"_index":556,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdefaultclock",{"_index":505,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescript",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["getfirstbyname(nam",{"_index":632,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaug",{"_index":519,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauge(nam",{"_index":545,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":518,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbynam",{"_index":544,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname(nam",{"_index":558,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgroup",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["gethistogram",{"_index":522,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogram(nam",{"_index":548,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":521,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbynam",{"_index":547,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname(nam",{"_index":560,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmax",{"_index":700,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":701,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanr",{"_index":428,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["getmedian",{"_index":702,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmet",{"_index":525,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetadata",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["getmetadata(nam",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmetadatamap",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmeter(nam",{"_index":550,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":524,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbynam",{"_index":549,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname(nam",{"_index":561,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetr",{"_index":535,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetric(nam",{"_index":540,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetriclist",{"_index":536,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetricsbynam",{"_index":539,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsbyname(nam",{"_index":554,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmin",{"_index":703,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":533,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountersbyname(nam",{"_index":557,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getnam",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["getnanosecondsperunit",{"_index":873,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getsnapshot",{"_index":692,"title":{},"body":{"interfaces/Sampling.html":{},"classes/StopWatch.html":{}}}],["getstddev",{"_index":704,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":835,"title":{},"body":{"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["gettag(nam",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["gettim",{"_index":528,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimer(nam",{"_index":552,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":527,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbynam",{"_index":551,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname(nam",{"_index":562,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getunit",{"_index":273,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalu",{"_index":330,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["getvalue(0.5",{"_index":726,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":709,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":712,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":715,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":721,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":718,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantil",{"_index":731,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["give",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["given",{"_index":317,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/TimeUnit.html":{}}}],["grant",{"_index":1082,"title":{},"body":{"license.html":{}}}],["graphit",{"_index":974,"title":{},"body":{"index.html":{}}}],["group",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["group=nul",{"_index":581,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupabl",{"_index":98,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["here",{"_index":415,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["herebi",{"_index":1081,"title":{},"body":{"license.html":{}}}],["high",{"_index":306,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":146,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["histogram(reservoir",{"_index":600,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.setgroup(group",{"_index":601,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["holder",{"_index":1120,"title":{},"body":{"license.html":{}}}],["hour",{"_index":870,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["http://metrics.dropwizard.io",{"_index":951,"title":{},"body":{"index.html":{}}}],["id",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["identifi",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["impli",{"_index":1113,"title":{},"body":{"license.html":{}}}],["import",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["includ",{"_index":1092,"title":{},"body":{"license.html":{}}}],["increas",{"_index":965,"title":{},"body":{"index.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(metr",{"_index":574,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":568,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["influx",{"_index":976,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["inherit",{"_index":804,"title":{},"body":{"classes/StdClock.html":{}}}],["initi",{"_index":184,"title":{},"body":{"classes/Buckets.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{}}}],["initial=0",{"_index":366,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["insert",{"_index":653,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":948,"title":{},"body":{"index.html":{}}}],["instal",{"_index":952,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["instance.getmetr",{"_index":485,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalu",{"_index":481,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":471,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalu",{"_index":483,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":470,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instead",{"_index":512,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["int64",{"_index":363,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initi",{"_index":368,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":347,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapp",{"_index":343,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["integ",{"_index":359,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{}}}],["interfac",{"_index":104,"title":{"interfaces/BucketCounting.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"coverage.html":{},"overview.html":{}}}],["intern",{"_index":842,"title":{},"body":{"classes/StopWatch.html":{},"index.html":{}}}],["interv",{"_index":267,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["invoc",{"_index":818,"title":{},"body":{"classes/StopWatch.html":{}}}],["invok",{"_index":643,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["iscounter(inst",{"_index":469,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isgauge(inst",{"_index":478,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram(inst",{"_index":475,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface(collect",{"_index":384,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface(collect",{"_index":387,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismeter(inst",{"_index":476,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset(inst",{"_index":484,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter(inst",{"_index":472,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(quantil",{"_index":772,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["ispuremonotonecounter(inst",{"_index":473,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["issizeattributeinterface(collect",{"_index":388,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface(collect",{"_index":390,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istimer(inst",{"_index":477,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it'",{"_index":362,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["javascript",{"_index":356,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["keep",{"_index":651,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["key",{"_index":410,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["kind",{"_index":1111,"title":{},"body":{"license.html":{}}}],["last",{"_index":303,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["length",{"_index":376,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["lengthattributeinterfac",{"_index":372,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterfac",{"_index":378,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["liabil",{"_index":1124,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":1121,"title":{},"body":{"license.html":{}}}],["lib/.../clock.t",{"_index":946,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../int64.t",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../logg",{"_index":1141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../metr",{"_index":1139,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../siz",{"_index":1142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../tim",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/clock.t",{"_index":187,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/metrics/clock.ts:49",{"_index":191,"title":{},"body":{"classes/Clock.html":{}}}],["lib/metrics/clock.ts:68",{"_index":803,"title":{},"body":{"classes/StdClock.html":{}}}],["lib/metrics/counter.t",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/counting.t",{"_index":125,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"coverage.html":{}}}],["lib/metrics/counting.ts:120",{"_index":133,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:130",{"_index":137,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:20",{"_index":219,"title":{},"body":{"interfaces/Counting.html":{}}}],["lib/metrics/counting.ts:43",{"_index":185,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:67",{"_index":183,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:88",{"_index":168,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:97",{"_index":180,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/gauge.t",{"_index":328,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{}}}],["lib/metrics/gauge.ts:21",{"_index":331,"title":{},"body":{"interfaces/Gauge.html":{}}}],["lib/metrics/groupable.t",{"_index":340,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{}}}],["lib/metrics/groupable.ts:18",{"_index":341,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/groupable.ts:26",{"_index":342,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/histogram.t",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/int64.t",{"_index":344,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/int64.ts:18",{"_index":351,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:36",{"_index":353,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:46",{"_index":354,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:56",{"_index":360,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/logg",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/logger.t",{"_index":401,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["lib/metrics/metadata",{"_index":407,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{}}}],["lib/metrics/meter.t",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/metered.t",{"_index":421,"title":{},"body":{"interfaces/Metered.html":{},"coverage.html":{}}}],["lib/metrics/metered.ts:20",{"_index":432,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:28",{"_index":429,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:36",{"_index":431,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:44",{"_index":430,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:52",{"_index":434,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metr",{"_index":440,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/metric.t",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["lib/metrics/metric.ts:103",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:111",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:119",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:121",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:125",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:129",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:135",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:139",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:143",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:147",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:151",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:155",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:159",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:163",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:167",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:171",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:175",{"_index":83,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:179",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:23",{"_index":436,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:31",{"_index":438,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:39",{"_index":435,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:47",{"_index":437,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:71",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:79",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:87",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:95",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/mov",{"_index":253,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.t",{"_index":221,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.ts:110",{"_index":240,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:133",{"_index":786,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:141",{"_index":785,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:149",{"_index":784,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:167",{"_index":787,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:179",{"_index":789,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:19",{"_index":687,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:193",{"_index":788,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:27",{"_index":689,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:35",{"_index":688,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:57",{"_index":235,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:65",{"_index":233,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:83",{"_index":236,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:95",{"_index":242,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/s",{"_index":373,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/sampling.t",{"_index":690,"title":{},"body":{"interfaces/Sampling.html":{},"coverage.html":{}}}],["lib/metrics/sampling.ts:19",{"_index":693,"title":{},"body":{"interfaces/Sampling.html":{}}}],["lib/metrics/snapshot.t",{"_index":694,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["lib/metrics/snapshot.ts:105",{"_index":799,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:114",{"_index":800,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:134",{"_index":706,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:153",{"_index":708,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:163",{"_index":711,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:17",{"_index":790,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:173",{"_index":714,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:183",{"_index":717,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:193",{"_index":720,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:203",{"_index":725,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:213",{"_index":723,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:223",{"_index":728,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:233",{"_index":753,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:243",{"_index":754,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:25",{"_index":791,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:253",{"_index":724,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:269",{"_index":729,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:303",{"_index":732,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:33",{"_index":792,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:41",{"_index":793,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:49",{"_index":794,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:57",{"_index":797,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:65",{"_index":795,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:73",{"_index":798,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:81",{"_index":801,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:89",{"_index":802,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:97",{"_index":796,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/summarizing.t",{"_index":860,"title":{},"body":{"interfaces/Summarizing.html":{},"coverage.html":{}}}],["lib/metrics/summarizing.ts:18",{"_index":861,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["lib/metrics/taggable.t",{"_index":862,"title":{},"body":{"interfaces/Taggable.html":{},"coverage.html":{}}}],["lib/metrics/taggable.ts:17",{"_index":865,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:26",{"_index":863,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:35",{"_index":867,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:43",{"_index":866,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/tim",{"_index":868,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/timer.t",{"_index":807,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{}}}],["lib/metrics/timer.ts:31",{"_index":812,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:39",{"_index":813,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:47",{"_index":811,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:66",{"_index":814,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:76",{"_index":816,"title":{},"body":{"classes/StopWatch.html":{}}}],["librari",{"_index":402,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["licens",{"_index":1075,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":1093,"title":{},"body":{"license.html":{}}}],["line",{"_index":1145,"title":{},"body":{"unit-test.html":{}}}],["linear",{"_index":154,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["linear(start",{"_index":159,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["link",{"_index":144,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["list",{"_index":530,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["listen",{"_index":451,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["listener.metricadded(nam",{"_index":647,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(nam",{"_index":649,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.t",{"_index":650,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{},"unit-test.html":{}}}],["listener.ts:20",{"_index":657,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:29",{"_index":659,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["logger",{"_index":400,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["loggerreport",{"_index":917,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["loggerreporter(global.consol",{"_index":981,"title":{},"body":{"index.html":{}}}],["logic",{"_index":194,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["lower",{"_index":776,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["m",{"_index":629,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.getnam",{"_index":628,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":567,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getnam",{"_index":618,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":1031,"title":{},"body":{"index.html":{}}}],["m15",{"_index":1027,"title":{},"body":{"index.html":{}}}],["m5",{"_index":1029,"title":{},"body":{"index.html":{}}}],["mamang",{"_index":553,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manag",{"_index":464,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mani",{"_index":961,"title":{},"body":{"index.html":{}}}],["manual",{"_index":498,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["map",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["map((m",{"_index":566,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metr",{"_index":639,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((registr",{"_index":531,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map.set(registration.nam",{"_index":516,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mark",{"_index":149,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["match",{"_index":123,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math.exp",{"_index":280,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(po",{"_index":779,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(po",{"_index":774,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":771,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":238,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["maximum",{"_index":224,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["maxsiz",{"_index":228,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":129,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Metered.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["meant",{"_index":953,"title":{},"body":{"index.html":{}}}],["measur",{"_index":422,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["memberof",{"_index":107,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["merchant",{"_index":1114,"title":{},"body":{"license.html":{}}}],["merg",{"_index":1096,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["metadatacontain",{"_index":99,"title":{"interfaces/MetadataContainer.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["meter",{"_index":420,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["meter(clock",{"_index":594,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.setgroup(group",{"_index":595,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["method",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["metric",{"_index":9,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/Sampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"index.html":{}}}],["metric.getgroup",{"_index":641,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getgroup()}.${nam",{"_index":642,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":617,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":626,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.metricref",{"_index":538,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.nam",{"_index":638,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setdescription(descript",{"_index":611,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":610,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(nam",{"_index":624,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricad",{"_index":654,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(nam",{"_index":656,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricnam",{"_index":457,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref",{"_index":445,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getnam",{"_index":467,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistr",{"_index":439,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{}}}],["metricregistration(metr",{"_index":614,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistri",{"_index":462,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metricregistry.defaultnamefactori",{"_index":493,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(inst",{"_index":474,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metr",{"_index":612,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metr",{"_index":616,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylisten",{"_index":449,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistr",{"_index":461,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistration(listen",{"_index":497,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricremov",{"_index":655,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(nam",{"_index":658,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricreport",{"_index":663,"title":{"classes/MetricReporter.html":{}},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metrics.foreach((metr",{"_index":573,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":565,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics/lib/metrics/clock.t",{"_index":1147,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counter.t",{"_index":1149,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counting.t",{"_index":1150,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/gauge.t",{"_index":1157,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/groupable.t",{"_index":1160,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/histogram.t",{"_index":1161,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/int64.t",{"_index":1163,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logg",{"_index":1167,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logger.t",{"_index":1175,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metadata",{"_index":1176,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/meter.t",{"_index":1177,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metered.t",{"_index":1179,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metr",{"_index":1180,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metric.t",{"_index":1188,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/mov",{"_index":1192,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reservoir.t",{"_index":1194,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/s",{"_index":1197,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/sampling.t",{"_index":1196,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/snapshot.t",{"_index":1204,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/summarizing.t",{"_index":1210,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/taggable.t",{"_index":1211,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/tim",{"_index":1212,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/timer.t",{"_index":1214,"title":{},"body":{"unit-test.html":{}}}],["metrics[0",{"_index":571,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricset",{"_index":452,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{}}}],["microsecond",{"_index":879,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":881,"title":{},"body":{"classes/TimeUnit.html":{}}}],["millisecond",{"_index":195,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":756,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["minut",{"_index":316,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["miscellan",{"_index":945,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1076,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":1146,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":1095,"title":{},"body":{"license.html":{}}}],["modul",{"_index":1133,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":949,"title":{},"body":{"index.html":{}}}],["monoton",{"_index":532,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["monotonecount",{"_index":145,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["monotonecounter(nam",{"_index":589,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["more",{"_index":307,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["move",{"_index":256,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverag",{"_index":259,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["multipl",{"_index":444,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["multipli",{"_index":295,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["myarray",{"_index":1005,"title":{},"body":{"index.html":{}}}],["myarray.push(1",{"_index":1013,"title":{},"body":{"index.html":{}}}],["myarray.push(2",{"_index":1014,"title":{},"body":{"index.html":{}}}],["myarray.push(3",{"_index":1015,"title":{},"body":{"index.html":{}}}],["name",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namefactori",{"_index":455,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["nan",{"_index":752,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":196,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":878,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanosecond",{"_index":325,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanosecondsperunit",{"_index":871,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nativ",{"_index":346,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["necessari",{"_index":960,"title":{},"body":{"index.html":{}}}],["need",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["new",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["newcounter(nam",{"_index":583,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhistogram",{"_index":598,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmet",{"_index":592,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter(nam",{"_index":588,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newstopwatch",{"_index":858,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtim",{"_index":603,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["node",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["nodej",{"_index":955,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":1118,"title":{},"body":{"license.html":{}}}],["notic",{"_index":1106,"title":{},"body":{"license.html":{}}}],["now",{"_index":1074,"title":{},"body":{"index.html":{}}}],["npm",{"_index":956,"title":{},"body":{"index.html":{}}}],["null",{"_index":584,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Taggable.html":{}}}],["num",{"_index":348,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["object",{"_index":135,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{}}}],["obtain",{"_index":1086,"title":{},"body":{"license.html":{}}}],["old",{"_index":226,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["on",{"_index":150,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["one.millisecond",{"_index":207,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanosecond",{"_index":206,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalu",{"_index":205,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["option",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":781,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["otherwis",{"_index":1129,"title":{},"body":{"license.html":{}}}],["out",{"_index":1131,"title":{},"body":{"license.html":{}}}],["over",{"_index":970,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1134,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":939,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":108,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["paramet",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1116,"title":{},"body":{"license.html":{}}}],["pass",{"_index":293,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["per",{"_index":313,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["permiss",{"_index":1080,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1101,"title":{},"body":{"license.html":{}}}],["person",{"_index":1085,"title":{},"body":{"license.html":{}}}],["po",{"_index":773,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["point",{"_index":192,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pool",{"_index":847,"title":{},"body":{"classes/StopWatch.html":{}}}],["portion",{"_index":1109,"title":{},"body":{"license.html":{}}}],["posit",{"_index":247,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["precis",{"_index":160,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["precision=10000",{"_index":158,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["previous",{"_index":673,"title":{},"body":{"classes/MetricReporter.html":{}}}],["print",{"_index":979,"title":{},"body":{"index.html":{}}}],["privat",{"_index":22,"title":{},"body":{"classes/BaseMetric.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["progress",{"_index":189,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["prometheu",{"_index":977,"title":{},"body":{"index.html":{}}}],["promis",{"_index":854,"title":{},"body":{"classes/StopWatch.html":{},"index.html":{}}}],["properti",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["protect",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["provid",{"_index":489,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"license.html":{}}}],["proxi",{"_index":442,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["public",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["publish",{"_index":1097,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":1117,"title":{},"body":{"license.html":{}}}],["pushgateway",{"_index":978,"title":{},"body":{"index.html":{}}}],["quantil",{"_index":744,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["queue",{"_index":334,"title":{},"body":{"interfaces/Gauge.html":{},"index.html":{}}}],["queuesiz",{"_index":1003,"title":{},"body":{"index.html":{}}}],["queuesize.getvalu",{"_index":1012,"title":{},"body":{"index.html":{}}}],["queuesize.setvalue(12345",{"_index":1010,"title":{},"body":{"index.html":{}}}],["random",{"_index":246,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["rang",{"_index":152,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["rate",{"_index":296,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reach",{"_index":225,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"interfaces/Metric.html":{}}}],["refer",{"_index":468,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["reflect",{"_index":414,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["regardless",{"_index":329,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["regist",{"_index":443,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register",{"_index":620,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register(nam",{"_index":623,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetr",{"_index":622,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetric(metr",{"_index":609,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registr",{"_index":458,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["registration.metricref",{"_index":517,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metr",{"_index":1061,"title":{},"body":{"index.html":{}}}],["registri",{"_index":450,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["registry.addlistener(new",{"_index":1058,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"newalloc",{"_index":1073,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"request",{"_index":1060,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"requestcount",{"_index":989,"title":{},"body":{"index.html":{}}}],["registry.newhistogram(\"requestcount",{"_index":1018,"title":{},"body":{"index.html":{}}}],["registry.newmeter(\"callcount",{"_index":1024,"title":{},"body":{"index.html":{}}}],["registry.newmonotonecounter(\"errorcount",{"_index":995,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"callstat",{"_index":1035,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"request",{"_index":982,"title":{},"body":{"index.html":{}}}],["registry.registermetric(arraylength",{"_index":1009,"title":{},"body":{"index.html":{}}}],["registry.registermetric(capac",{"_index":1069,"title":{},"body":{"index.html":{}}}],["registry.registermetric(queues",{"_index":1008,"title":{},"body":{"index.html":{}}}],["registry.t",{"_index":441,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:24",{"_index":661,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:40",{"_index":662,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:61",{"_index":448,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:68",{"_index":447,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["remov",{"_index":417,"title":{},"body":{"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["removecounter(nam",{"_index":575,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegauge(nam",{"_index":577,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram(nam",{"_index":578,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener(listen",{"_index":499,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetadata",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["removemetadata(nam",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["removemeter(nam",{"_index":579,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetr",{"_index":563,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetric(nam",{"_index":564,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistri",{"_index":666,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetricregistry(metricregistri",{"_index":671,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetrics(nam",{"_index":572,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removetag",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["removetag(nam",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["removetimer(nam",{"_index":580,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["replac",{"_index":227,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":333,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricReporter.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":983,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":984,"title":{},"body":{"index.html":{}}}],["reporter.t",{"_index":664,"title":{},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:21",{"_index":668,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:29",{"_index":674,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:37",{"_index":675,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:45",{"_index":670,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:55",{"_index":672,"title":{},"body":{"classes/MetricReporter.html":{}}}],["repres",{"_index":141,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["represent",{"_index":102,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["request",{"_index":424,"title":{},"body":{"interfaces/Metered.html":{},"index.html":{}}}],["requestcount",{"_index":988,"title":{},"body":{"index.html":{}}}],["requestcount.decrement(1",{"_index":991,"title":{},"body":{"index.html":{}}}],["requestcount.getcount",{"_index":992,"title":{},"body":{"index.html":{}}}],["requestcount.increment(1",{"_index":990,"title":{},"body":{"index.html":{}}}],["requestcount.reset();monotonecount",{"_index":993,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":987,"title":{},"body":{"index.html":{}}}],["require(\"nod",{"_index":364,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["reservoir",{"_index":223,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=nul",{"_index":597,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["resourc",{"_index":968,"title":{},"body":{"index.html":{}}}],["restart",{"_index":782,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restrict",{"_index":1091,"title":{},"body":{"license.html":{}}}],["result",{"_index":122,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["right",{"_index":1094,"title":{},"body":{"license.html":{}}}],["safe",{"_index":459,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sale",{"_index":963,"title":{},"body":{"index.html":{}}}],["sampl",{"_index":148,"title":{"interfaces/Sampling.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sampler",{"_index":593,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1",{"_index":591,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["save",{"_index":957,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":1140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["second",{"_index":314,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":1100,"title":{},"body":{"license.html":{}}}],["sesond",{"_index":202,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":15,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{}}}],["set.t",{"_index":679,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{},"unit-test.html":{}}}],["set.ts:21",{"_index":682,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":681,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock(defaultclock",{"_index":507,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescript",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setdescription(descript",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setgroup",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{}}}],["setgroup(group",{"_index":87,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["setinterv",{"_index":985,"title":{},"body":{"index.html":{}}}],["setmetadata",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["setmetadata(nam",{"_index":89,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["setnam",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setname(nam",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setnamefactory(namefactori",{"_index":503,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["settag",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["settag(nam",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["setvalue(valu",{"_index":339,"title":{},"body":{"interfaces/Gauge.html":{}}}],["shall",{"_index":1107,"title":{},"body":{"license.html":{}}}],["ship",{"_index":971,"title":{},"body":{"index.html":{}}}],["sign",{"_index":358,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["similar",{"_index":950,"title":{},"body":{"index.html":{}}}],["simpl",{"_index":222,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["simplegaug",{"_index":335,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{},"index.html":{}}}],["simplegauge(\"requestcount",{"_index":1004,"title":{},"body":{"index.html":{}}}],["simplesnapshot",{"_index":248,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["singl",{"_index":680,"title":{},"body":{"interfaces/MetricSet.html":{},"index.html":{}}}],["size",{"_index":229,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["sizeattributeinterfac",{"_index":380,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegaug",{"_index":382,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collect",{"_index":394,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collect",{"_index":396,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collect",{"_index":397,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collect",{"_index":398,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterfac",{"_index":379,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":453,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":599,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":230,"title":{"interfaces/Snapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["snapshot.getmean",{"_index":1046,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();met",{"_index":1022,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();metriclisten",{"_index":1055,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":1088,"title":{},"body":{"license.html":{}}}],["sort",{"_index":707,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["specif",{"_index":130,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["specifi",{"_index":239,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["standard",{"_index":486,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["start",{"_index":156,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricReporter.html":{},"classes/StopWatch.html":{}}}],["starttim",{"_index":809,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":980,"title":{},"body":{"index.html":{}}}],["state",{"_index":755,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["statement",{"_index":896,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":23,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["statist",{"_index":969,"title":{},"body":{"index.html":{}}}],["stdclock",{"_index":214,"title":{"classes/StdClock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["stop",{"_index":667,"title":{},"body":{"classes/MetricReporter.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["stopwatch",{"_index":806,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["stopwatch(this.clock",{"_index":859,"title":{},"body":{"classes/StopWatch.html":{}}}],["storag",{"_index":1066,"title":{},"body":{"index.html":{}}}],["string",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["subject",{"_index":1103,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":1098,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":1108,"title":{},"body":{"license.html":{}}}],["sum",{"_index":268,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summar",{"_index":819,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["super",{"_index":337,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["support",{"_index":943,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["support/regist",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["synchron",{"_index":846,"title":{},"body":{"classes/StopWatch.html":{}}}],["system",{"_index":964,"title":{},"body":{"index.html":{}}}],["t",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["tabl",{"_index":938,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":937,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":17,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["taggabl",{"_index":101,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{},"coverage.html":{}}}],["templat",{"_index":332,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["test",{"_index":1143,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["therefor",{"_index":843,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.a.length",{"_index":1002,"title":{},"body":{"index.html":{}}}],["this.addduration(diff(starttim",{"_index":851,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.alpha",{"_index":319,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.avg",{"_index":324,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.clock",{"_index":820,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.tim",{"_index":823,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.defaultclock",{"_index":506,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.descript",{"_index":115,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/StopWatch.html":{}}}],["this.extractor",{"_index":395,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.firemetricadded(metric.getnam",{"_index":615,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(nam",{"_index":625,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(nam",{"_index":570,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname(nam",{"_index":555,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(nam",{"_index":559,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname(nam",{"_index":541,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(nam",{"_index":546,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getmax",{"_index":775,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":769,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.5",{"_index":765,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":760,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":761,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":762,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":764,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":763,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.group",{"_index":116,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.group}.${this.nam",{"_index":121,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.histogram",{"_index":828,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getbucket",{"_index":844,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":834,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":833,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":836,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(dur",{"_index":830,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.interv",{"_index":320,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.listeners.foreach((listen",{"_index":646,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listen",{"_index":500,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listen",{"_index":496,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":502,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.maxs",{"_index":250,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.met",{"_index":827,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metadata",{"_index":109,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.delete(nam",{"_index":112,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.get(nam",{"_index":110,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.set(nam",{"_index":113,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.meter.get15minuter",{"_index":837,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuter",{"_index":839,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuter",{"_index":838,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanr",{"_index":840,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":831,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metr",{"_index":513,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricref",{"_index":466,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistries.indexof(metricregistri",{"_index":677,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.push(metricregistri",{"_index":676,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.splice(index",{"_index":678,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metrics.map((metr",{"_index":537,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":613,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.splice(index",{"_index":569,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nam",{"_index":114,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["this.namefactori",{"_index":504,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(nam",{"_index":627,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":883,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":367,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(valu",{"_index":369,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumb",{"_index":370,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostr",{"_index":371,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.register(counter.getnam",{"_index":587,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(histogram.getnam",{"_index":602,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(meter.getnam",{"_index":596,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(metricnam",{"_index":630,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(timer.getnam",{"_index":606,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":619,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listen",{"_index":465,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(nam",{"_index":576,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.setdescription(descript",{"_index":393,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(nam",{"_index":392,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.starttim",{"_index":822,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.sum",{"_index":326,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.tag",{"_index":117,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.delete(nam",{"_index":120,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.get(nam",{"_index":118,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.set(nam",{"_index":119,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tim",{"_index":821,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttim",{"_index":824,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timeunitinnanosecond",{"_index":322,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.unit",{"_index":321,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.valu",{"_index":338,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((valu",{"_index":768,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":251,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":759,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":767,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":777,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":766,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["thread",{"_index":967,"title":{},"body":{"index.html":{}}}],["through",{"_index":305,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["throw",{"_index":856,"title":{},"body":{"classes/StopWatch.html":{}}}],["tick",{"_index":274,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":190,"title":{"interfaces/Time.html":{}},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["time(f",{"_index":848,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeasync(f",{"_index":853,"title":{},"body":{"classes/StopWatch.html":{}}}],["timer",{"_index":454,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["timer(clock",{"_index":604,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.setgroup(group",{"_index":605,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.start",{"_index":1048,"title":{},"body":{"index.html":{}}}],["timer.stop",{"_index":1049,"title":{},"body":{"index.html":{}}}],["timeunit",{"_index":276,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{}}}],["timeunit(1",{"_index":885,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":886,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":887,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":888,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":890,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":889,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":892,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanosecond",{"_index":269,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["tonumb",{"_index":349,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["tort",{"_index":1128,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["total",{"_index":433,"title":{},"body":{"interfaces/Metered.html":{}}}],["track",{"_index":652,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["tri",{"_index":849,"title":{},"body":{"classes/StopWatch.html":{}}}],["trigger",{"_index":318,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["truth",{"_index":213,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two",{"_index":198,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.millisecond",{"_index":211,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanosecond",{"_index":210,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalu",{"_index":209,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1137,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":385,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["typescript",{"_index":954,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":607,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["uniqu",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["unit",{"_index":270,"title":{"unit-test.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"unit-test.html":{}}}],["unit.convertto(interv",{"_index":323,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":884,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.t",{"_index":869,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":875,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":882,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":877,"title":{},"body":{"classes/TimeUnit.html":{}}}],["until",{"_index":245,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updat",{"_index":231,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["update(valu",{"_index":241,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["upper",{"_index":778,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["us",{"_index":136,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Groupable.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":959,"title":{},"body":{"index.html":{}}}],["valu",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["valueextractor",{"_index":381,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":758,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.slice(0",{"_index":757,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["variabl",{"_index":815,"title":{"miscellaneous/variables.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["versa",{"_index":309,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":509,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["via",{"_index":1059,"title":{},"body":{"index.html":{}}}],["vice",{"_index":308,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["void",{"_index":84,"title":{},"body":{"classes/BaseMetric.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["wait",{"_index":966,"title":{},"body":{"index.html":{}}}],["warn",{"_index":405,"title":{},"body":{"interfaces/Logger.html":{}}}],["warranti",{"_index":1110,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1050,"title":{},"body":{"index.html":{}}}],["weight",{"_index":279,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["whether",{"_index":1125,"title":{},"body":{"license.html":{}}}],["who",{"_index":215,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":139,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["without",{"_index":1090,"title":{},"body":{"license.html":{}}}],["work",{"_index":1052,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":345,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["zero",{"_index":218,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set tags\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadata\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:71\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:111\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:95\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:79\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metadata:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:119\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:103\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:87\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:147\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:155\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:125\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:121\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:139\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:167\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:163\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:129\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:175\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:151\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:159\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:135\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:143\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:171\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:179\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): void {\n        this.metadata.set(name, value);\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketCounting.html":{"url":"interfaces/BucketCounting.html","title":"interface - BucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining counting events based on Buckets.\nThe meaning of the countings is implementation-specific.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBuckets\n                                \n                                \n                                    getCounts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBuckets\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBuckets()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the current Buckets object used to do the counting.\n\n\n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCounts\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCounts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:130\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from the boundary to the count of events\nwithin the corresponding boundary.\nThe meaning of the count is implementation specific.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Buckets.html":{"url":"classes/Buckets.html","title":"class - Buckets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Buckets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Contains boundaries used to mark one end of a value range.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                boundaries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                exponential\n                            \n                            \n                                    Static\n                                linear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/counting.ts:88\n                            \n                        \n\n                \n                    \n                            Creates an instance of Buckets.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            boundaries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        boundaries:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/counting.ts:97\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            exponential\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        exponential(initial: number, factor: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:67\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with exponentially distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        factor\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            linear\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        linear(start: number, bucketWidth: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:43\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with linear-distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        bucketWidth\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                        The capacity of this reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:57\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:83\n                            \n                        \n\n\n                \n                    \n                            Gets the actual number of value, but at max the specified maximum.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:110\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot instance.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:95\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MovingAverage\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                    TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:71\n                            \n                        \n\n                \n                    \n                        Alpha component (weight) of the moving average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            avg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        avg:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : -1.0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:95\n                            \n                        \n\n                \n                    \n                        The current average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:79\n                            \n                        \n\n                \n                    \n                        The sampling interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:87\n                            \n                        \n\n                \n                    \n                        The sum of all values passed to the update function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeUnitInNanoseconds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timeUnitInNanoseconds:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:103\n                            \n                        \n\n                \n                    \n                        Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unit:     TimeUnit\n\n                    \n                \n                    \n                        \n                            Type :     TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                        The time unit of the sampling rate.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:134\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:155\n                            \n                        \n\n\n                \n                    \n                            Gets the average in the specified time unit.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:144\n                            \n                        \n\n\n                \n                    \n                            Gets the time unit.\n\n\n                            \n                            \n                            \n                                Returns :     TimeUnit\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        tick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:182\n                            \n                        \n\n\n                \n                    \n                            Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:168\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the current sum.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets the current value of the gauge.\n\n\n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @template T\n */\nexport interface Gauge extends Metric {\n\n    /**\n     * Gets the current value of the gauge.\n     *\n     * @returns {T}\n     * @memberof Gauge\n     */\n    getValue(): T;\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n\n    /**\n     * The value - initially set to 0.\n     *\n     * @private\n     * @type {number}\n     * @memberof SimpleGauge\n     */\n    private value: number = 0;\n\n    /**\n     * Creates an instance of SimpleGauge with an optional name.\n     *\n     * @param {string} [name] optional metric name.\n     * @param {string} [description] optional metric description.\n     * @memberof SimpleGauge\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @returns {number}\n     * @memberof SimpleGauge\n     */\n    public getValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Sets the current value.\n     *\n     * @param {number} value\n     * @memberof SimpleGauge\n     */\n    public setValue(value: number): void {\n        this.value = value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/groupable.ts\n        \n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getGroup\n                                \n                                \n                                    setGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the group name.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Sets the group name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new group name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n    /**\n     * Gets the group name.\n     *\n     * @returns {string}\n     * @memberof Groupable\n     */\n    getGroup(): string;\n\n    /**\n     * Sets the group name.\n     *\n     * @param {string} group the new group name\n     * @memberof Groupable\n     */\n    setGroup(group: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/int64.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            num\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        num:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                        int64_t value instance.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:36\n                            \n                        \n\n\n                \n                    \n                            Adds the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toNumber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toNumber()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:46\n                            \n                        \n\n\n                \n                    \n                            Gets the 64bit value as javascript 32bit signed integer.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:56\n                            \n                        \n\n\n                \n                    \n                            Converts the 64bit integer to it's string representation.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n    /**\n     * int64_t value instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof Int64Wrapper\n     */\n    private num: any;\n\n    /**\n     * Creates an instance of Int64Wrapper.\n     *\n     * @param {number} [initial=0]\n     * @memberof Int64Wrapper\n     */\n    public constructor(initial: number = 0) {\n        this.num = new Int64(initial);\n    }\n\n    /**\n     * Adds the specified value.\n     *\n     * @param {number} value\n     * @memberof Int64Wrapper\n     */\n    public add(value: number): void {\n        this.num = this.num.add(value);\n    }\n\n    /**\n     * Gets the 64bit value as javascript 32bit signed integer.\n     *\n     * @returns {number}\n     * @memberof Int64Wrapper\n     */\n    public toNumber(): number {\n        return this.num.toNumber();\n    }\n\n    /**\n     * Converts the 64bit integer to it's string representation.\n     *\n     * @returns {string}\n     * @memberof Int64Wrapper\n     */\n    public toString(): string {\n        return this.num.toString();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                    \n                                \n                                \n                                    \n                                        length:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            length\n                            \n                            \n                        \n                    \n                \n                \n                    \nlength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/logger.ts\n        \n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        error\n                                \n                                \n                                        info\n                                \n                                \n                                        warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                    \n                                \n                                \n                                    \n                                        warn:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n    error: (...args: any[]) => any;\n    warn: (...args: any[]) => any;\n    info: (...args: any[]) => any;\n    debug: (...args: any[]) => any;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataContainer.html":{"url":"interfaces/MetadataContainer.html","title":"interface - MetadataContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetadataContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metadata-container.ts\n        \n\n            \n                Description\n            \n            \n                Interface for all classes that can associate metadata with instances.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetadata\n                                \n                                \n                                    getMetadataMap\n                                \n                                \n                                    removeMetadata\n                                \n                                \n                                    setMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:29\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Gets the metadata associated with the specified name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets all the metadata associated with an instance.\nFuture changes to the metadata of this instance may\nnot be reflected in the map returned here.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:39\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Removes the metadata associated with the specified name and returns it finally.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:49\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Sets the metadata object to the name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The key of the metadata\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                any value\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n    /**\n     * Gets all the metadata associated with an instance.\n     * Future changes to the metadata of this instance may\n     * not be reflected in the map returned here.\n     *\n     * @returns {Map}\n     * @memberof MetadataContainer\n     */\n    getMetadataMap(): Map;\n\n    /**\n     * Gets the metadata associated with the specified name.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    getMetadata(name: string): T;\n\n    /**\n     * Removes the metadata associated with the specified name and returns it finally.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    removeMetadata(name: string): T;\n\n    /**\n     * Sets the metadata object to the name.\n     *\n     * @template T\n     * @param {string} name The key of the metadata\n     * @param {T} value any value\n     * @memberof MetadataContainer\n     */\n    setMetadata(name: string, value: T): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metered.ts\n        \n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get15MinuteRate\n                                \n                                \n                                    get1MinuteRate\n                                \n                                \n                                    get5MinuteRate\n                                \n                                \n                                    getCount\n                                \n                                \n                                    getMeanRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get15MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget15MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:28\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 15 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get1MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget1MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:44\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last minute.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get5MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget5MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 5 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the total number of events.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMeanRate\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMeanRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:52\n                            \n                        \n\n\n                \n                    \n                            Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n    /**\n     * Gets the total number of events.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getCount(): number;\n\n    /**\n     * Gets the rate of the last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get15MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get5MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last minute.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get1MinuteRate(): number;\n\n    /**\n     * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getMeanRate(): number;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Representation for a metrics.\n\n            \n\n            \n                Extends\n            \n            \n                    Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getDescription\n                                \n                                \n                                    getName\n                                \n                                \n                                    setDescription\n                                \n                                \n                                    setName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:39\n                            \n                        \n\n\n                \n                    \n                            Gets the description of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:23\n                            \n                        \n\n\n                \n                    \n                            Gets the name of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:47\n                            \n                        \n\n\n                \n                    \n                            Sets the description of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:31\n                            \n                        \n\n\n                \n                    \n                            Sets the name of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): void {\n        this.metadata.set(name, value);\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            metricRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRef:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:61\n                            \n                        \n\n                \n                    \n                        The metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:68\n                            \n                        \n\n                \n                    \n                        The name the metric is registered with.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry-listener.ts\n        \n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metricAdded\n                                \n                                \n                                    metricRemoved\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricAdded\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricAdded(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:20\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was added to a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the metric\n\n                                                        \n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                metric object\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricRemoved\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricRemoved(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:29\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was removed from a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n\n    /**\n     * Called when a metric was added to a {@link MetricRegistry}.\n     *\n     * @param {string} name name of the metric\n     * @param {Metric} metric metric object\n     * @memberof MetricRegistryListener\n     */\n    metricAdded(name: string, metric: Metric): void;\n\n    /**\n     * Called when a metric was removed from a {@link MetricRegistry}.\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistryListener\n     */\n    metricRemoved(name: string, metric: Metric): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:24\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                    MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        remove()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:40\n                            \n                        \n\n\n                \n                    \n                            Removes the managed listener from the metric registry.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricReporter.html":{"url":"classes/MetricReporter.html","title":"class - MetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Base-class for metric-reporter implementations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                metricRegistries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addMetricRegistry\n                            \n                            \n                                    Public\n                                removeMetricRegistry\n                            \n                            \n                                    Public\n                                    Abstract\n                                start\n                            \n                            \n                                    Public\n                                    Abstract\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metricRegistries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRegistries:     MetricRegistry[]\n\n                    \n                \n                    \n                        \n                            Type :     MetricRegistry[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:21\n                            \n                        \n\n                \n                    \n                        MetricRegistry instances.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            addMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        addMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:45\n                            \n                        \n\n\n                \n                    \n                            Adds a new MetricRegistry to be reported.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:55\n                            \n                        \n\n\n                \n                    \n                            Removes the given MetricRegistry if it was previously added.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:29\n                            \n                        \n\n\n                \n                    \n                            Implementations start reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:37\n                            \n                        \n\n\n                \n                    \n                            Implementations stop reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MetricRegistry } from \"./metric-registry\";\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected metricRegistries: MetricRegistry[] = [];\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract start(): void;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract stop(): void;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): void {\n        this.metricRegistries.push(metricRegistry);\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): void {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-set.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetricList\n                                \n                                \n                                    getMetrics\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets a list of all Metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from names to metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n    /**\n     * Gets a mapping from names to metric instances.\n     *\n     * @deprecated since version 1.3 - use {@link getMetricList} instead\n     * @returns {Map}\n     * @memberof MetricSet\n     */\n    getMetrics(): Map;\n\n    /**\n     * Gets a list of all {@link Metric} instances.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricSet\n     */\n    getMetricList(): Metric[];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAlpha\n                                \n                                \n                                    getAverage\n                                \n                                \n                                    tick\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \ntick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:45\n                            \n                        \n\n\n                \n                    \n                            Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:37\n                            \n                        \n\n\n                \n                    \n                            Adds the given value to the logic of the implementation.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    snapshot\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the capacity of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nsnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:35\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:27\n                            \n                        \n\n\n                \n                    \n                            Adds a value to the reservoir.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/sampling.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSnapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/sampling.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of values.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Snapshot } from \"./snapshot\";\n\n/**\n * Interface fo all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n    /**\n     * Gets the snapshot of values.\n     *\n     * @returns {Snapshot}\n     * @memberof Sampling\n     */\n    getSnapshot(): Snapshot;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                        Sorted collection of values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:153\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:163\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:183\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:193\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:213\n                            \n                        \n\n\n                \n                    \n                            Gets the last value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:253\n                            \n                        \n\n\n                \n                    \n                            Gets average value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:203\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:223\n                            \n                        \n\n\n                \n                    \n                            Gets the first value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:269\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:303\n                            \n                        \n\n\n                \n                    \n                            Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:233\n                            \n                        \n\n\n                \n                    \n                            Gets the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:243\n                            \n                        \n\n\n                \n                    \n                            Gets the length of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            index\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        index:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                        The current index in the value array.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:141\n                            \n                        \n\n                \n                    \n                        The capacity of the reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:133\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:167\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values, but at may the capacity of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:193\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot using the values array.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:179\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get75thPercentile\n                                \n                                \n                                    get95thPercentile\n                                \n                                \n                                    get98thPercentile\n                                \n                                \n                                    get999thPercentile\n                                \n                                \n                                    get99thPercentile\n                                \n                                \n                                    getMax\n                                \n                                \n                                    getMean\n                                \n                                \n                                    getMedian\n                                \n                                \n                                    getMin\n                                \n                                \n                                    getStdDev\n                                \n                                \n                                    getValue\n                                \n                                \n                                    getValues\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 75% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:25\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 95% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:33\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 98% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:41\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99.9% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:65\n                            \n                        \n\n\n                \n                    \n                            Gets the maximum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets the average of all values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:57\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 50% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:73\n                            \n                        \n\n\n                \n                    \n                            Gets the minimum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:105\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the value of boundary specified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:81\n                            \n                        \n\n\n                \n                    \n                            Gets all values.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:89\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                    Clock\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:68\n                            \n                        \n\n\n                \n                    \n                            Returns a Time object whos nanoseconds component is always zero.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Clock\n\n                                \n                            \n                        \n                            \n                                    Defined in Clock:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/timer.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                    Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clock\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clock:     Clock\n\n                    \n                \n                    \n                        \n                            Type :     Clock\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:31\n                            \n                        \n\n                \n                    \n                        Used to determine a duration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            startTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startTime:     Time\n\n                    \n                \n                    \n                        \n                            Type :     Time\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                        Gets set when the start function is invoked using the clock.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:39\n                            \n                        \n\n                \n                    \n                        The timer the duration is reported to.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:66\n                            \n                        \n\n\n                \n                    \n                            Sets the startTime variable.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:76\n                            \n                        \n\n\n                \n                    \n                            Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, diff, Time } from \"./clock\";\nimport { BucketCounting, Buckets } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Int64Wrapper } from \"./int64\";\nimport { Meter } from \"./meter\";\nimport { Metered } from \"./metered\";\nimport { BaseMetric } from \"./metric\";\nimport { Reservoir } from \"./reservoir\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof StopWatch\n     */\n    private clock: Clock;\n    /**\n     * The timer the duration is reported to.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof StopWatch\n     */\n    private timer: Timer;\n    /**\n     * Gets set when the start function is invoked using the clock.\n     *\n     * @private\n     * @type {Time}\n     * @memberof StopWatch\n     */\n    private startTime: Time;\n\n    /**\n     * Creates an instance of StopWatch.\n     *\n     * @param {Clock} clock\n     * @param {Timer} timer\n     * @memberof StopWatch\n     */\n    public constructor(clock: Clock, timer: Timer) {\n        this.clock = clock;\n        this.timer = timer;\n    }\n\n    /**\n     * Sets the startTime variable.\n     *\n     * @memberof StopWatch\n     */\n    public start(): void {\n        this.startTime = this.clock.time();\n    }\n\n    /**\n     * Adds the duration between the last invocation of the start function\n     * and this invocation to the timer in nanoseconds.\n     *\n     * @memberof StopWatch\n     */\n    public stop(): void {\n        this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND);\n    }\n\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements BucketCounting, Metered, Sampling, Summarizing {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof Timer\n     */\n    private clock: Clock;\n    /**\n     * Metric to measure the event rate.\n     *\n     * @private\n     * @type {Meter}\n     * @memberof Timer\n     */\n    private meter: Meter;\n    /**\n     * Metric to measure the duration of events.\n     *\n     * @private\n     * @type {Histogram}\n     * @memberof Timer\n     */\n    private histogram: Histogram;\n\n    /**\n     * Creates an instance of Timer.\n     *\n     * @param {Clock} clock\n     * @param {Reservoir} reservoir\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {string} [buckets=new Buckets()]\n     * @memberof Timer\n     */\n    public constructor(\n        clock: Clock,\n        reservoir: Reservoir,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n\n        super();\n        this.clock = clock;\n        this.name = name;\n        this.description = description;\n        this.meter = new Meter(clock, 1, name);\n        this.histogram = new Histogram(reservoir, name, description, buckets);\n    }\n\n    /**\n     * Adds a duration manually.\n     *\n     * @param {number} duration\n     * @param {TimeUnit} unit\n     * @memberof Timer\n     */\n    public addDuration(duration: number, unit: TimeUnit): void {\n        if (duration >= 0) {\n            this.histogram.update(unit.convertTo(duration, NANOSECOND));\n            this.meter.mark(1);\n        }\n    }\n\n    /**\n     * Gets a snapshot from the embedded {@link Histogram}.\n     *\n     * @returns {Snapshot}\n     * @memberof Timer\n     */\n    public getSnapshot(): Snapshot {\n        return this.histogram.getSnapshot();\n    }\n\n    /**\n     * Gets the count from the embedded {@link Histogram}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getCount(): number {\n        return this.histogram.getCount();\n    }\n\n    /**\n     * Gets the sum from the embedded {@link Histogram}.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Timer\n     */\n    public getSum(): Int64Wrapper {\n        return this.histogram.getSum();\n    }\n\n    /**\n     * Gets the average rate per second of last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get15MinuteRate(): number {\n        return this.meter.get15MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get5MinuteRate(): number {\n        return this.meter.get5MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last minute.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get1MinuteRate(): number {\n        return this.meter.get1MinuteRate();\n    }\n\n    /**\n     * Gets the mean rate from the embedded {@link Meter}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getMeanRate(): number {\n        return this.meter.getMeanRate();\n    }\n\n    /**\n     * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.\n     *\n     * @returns {Buckets}\n     * @memberof Timer\n     */\n    public getBuckets(): Buckets {\n        return this.histogram.getBuckets();\n    }\n\n    /**\n     * Gets the bucket counts from the internal {@link Histogram}.\n     *\n     * @returns {Map}\n     * @memberof Timer\n     */\n    public getCounts(): Map {\n        return this.histogram.getCounts();\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * synchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public time(f: () => void): void {\n        const startTime: Time = this.clock.time();\n        try {\n            f();\n        } finally {\n            this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n        }\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * asynchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public timeAsync(f: () => Promise): Promise {\n        const startTime: Time = this.clock.time();\n        return f()\n            .then(() => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n            })\n            .catch((err) => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n                throw err;\n            });\n    }\n\n    /**\n     * Builds a new StopWatch.\n     *\n     * @returns {StopWatch}\n     * @memberof Timer\n     */\n    public newStopWatch(): StopWatch {\n        return new StopWatch(this.clock, this);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSum()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/summarizing.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n    /**\n     * Gets the sum of values.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Summarizing\n     */\n    getSum(): Int64Wrapper;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/taggable.ts\n        \n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getTag\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeTag\n                                \n                                \n                                    setTag\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Gets the specified tag or {@code null}.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets all tags.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:43\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:35\n                            \n                        \n\n\n                \n                    \n                            Sets the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n    /**\n     * Gets all tags.\n     *\n     * @returns {Map}\n     * @memberof Taggable\n     */\n    getTags(): Map;\n\n    /**\n     * Gets the specified tag or {@code null}.\n     *\n     * @param {string} name\n     * @returns {string}\n     * @memberof Taggable\n     */\n    getTag(name: string): string;\n\n    /**\n     * Sets the specified tag.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof Taggable\n     */\n    setTag(name: string, value: string): void;\n\n    /**\n     * Removes the specified tag.\n     *\n     * @param {string} name\n     * @memberof Taggable\n     */\n    removeTag(name: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        milliseconds\n                                \n                                \n                                        nanoseconds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                    \n                                \n                                \n                                    \n                                        milliseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                    \n                                \n                                \n                                    \n                                        nanoseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/time-unit.ts\n        \n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            nanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nanosecondsPerUnit:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                        The nanoseconds for one unit of this time unit.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convertTo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convertTo(value: number, unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:53\n                            \n                        \n\n\n                \n                    \n                            Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getNanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNanosecondsPerUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the nanoseconds in one unit of this time unit.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n    /**\n     * The nanoseconds for one unit of this time unit.\n     *\n     * @private\n     * @type {number}\n     * @memberof TimeUnit\n     */\n    private nanosecondsPerUnit: number;\n\n    /**\n     * Creates an instance of TimeUnit.\n     *\n     * @param {number} nanosecondsPerUnit\n     * @memberof TimeUnit\n     */\n    public constructor(nanosecondsPerUnit: number) {\n        this.nanosecondsPerUnit = nanosecondsPerUnit;\n    }\n\n    /**\n     * Gets the nanoseconds in one unit of this time unit.\n     *\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public getNanosecondsPerUnit(): number {\n        return this.nanosecondsPerUnit;\n    }\n\n    /**\n     * Converts the given value to the time unit specified.\n     *\n     * E.g.:\n     *\n     * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n     * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n     *\n     * @param {number} value\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public convertTo(value: number, unit: TimeUnit): number {\n        return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n    }\n\n}\n\nexport const NANOSECOND = new TimeUnit(1);\nexport const MICROSECOND = new TimeUnit(1000);\nexport const MILLISECOND = new TimeUnit(1000000);\nexport const SECOND = new TimeUnit(1000000000);\nexport const MINUTE = new TimeUnit(60000000000);\nexport const HOUR = new TimeUnit(3600000000000);\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                Clock\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                StdClock\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                interface\n            \n            \n                Time\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                function\n            \n            \n                diff\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                Counter\n            \n            \n                50 %\n                (15/30)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                MonotoneCounter\n            \n            \n                46 %\n                (13/28)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                class\n            \n            \n                Buckets\n            \n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                BucketCounting\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                Counting\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                class\n            \n            \n                SimpleGauge\n            \n            \n                44 %\n                (12/27)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                interface\n            \n            \n                Gauge\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/groupable.ts\n            \n            \n                interface\n            \n            \n                Groupable\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/histogram.ts\n            \n            \n                class\n            \n            \n                Histogram\n            \n            \n                57 %\n                (20/35)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                class\n            \n            \n                Int64Wrapper\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                variable\n            \n            \n                Int64\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/logger-reporter.ts\n            \n            \n                class\n            \n            \n                LoggerReporter\n            \n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                lib/metrics/logger.ts\n            \n            \n                interface\n            \n            \n                Logger\n            \n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                lib/metrics/metadata-container.ts\n            \n            \n                interface\n            \n            \n                MetadataContainer\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/meter.ts\n            \n            \n                class\n            \n            \n                Meter\n            \n            \n                66 %\n                (30/45)\n            \n        \n        \n            \n                \n                lib/metrics/metered.ts\n            \n            \n                interface\n            \n            \n                Metered\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry-listener.ts\n            \n            \n                interface\n            \n            \n                MetricRegistryListener\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistration\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistry\n            \n            \n                62 %\n                (54/86)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistryListenerRegistration\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-reporter.ts\n            \n            \n                class\n            \n            \n                MetricReporter\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-set.ts\n            \n            \n                interface\n            \n            \n                MetricSet\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                class\n            \n            \n                BaseMetric\n            \n            \n                34 %\n                (8/23)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                interface\n            \n            \n                Metric\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                class\n            \n            \n                ExponentiallyWeightedMovingAverage\n            \n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                interface\n            \n            \n                MovingAverage\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                DefaultReservoir\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                SlidingWindowReservoir\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                interface\n            \n            \n                Reservoir\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/sampling.ts\n            \n            \n                interface\n            \n            \n                Sampling\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                class\n            \n            \n                SizeGauge\n            \n            \n                50 %\n                (15/30)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                class\n            \n            \n                SimpleSnapshot\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                interface\n            \n            \n                Snapshot\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/metrics/summarizing.ts\n            \n            \n                interface\n            \n            \n                Summarizing\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/taggable.ts\n            \n            \n                interface\n            \n            \n                Taggable\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                class\n            \n            \n                TimeUnit\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                DAY\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                HOUR\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MICROSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MILLISECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MINUTE\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                NANOSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                SECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                StopWatch\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                Timer\n            \n            \n                62 %\n                (25/40)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            node-cint64 : 2.0.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (lib/.../clock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/clock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            diff\n                            \n                            \n                        \n                    \n                \n                \n                    \ndiff(one: undefined, two: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time time is elder than the sesond point in time.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        one\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                                \n                                                        two\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called, number of bookings in a sales system\")\nMonotoneCounter - a monotonically increasing integer value (e.g. \"error count\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nCarbon / Graphite\nElasticsearch\nInflux\nPrometheus / Pushgateway\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter(global.console);\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();MonotoneCounter\nimport { MonotoneCounter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst errorCount: MonotoneCounter = registry.newMonotoneCounter(\"errorCount\");\n\n// +1\nerrorCount.increment(1);\n\n// causes error\nerrorCount.increment(-1);\n\n// =1\nerrorCount.getCount();\n\nerrorCount.reset();Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst entityCount: Histogram = registry.newHistogram(\"requestCount\");\n\nentityCount.update(12345);\n\n// 12345\nentityCount.getValue();\n\nconst snapshot: Snapshot = entityCount.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    21 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NameFactory   (lib/.../metric-registry.ts)\n                        \n                        \n                            Scheduler   (lib/.../logger-reporter.ts)\n                        \n                        \n                            ValueExtractor   (lib/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/metric-registry.ts\n    \n        \n            \n                \n                    \n                        \n                        NameFactory\n                    \n                \n                \n                    \n                        NameFactory:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/logger-reporter.ts\n    \n        \n            \n                \n                    \n                        \n                        Scheduler\n                    \n                \n                \n                    \n                        Scheduler:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/size-gauge.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueExtractor\n                    \n                \n                \n                    \n                        ValueExtractor:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                    /mnt/c/git/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counting.ts\n            \n            \n                90 %\n                (26/29)\n            \n            \n                67 %\n                (6/9)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                89 %\n                (25/28)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/groupable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/int64.ts\n            \n            \n                83 %\n                (5/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger-reporter.ts\n            \n            \n                96 %\n                (95/99)\n            \n            \n                49 %\n                (19/39)\n            \n            \n                88 %\n                (21/24)\n            \n            \n                96 %\n                (91/95)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metadata-container.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                100 %\n                (47/47)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (47/47)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metered.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                94 %\n                (166/176)\n            \n            \n                86 %\n                (83/97)\n            \n            \n                93 %\n                (79/85)\n            \n            \n                94 %\n                (162/172)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-reporter.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-set.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric.ts\n            \n            \n                88 %\n                (22/25)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                94 %\n                (15/16)\n            \n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/moving-average.ts\n            \n            \n                100 %\n                (27/27)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reservoir.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/sampling.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                84 %\n                (21/25)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/summarizing.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/taggable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/time-unit.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                95 %\n                (39/41)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                95 %\n                (18/19)\n            \n            \n                95 %\n                (39/41)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (lib/.../time-unit.ts)\n                        \n                        \n                            HOUR   (lib/.../time-unit.ts)\n                        \n                        \n                            Int64   (lib/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (lib/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            SECOND   (lib/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/time-unit.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DAY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DAY:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(86400000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HOUR\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        HOUR:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(3600000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MICROSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MICROSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MILLISECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MILLISECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MINUTE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MINUTE:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(60000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NANOSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NANOSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        SECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000000)\n                        \n                    \n\n\n            \n        \n\n    lib/metrics/int64.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Int64\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Int64:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"node-cint64\").Int64\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
