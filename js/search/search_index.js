var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.068,1,1.311]],["body/classes/BaseMetric.html",[0,0.114,1,2.347,2,0.188,3,0.249,4,0.129,5,1.993,6,0.419,7,2.773,8,1.832,9,1.297,10,0.832,11,3.342,12,3.342,13,0.857,14,0.023,15,2.347,16,0.935,17,4.66,18,3.699,19,0.768,20,0.111,21,1.208,22,1.132,23,1.891,24,2.135,25,3.48,26,1.03,27,3.195,28,5.258,29,4.1,30,0.374,31,4.718,32,3.912,33,3.342,34,3.912,35,4.718,36,4.381,37,3.342,38,3.342,39,3.342,40,3.342,41,3.342,42,3.342,43,3.342,44,3.912,45,0.807,46,0.736,47,1.595,48,1.01,49,0.808,50,0.729,51,2.638,52,1.057,53,3.342,54,4.415,55,2.962,56,2.033,57,2.638,58,2.638,59,3.342,60,2.638,61,0.494,62,1.2,63,2.638,64,2.677,65,2.638,66,2.638,67,2.638,68,0.508,69,2.638,70,2.962,71,2.638,72,1.129,73,3.8,74,1.15,75,2.638,76,2.638,77,2.962,78,2.638,79,2.638,80,2.962,81,2.638,82,2.962,83,2.638,84,1.649,85,3.988,86,2.638,87,2.962,88,2.638,89,2.962,90,2.638,91,3.988,92,2.638,93,2.962,94,2.638,95,2.638,96,0.369,97,0.208,98,3.237,99,2.45,100,1.522,101,3.237,102,1.993,103,0.369,104,0.111,105,1.084,106,0.249,107,0.514,108,0.441,109,2.249,110,3.342,111,0.611,112,2.249,113,2.249,114,2.505,115,2.677,116,3.988,117,2.249,118,2.249,119,2.249,120,2.249,121,2.249,122,0.012,123,0.012]],["title/interfaces/BucketCounting.html",[104,0.101,124,1.789]],["body/interfaces/BucketCounting.html",[0,0.102,2,0.296,3,0.342,4,0.204,6,0.265,8,2.515,9,1.243,10,0.949,14,0.023,20,0.175,23,1.755,24,2.219,26,0.584,30,0.513,45,0.921,48,0.897,49,0.857,50,0.655,61,0.477,62,1.383,68,0.477,96,0.383,97,0.329,100,2.399,103,0.477,104,0.192,105,1.514,106,0.416,107,0.499,108,0.71,111,1.247,122,0.016,123,0.016,124,3.264,125,2.84,126,2.988,127,2.949,128,3.156,129,2.767,130,4.767,131,3.944,132,3.264,133,4.158,134,1.946,135,1.838,136,1.838,137,4.158,138,3.586,139,3.675,140,4.066,141,1.081,142,3.141,143,3.141,144,1.737,145,2.227,146,2.219,147,1.144,148,1.281,149,3.141,150,1.714,151,3.141,152,2.599,153,0.909,154,3.141,155,2.599,156,2.227,157,4.066,158,3.141,159,3.141,160,2.84,161,3.141,162,3.141,163,3.141,164,2.399]],["title/classes/Buckets.html",[0,0.068,128,1.57]],["body/classes/Buckets.html",[0,0.108,2,0.271,3,0.323,4,0.187,6,0.242,8,1.781,9,1.193,10,0.764,14,0.023,16,0.748,19,1.109,20,0.16,21,1.566,23,2.131,24,2.095,26,0.803,27,3.471,30,0.484,45,0.965,46,0.633,47,1.762,48,1.032,49,0.785,50,0.659,52,0.653,61,0.434,62,1.472,68,0.465,72,0.98,74,1.043,96,0.362,97,0.301,100,2.932,103,0.465,104,0.179,105,1.413,106,0.364,107,0.482,108,0.686,111,1.178,122,0.015,123,0.015,124,3.046,125,2.603,126,2.947,127,2.375,128,3.158,129,2.228,130,3.839,131,2.382,132,2.538,134,1.657,135,1.879,136,1.762,138,3.675,139,2.603,140,2.879,141,0.99,142,2.879,143,2.879,144,1.664,145,2.041,146,2.095,147,1.048,148,1.174,149,3.839,150,2.095,151,3.839,152,3.176,153,1.333,154,4.608,155,3.574,156,2.722,157,4.608,158,2.879,159,3.839,160,4.339,161,4.319,162,2.879,163,2.879,164,2.198,165,4.319,166,1.109,167,3.811,168,3.811,169,3.811,170,3.811,171,3.811,172,3.811,173,3.811,174,2.879,175,2.382,176,1.109,177,3.811,178,1.571,179,2.603,180,3.811,181,3.811,182,3.839,183,3.811,184,2.879,185,3.811]],["title/classes/Clock.html",[0,0.068,186,1.789]],["body/classes/Clock.html",[0,0.125,2,0.304,3,0.384,4,0.209,6,0.271,7,3.718,10,0.908,13,0.932,14,0.023,19,1.242,20,0.179,26,0.895,30,0.521,45,0.882,47,1.314,49,1.127,50,0.443,61,0.304,68,0.494,72,0.938,96,0.304,97,0.337,103,0.494,104,0.154,105,1.268,106,0.384,107,0.432,108,0.615,111,1.399,122,0.017,123,0.017,134,1.784,135,1.314,136,1.861,141,1.108,148,1.685,150,2.49,186,3.554,187,2.666,188,3.156,189,4.133,190,3.063,191,4.265,192,4.117,193,3.736,194,3.419,195,2.557,196,2.716,197,2.913,198,4.351,199,2.666,200,2.13,201,2.913,202,2.913,203,2.666,204,2.913,205,4.133,206,3.222,207,3.222,208,3.736,209,4.133,210,3.222,211,3.222,212,4.133,213,3.222,214,3.235,215,3.222,216,2.666,217,2.46,218,3.222]],["title/interfaces/Counting.html",[104,0.101,126,1.476]],["body/interfaces/Counting.html",[0,0.104,2,0.303,3,0.347,4,0.208,6,0.271,8,1.987,9,1.25,10,0.821,14,0.023,20,0.178,23,1.78,24,2.623,26,0.597,30,0.52,45,0.936,48,0.957,49,0.876,50,0.566,61,0.453,62,1.397,68,0.469,96,0.389,97,0.336,100,2.453,103,0.48,104,0.19,105,1.525,106,0.405,107,0.503,108,0.716,111,1.265,122,0.016,123,0.016,124,3.178,125,2.904,126,2.963,127,2.551,128,3.119,129,2.394,130,4.124,131,2.657,132,3.287,134,1.967,135,1.682,136,1.682,138,3.408,139,2.904,140,3.212,141,1.419,142,4.124,143,4.124,144,1.755,145,2.924,146,2.623,147,1.502,148,1.682,149,3.212,150,1.753,151,3.212,152,2.657,153,0.929,154,3.212,155,2.657,156,2.277,157,4.124,158,3.212,159,3.212,160,2.904,161,3.212,162,3.212,163,3.212,164,2.453,219,4.251]],["title/classes/DefaultReservoir.html",[0,0.068,220,2.238]],["body/classes/DefaultReservoir.html",[0,0.108,2,0.269,3,0.321,4,0.185,6,0.24,10,0.952,14,0.023,16,0.66,19,1.098,20,0.158,21,1.555,22,1.478,26,0.972,30,0.481,45,0.968,46,0.676,47,1.162,48,1.109,50,0.676,52,0.975,61,0.269,62,1.407,68,0.474,72,0.865,74,0.921,84,1.396,96,0.359,97,0.298,103,0.433,104,0.142,106,0.362,107,0.534,108,0.64,122,0.015,123,0.015,141,0.98,153,1.328,166,1.098,220,4.324,221,2.575,222,3.446,223,3.336,224,3.233,225,4.922,226,4.588,227,4.588,228,5.027,229,2.458,230,2.708,231,2.52,232,3.812,233,5.046,234,3.884,235,3.771,236,3.771,237,2.08,238,2.703,239,1.671,240,3.771,241,3.046,242,3.771,243,2.345,244,1.646,245,3.812,246,3.812,247,3.154,248,2.02,249,1.38,250,2.849,251,3.154]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.068,252,2.446]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.085,2,0.175,3,0.236,4,0.12,6,0.156,10,0.751,13,0.811,14,0.023,16,0.586,19,0.714,20,0.103,21,1.143,22,1.532,23,2.226,26,0.981,30,0.353,45,0.965,46,0.719,47,1.859,48,1.064,49,0.922,50,0.708,52,0.636,61,0.175,68,0.472,72,0.767,74,0.817,84,1.385,96,0.264,97,0.194,103,0.355,104,0.105,106,0.384,107,0.532,108,0.659,111,0.86,122,0.011,123,0.011,127,1.146,134,1.968,141,0.964,147,0.674,148,1.738,153,0.811,165,2.803,166,1.303,175,1.532,176,1.987,178,2.596,182,1.852,190,2.596,194,1.532,195,1.146,196,2.058,216,2.319,231,3.013,237,1.01,239,1.475,241,2.397,243,1.845,252,4.632,253,5.185,254,1.674,255,4.255,256,4.255,257,4.331,258,5.851,259,4.218,260,4.255,261,4.255,262,4.255,263,4.255,264,4.255,265,4.255,266,4.995,267,5.593,268,3.276,269,4.255,270,4.029,271,4.571,272,3.163,273,4.255,274,4.809,275,3.163,276,3.937,277,3.709,278,2.451,279,4.255,280,5.528,281,5.528,282,2.451,283,2.451,284,3.409,285,2.451,286,2.451,287,2.451,288,2.451,289,3.409,290,2.451,291,2.451,292,2.451,293,1.853,294,2.451,295,4.255,296,2.319,297,2.451,298,3.816,299,2.451,300,2.451,301,2.451,302,2.319,303,2.879,304,3.163,305,2.803,306,3.163,307,3.163,308,3.163,309,3.163,310,2.451,311,1.313,312,2.09,313,3.057,314,1.313,315,2.09,316,1.313,317,1.224,318,2.09,319,3.816,320,3.163,321,3.163,322,2.09,323,2.09,324,4.809,325,2.09,326,3.816]],["title/interfaces/Gauge.html",[104,0.101,327,1.57]],["body/interfaces/Gauge.html",[0,0.106,1,2.241,2,0.313,3,0.355,4,0.215,6,0.423,8,2.053,9,1.259,10,0.838,14,0.023,15,2.04,16,0.843,20,0.184,22,1.219,26,0.86,30,0.531,45,0.903,46,0.635,48,1.068,49,1.149,50,0.456,52,0.753,56,1.772,61,0.397,68,0.459,73,3.715,74,1.117,84,1.078,96,0.397,97,0.347,103,0.459,104,0.173,105,1.54,106,0.39,107,0.525,108,0.689,114,2.353,115,3,122,0.017,123,0.017,134,2.168,141,1.449,147,1.208,153,0.96,184,3.318,222,3,229,1.705,244,1.433,327,3.134,328,3.745,329,4.211,330,2.915,331,4.392,332,3,333,2.053,334,3.745,335,5.213,336,3.745,337,2.353,338,4.211,339,4.392]],["title/interfaces/Groupable.html",[98,2.238,104,0.101]],["body/interfaces/Groupable.html",[2,0.352,3,0.382,4,0.242,6,0.382,8,2.804,9,1.226,14,0.023,15,2.196,16,0.941,18,4.209,20,0.208,29,4.097,30,0.572,32,5.073,40,5.115,46,0.513,50,0.623,56,1.978,61,0.352,62,1.39,68,0.46,72,0.848,74,0.902,84,1.473,87,4.532,96,0.352,97,0.391,98,4.3,103,0.427,104,0.194,106,0.382,107,0.474,108,0.556,122,0.018,123,0.018,136,1.848,333,2.804,340,4.216,341,4.945,342,4.945]],["title/classes/HdrHistogram.html",[0,0.068,343,1.918]],["body/classes/HdrHistogram.html",[0,0.096,2,0.155,3,0.215,4,0.106,6,0.357,8,1.015,9,0.981,10,1.034,14,0.023,16,0.759,19,0.632,20,0.091,21,1.042,22,1.269,24,1.394,25,3.044,26,0.997,27,3.672,30,0.322,45,0.956,46,0.654,47,1.279,48,1.029,49,1.229,50,0.684,52,1.022,56,1.597,61,0.362,62,1.246,68,0.512,72,0.712,74,0.926,84,1.019,96,0.4,97,0.172,100,1.253,103,0.334,105,0.962,106,0.357,107,0.532,108,0.653,111,0.503,122,0.01,123,0.01,124,2.803,126,2.717,128,3.069,129,0.953,131,2.595,132,2.685,135,0.669,136,1.042,138,2.223,141,0.879,144,1.836,146,2.977,147,0.598,148,1.656,152,1.358,153,0.908,166,0.984,176,1.209,178,1.394,179,2.309,193,1.484,199,1.358,217,1.253,223,2.713,224,1.58,229,0.843,230,2.598,231,3.044,237,0.895,238,2.719,239,0.598,241,2.223,243,0.895,244,0.708,268,2.899,311,1.163,317,2.073,330,0.953,343,3.666,344,3.672,345,1.358,346,2.309,347,4.21,348,3.439,349,2.113,350,3.36,351,2.928,352,3.833,353,3.136,354,2.172,355,3.672,356,3.381,357,3.136,358,2.883,359,3.136,360,3.2,361,2.309,362,3.173,363,2.309,364,2.309,365,1.95,366,2.309,367,3.381,368,2.172,369,4.652,370,5.293,371,2.172,372,2.172,373,3.539,374,2.172,375,2.172,376,3.381,377,2.883,378,2.172,379,2.703,380,2.172,381,2.172,382,2.172,383,2.883,384,3.539,385,2.172,386,2.172,387,2.172,388,2.172,389,2.172,390,2.172,391,4.328,392,1.852,393,1.641,394,2.172,395,1.852,396,2.172,397,2.835,398,3.136,399,2.172,400,2.172,401,2.172,402,2.172,403,2.835,404,1.253,405,1.641,406,1.852,407,1.852,408,1.852,409,2.595,410,1.484,411,3.101,412,5.293,413,5.293,414,1.852,415,4.785,416,1.484,417,1.852,418,1.852,419,1.484,420,1.852,421,1.852,422,1.484,423,1.852,424,1.852,425,1.484,426,1.852,427,1.852,428,1.484,429,1.852,430,1.852,431,1.484,432,1.852,433,3.2,434,1.484,435,1.852,436,1.852,437,1.484,438,1.852,439,1.852,440,1.852,441,1.484,442,1.852,443,1.484,444,1.484,445,1.484,446,1.852,447,1.484,448,1.852,449,1.852,450,1.484,451,1.484,452,1.484,453,1.641,454,1.253,455,1.163,456,1.852,457,1.852,458,1.852,459,1.852,460,1.641,461,1.641,462,1.852,463,2.883,464,1.852,465,1.852,466,1.852,467,1.852]],["title/classes/HdrSnapshot.html",[0,0.068,369,2.446]],["body/classes/HdrSnapshot.html",[0,0.099,2,0.165,3,0.226,4,0.114,6,0.309,9,0.955,10,1.075,14,0.023,16,0.685,19,0.676,20,0.097,22,1.061,24,0.957,26,1.018,30,0.339,45,0.957,46,0.504,48,0.95,49,1.32,50,0.68,52,0.946,56,1.335,61,0.165,62,1.124,68,0.521,72,0.61,74,0.886,84,0.57,96,0.409,97,0.183,103,0.346,105,0.825,106,0.148,107,0.538,108,0.667,111,0.538,122,0.011,123,0.011,124,2.162,126,2.276,128,2.521,129,1.56,138,1.243,144,1.865,146,2.951,148,1.495,153,0.946,166,1.036,176,1.036,178,0.957,217,2.053,224,1.085,229,1.884,230,2.486,231,1.159,238,2.599,241,1.243,244,1.161,268,1.159,311,1.243,317,2.162,330,2.421,343,3.812,344,4.519,345,1.451,346,1.585,347,4.394,348,3.185,349,1.451,350,3.033,351,2.799,352,1.585,355,2.956,357,2.688,358,1.979,359,2.688,360,2.43,361,1.585,362,3.033,363,1.585,364,1.585,365,1.339,366,1.585,369,4.696,383,1.979,384,1.979,403,2.956,404,1.339,405,1.753,406,1.979,407,1.979,408,1.979,409,3.271,410,1.585,411,3.45,412,5.889,413,5.889,414,3.034,415,5.588,416,3.314,417,1.979,418,3.034,419,3.314,420,1.979,421,3.034,422,3.314,423,1.979,424,3.034,425,3.314,426,1.979,427,3.034,428,3.314,429,1.979,430,3.034,431,3.314,432,1.979,433,4.05,434,3.314,435,1.979,436,3.034,437,3.314,438,1.979,439,3.034,440,1.979,441,3.314,442,1.979,443,2.43,444,2.43,445,3.314,446,1.979,447,2.43,448,1.979,449,1.979,450,1.585,451,1.585,452,1.585,453,1.753,454,1.339,455,1.243,456,1.979,457,1.979,458,1.979,459,1.979,460,1.753,461,1.753,462,1.979,463,3.034,464,1.979,465,1.979,466,1.979,467,1.979,468,2.321,469,2.321,470,2.321,471,2.321,472,2.321,473,2.321,474,2.321,475,2.321,476,2.321,477,2.321,478,2.321,479,2.321,480,2.321,481,1.753,482,2.321,483,2.321]],["title/classes/Int64Wrapper.html",[0,0.068,379,2.066]],["body/classes/Int64Wrapper.html",[0,0.125,2,0.308,3,0.275,4,0.212,6,0.275,14,0.023,16,0.722,19,1.258,20,0.181,21,1.699,22,1.399,26,1.001,30,0.526,44,4.836,45,0.933,46,0.664,48,1.065,49,0.89,50,0.686,52,1.097,56,1.819,62,1.001,68,0.49,72,0.945,74,1.007,84,1.354,102,4.167,103,0.393,106,0.351,107,0.523,108,0.621,111,1.001,122,0.017,123,0.017,153,1.206,166,1.258,184,3.264,239,1.517,243,2.639,346,3.767,347,3.448,379,4.086,484,3.264,485,6.401,486,6.401,487,6.401,488,5.516,489,5.516,490,5.516,491,4.321,492,4.321,493,6.401,494,5.516,495,5.516,496,5.516,497,5.457,498,4.321,499,4.703,500,4.167,501,2.701,502,3.684,503,3.684,504,4.321,505,5.516,506,4.321,507,4.321,508,4.321,509,4.321]],["title/interfaces/LengthAttributeInterface.html",[104,0.101,510,2.066]],["body/interfaces/LengthAttributeInterface.html",[0,0.091,1,2.002,2,0.249,3,0.305,4,0.171,6,0.375,9,1.074,10,0.721,13,1.048,14,0.023,15,1.279,16,0.716,20,0.147,21,1.477,22,1.048,23,2.167,25,3.318,26,0.673,30,0.457,45,0.901,46,0.568,48,0.526,52,0.599,56,1.619,61,0.341,68,0.49,96,0.39,97,0.276,103,0.486,104,0.199,105,1.111,106,0.305,107,0.516,108,0.734,122,0.014,123,0.014,134,1.563,135,1.963,144,1.714,147,1.505,153,0.764,166,1.395,176,1.395,229,2.579,237,1.441,239,1.619,244,1.563,249,2.669,293,1.746,327,2.705,330,1.533,333,1.634,337,1.872,510,3.763,511,2.016,512,1.872,513,4.212,514,3.972,515,3.736,516,3.675,517,3.675,518,3.675,519,3.42,520,4.263,521,4.02,522,2.387,523,4.02,524,4.02,525,2.387,526,2.387,527,4.02,528,2.387,529,2.387,530,2.387,531,2.387,532,2.387,533,4.351,534,2.387,535,2.387,536,2.387]],["title/interfaces/LengthMethodInterface.html",[104,0.101,516,2.066]],["body/interfaces/LengthMethodInterface.html",[0,0.091,1,2.002,2,0.249,3,0.305,4,0.171,6,0.375,9,1.074,10,0.721,13,1.048,14,0.023,15,1.279,16,0.716,20,0.147,22,1.048,23,2.167,25,3.318,26,0.673,30,0.588,45,0.892,46,0.497,48,0.526,50,0.363,52,0.599,56,1.619,61,0.341,68,0.494,96,0.39,97,0.276,103,0.486,104,0.199,105,1.111,106,0.305,107,0.516,108,0.734,122,0.014,123,0.014,134,1.563,135,1.963,144,1.714,147,1.319,153,0.764,166,1.395,176,1.395,229,2.579,237,1.441,239,1.619,244,1.14,249,2.669,293,1.746,327,2.705,330,1.533,333,1.634,337,1.872,510,3.675,511,2.765,512,1.872,513,4.212,514,3.972,515,3.274,516,3.763,517,3.675,518,3.675,519,3.42,520,4.263,521,4.02,522,2.387,523,4.02,524,4.02,525,2.387,526,2.387,527,4.02,528,2.387,529,2.387,530,2.387,531,2.387,532,2.387,533,4.351,534,2.387,535,2.387,536,2.387,537,3.495]],["title/interfaces/Logger.html",[104,0.101,538,2.705]],["body/interfaces/Logger.html",[2,0.498,3,0.395,4,0.256,6,0.333,7,3.324,13,1.577,14,0.022,20,0.22,21,1.912,46,0.71,61,0.373,96,0.373,97,0.413,103,0.442,104,0.187,122,0.019,123,0.019,136,1.912,538,5.278,539,4.46,540,5.291,541,6.842,542,5.834,543,6.842,544,6.842]],["title/interfaces/MetadataContainer.html",[99,2.238,104,0.101]],["body/interfaces/MetadataContainer.html",[0,0.103,2,0.298,3,0.344,4,0.205,6,0.403,14,0.023,15,1.979,16,0.946,20,0.176,29,4.981,30,0.515,33,4.61,34,4.78,37,4.61,41,4.61,46,0.696,48,1.009,50,0.657,52,1.15,56,1.963,61,0.478,64,4.723,68,0.505,70,4.085,72,1.15,73,4.184,74,1.093,80,4.085,84,1.327,89,4.085,96,0.298,97,0.331,99,4.266,103,0.385,104,0.185,106,0.403,107,0.5,108,0.712,122,0.016,123,0.016,135,1.666,239,1.741,332,4.089,545,5.584,546,3.164,547,4.188,548,6.707,549,4.188,550,5.407,551,5.407,552,5.407,553,5.407,554,4.188,555,2.896,556,4.61,557,4.188]],["title/interfaces/Metered.html",[104,0.101,558,1.918]],["body/interfaces/Metered.html",[2,0.315,3,0.356,4,0.217,6,0.281,9,1.261,10,0.841,13,1.223,14,0.023,20,0.185,30,0.533,45,0.957,50,0.691,61,0.315,68,0.506,96,0.398,97,0.349,103,0.398,104,0.173,105,1.423,106,0.452,107,0.526,122,0.017,123,0.017,127,3.016,129,2.983,132,3.223,141,1.454,147,1.539,178,2.306,237,2.306,284,3.82,296,4.559,303,3.924,311,2.996,316,3.643,392,4.769,411,2.794,558,3.744,559,3.766,560,4.226,561,4.769,562,5.502,563,5.502,564,5.502,565,5.502,566,4.417,567,4.417,568,4.417,569,4.417,570,4.417]],["title/interfaces/Metric.html",[9,0.653,104,0.101]],["body/interfaces/Metric.html",[0,0.11,1,2.447,2,0.24,3,0.297,4,0.165,5,2.542,6,0.431,7,2.872,8,1.573,9,1.324,10,0.807,11,2.869,12,2.869,13,0.736,14,0.023,15,2.409,16,0.902,17,4.051,18,3.341,20,0.141,22,1.021,23,1.749,24,1.387,25,3.381,26,0.992,27,2.298,28,4.572,29,3.662,30,0.445,31,5.187,32,2.542,34,2.542,35,5.187,36,2.542,39,3.981,42,3.981,44,2.542,45,0.702,46,0.683,48,0.947,49,0.693,50,0.601,52,0.993,53,2.869,54,3.981,55,2.542,56,2.024,59,2.869,61,0.482,62,1.082,64,2.298,68,0.503,70,2.542,72,0.8,73,3.51,74,0.852,77,2.542,80,2.542,82,2.542,84,1.661,85,4.572,87,2.542,89,2.542,91,4.572,93,2.542,96,0.413,97,0.266,98,3.803,99,2.919,100,1.941,101,3.62,102,3.528,103,0.413,104,0.151,105,1.342,106,0.369,107,0.54,108,0.525,109,2.869,110,3.981,111,0.78,112,2.869,113,2.869,114,2.872,115,3.189,116,4.572,117,2.869,118,2.869,119,2.869,120,2.869,121,2.869,122,0.014,123,0.014,571,3.365,572,3.365,573,3.365,574,3.365]],["title/classes/MetricRegistration.html",[0,0.068,575,2.446]],["body/classes/MetricRegistration.html",[0,0.082,1,0.996,2,0.085,3,0.131,4,0.058,6,0.368,9,1.314,10,0.31,13,0.709,14,0.023,15,1.468,16,0.92,18,3.425,19,0.347,20,0.181,21,0.635,22,1.326,23,1.913,24,2.677,26,0.988,45,0.688,46,0.559,47,0.999,49,0.668,50,0.282,52,1.196,56,1.987,61,0.467,62,1.463,68,0.51,72,0.204,73,3.383,74,0.217,84,1.376,96,0.384,97,0.094,103,0.306,105,0.477,106,0.368,107,0.546,108,0.793,111,1.405,114,0.638,122,0.006,123,0.006,126,0.491,128,2.362,132,0.595,135,1.575,136,1.849,141,0.309,144,1.861,145,3.215,146,2.65,147,0.567,150,1.964,153,0.595,166,0.347,176,1.325,178,0.491,186,2.929,188,2.625,200,0.595,214,1.103,223,2.571,224,0.556,238,1.103,239,1.311,243,1.774,244,1.308,249,0.754,302,1.287,317,2.149,327,2.171,329,2.056,332,2.215,343,1.458,348,1.188,349,0.744,355,1.859,360,1.407,361,0.813,362,1.287,363,0.813,364,0.813,365,0.687,366,0.813,404,3.425,409,2.845,410,0.813,443,0.813,450,0.813,451,0.813,452,0.813,454,0.687,455,0.638,500,0.899,555,2.149,558,3.333,575,3.108,576,1.737,577,0.744,578,1.756,579,3.42,580,1.756,581,3.669,582,1.756,583,2.059,584,1.191,585,2.855,586,2.885,587,3.678,588,2.508,589,0.744,590,3.89,591,3.438,592,2.321,593,3.124,594,1.556,595,1.015,596,1.015,597,2.69,598,3.977,599,4.933,600,1.015,601,1.015,602,1.015,603,1.015,604,5.345,605,3.669,606,1.015,607,1.015,608,1.015,609,1.015,610,1.015,611,1.015,612,1.015,613,1.756,614,1.015,615,1.756,616,1.756,617,1.756,618,1.015,619,1.756,620,1.015,621,1.015,622,2.321,623,1.756,624,2.845,625,1.015,626,1.015,627,1.015,628,1.015,629,1.015,630,0.899,631,1.015,632,1.015,633,1.015,634,1.015,635,1.015,636,1.015,637,1.015,638,2.765,639,1.015,640,4.43,641,4.43,642,4.371,643,1.756,644,4.43,645,4.779,646,1.756,647,3.42,648,3.42,649,4.482,650,1.756,651,1.015,652,1.756,653,1.756,654,1.015,655,1.756,656,1.756,657,1.015,658,1.756,659,1.756,660,1.015,661,1.756,662,3.251,663,3.42,664,2.056,665,1.015,666,1.015,667,0.899,668,0.899,669,1.015,670,1.756,671,1.015,672,1.015,673,3.124,674,1.015,675,1.015,676,1.015,677,1.015,678,1.015,679,1.015,680,1.015,681,1.015,682,1.015,683,1.015,684,1.015,685,1.015,686,1.015,687,4.062,688,1.015,689,1.015,690,1.015,691,1.015,692,1.015,693,1.015,694,1.015,695,3.42,696,1.015,697,1.015,698,1.756,699,1.756,700,1.015,701,1.756,702,1.756,703,1.015,704,1.015,705,1.015,706,1.015,707,1.015,708,3.124,709,1.015,710,1.015,711,1.015,712,1.015,713,3.88,714,3.42,715,1.015,716,1.015,717,1.756,718,1.756,719,1.015,720,1.015,721,1.756,722,1.015,723,1.015,724,1.756,725,0.899,726,1.015,727,1.015,728,2.321,729,1.015,730,1.015,731,1.756,732,1.756,733,1.015,734,1.756,735,0.899,736,1.015,737,1.015,738,1.015,739,1.015,740,1.015,741,1.015,742,1.015,743,1.756,744,1.756,745,1.756,746,1.756,747,1.756,748,1.015,749,1.756,750,1.015,751,1.015,752,1.015,753,1.015,754,1.015,755,1.015,756,1.015,757,1.015,758,1.015,759,1.015,760,1.015,761,1.015,762,1.756,763,1.015,764,1.015,765,1.015,766,1.015,767,1.015,768,1.015,769,1.015,770,1.015,771,1.015,772,1.015,773,1.015,774,1.015,775,1.015,776,1.556,777,0.744,778,1.015,779,1.756,780,1.015,781,1.015,782,1.015]],["title/interfaces/MetricRegistryListener.html",[104,0.101,585,2.066]],["body/interfaces/MetricRegistryListener.html",[2,0.335,3,0.37,4,0.23,6,0.37,9,1.361,14,0.023,16,0.926,20,0.197,30,0.554,46,0.603,50,0.603,56,1.946,61,0.335,68,0.414,72,0.997,74,1.061,84,1.62,96,0.414,97,0.371,103,0.414,104,0.191,107,0.46,108,0.742,122,0.018,123,0.018,135,1.792,144,1.693,411,3.296,555,3.534,576,3.382,585,3.912,586,3.382,587,3.971,598,3.806,777,3.635,783,3.55,784,4.957,785,5.815,786,4.957,787,5.815,788,5.815,789,4.957,790,4.699,791,4.957,792,4.699]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.068,597,2.238]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.082,1,0.998,2,0.085,3,0.131,4,0.059,6,0.368,9,1.311,10,0.311,13,0.71,14,0.023,15,1.471,16,0.914,18,3.386,19,0.348,20,0.181,22,1.327,23,1.914,24,2.678,26,0.985,30,0.197,45,0.689,46,0.531,47,1.001,49,0.67,50,0.214,52,1.196,56,1.985,61,0.467,62,1.464,68,0.511,72,0.205,73,3.177,74,0.218,84,1.4,96,0.384,97,0.094,103,0.307,105,0.479,106,0.368,107,0.546,108,0.793,111,1.406,114,0.64,122,0.006,123,0.006,126,0.492,128,2.364,132,0.596,135,1.527,136,1.87,141,0.537,144,1.862,145,3.218,146,2.651,147,0.329,150,1.879,153,0.596,166,0.348,176,1.327,178,0.492,186,2.931,188,2.629,200,0.596,214,1.106,223,2.574,224,0.558,238,1.106,239,1.312,243,1.777,244,1.311,249,0.756,302,0.746,317,2.153,327,2.173,329,2.061,332,2.22,343,1.461,348,1.191,349,0.746,355,1.863,360,1.41,361,0.816,362,1.291,363,0.816,364,0.816,365,0.689,366,0.816,404,3.427,409,2.849,410,0.816,443,0.816,450,0.816,451,0.816,452,0.816,454,0.689,455,0.64,500,0.902,555,2.742,558,3.335,575,2.744,576,1.461,577,0.746,578,1.018,579,2.771,580,1.018,581,2.326,582,1.018,585,3.11,586,3.101,587,3.896,588,2.512,589,0.746,590,3.893,591,3.443,592,2.326,593,3.13,594,2.061,595,1.761,596,1.761,597,2.982,598,3.993,599,5.004,600,1.018,601,1.018,602,1.018,603,1.018,604,5.349,605,3.674,606,1.018,607,1.018,608,1.018,609,1.018,610,1.018,611,1.018,612,1.018,613,1.761,614,1.018,615,1.761,616,1.761,617,1.761,618,1.018,619,1.761,620,1.018,621,1.018,622,2.326,623,1.761,624,2.849,625,1.018,626,1.018,627,1.018,628,1.018,629,1.018,630,0.902,631,1.018,632,1.018,633,1.018,634,1.018,635,1.018,636,1.018,637,1.018,638,2.771,639,1.018,640,4.434,641,4.434,642,4.375,643,1.761,644,4.434,645,4.783,646,1.761,647,3.426,648,3.426,649,4.487,650,1.761,651,1.018,652,1.761,653,1.761,654,1.018,655,1.761,656,1.761,657,1.018,658,1.761,659,1.761,660,1.018,661,1.761,662,3.256,663,3.426,664,2.061,665,1.018,666,1.018,667,0.902,668,0.902,669,1.018,670,1.761,671,1.018,672,1.018,673,3.13,674,1.018,675,1.018,676,1.018,677,1.018,678,1.018,679,1.018,680,1.018,681,1.018,682,1.018,683,1.018,684,1.018,685,1.018,686,1.018,687,4.067,688,1.018,689,1.018,690,1.018,691,1.018,692,1.018,693,1.018,694,1.018,695,3.426,696,1.018,697,1.018,698,1.761,699,1.761,700,1.018,701,1.761,702,1.761,703,1.018,704,1.018,705,1.018,706,1.018,707,1.018,708,3.13,709,1.018,710,1.018,711,1.018,712,1.018,713,3.885,714,3.426,715,1.018,716,1.018,717,1.761,718,1.761,719,1.018,720,1.018,721,1.761,722,1.018,723,1.018,724,1.761,725,0.902,726,1.018,727,1.018,728,2.326,729,1.018,730,1.018,731,1.761,732,1.761,733,1.018,734,1.761,735,0.902,736,1.018,737,1.018,738,1.018,739,1.018,740,1.018,741,1.018,742,1.018,743,1.761,744,1.761,745,1.761,746,1.761,747,1.761,748,1.018,749,1.761,750,1.018,751,1.018,752,1.018,753,1.018,754,1.018,755,1.018,756,1.018,757,1.018,758,1.018,759,1.018,760,1.018,761,1.018,762,1.761,763,1.018,764,1.018,765,1.018,766,1.018,767,1.018,768,1.018,769,1.018,770,1.018,771,1.018,772,1.018,773,1.018,774,1.018,775,1.018,776,1.56,777,0.746,778,1.018,779,1.761,780,1.018,781,1.018,782,1.018,793,1.194,794,1.194,795,1.194]],["title/classes/MetricReporter.html",[0,0.068,796,2.446]],["body/classes/MetricReporter.html",[0,0.124,2,0.298,3,0.344,4,0.205,6,0.266,7,3.774,8,2.525,9,1.245,10,1.009,14,0.023,16,0.707,19,1.218,20,0.251,21,1.665,25,3.159,26,1.002,30,0.515,45,0.547,46,0.656,47,1.289,48,0.629,50,0.679,52,0.926,61,0.298,62,1.252,68,0.45,72,0.926,74,0.986,84,1.697,96,0.385,97,0.331,103,0.385,107,0.517,108,0.608,111,0.97,122,0.016,123,0.016,144,1.742,156,3.592,176,1.573,243,2.228,317,2.699,333,3.232,411,3.159,555,2.894,576,3.592,586,2.241,598,4.269,777,3.377,796,4.722,797,2.858,798,5.403,799,5.403,800,5.066,801,4.184,802,5.403,803,4.184,804,5.403,805,4.184,806,5.403,807,4.184,808,4.184,809,4.184,810,4.184,811,4.184]],["title/interfaces/MetricSet.html",[104,0.101,588,2.238]],["body/interfaces/MetricSet.html",[2,0.351,3,0.381,4,0.242,6,0.314,9,1.346,14,0.023,16,0.784,20,0.207,30,0.571,50,0.622,52,1.198,61,0.498,68,0.478,96,0.427,97,0.39,103,0.427,104,0.182,105,1.495,106,0.427,107,0.473,122,0.018,123,0.018,136,1.52,141,1.557,144,1.744,249,2.192,576,3.455,588,4.297,640,3.727,641,3.727,642,3.727,644,3.727,662,4.526,667,5.069,668,5.194,812,3.727,813,5.107,814,4.932,815,4.932]],["title/interfaces/MovingAverage.html",[104,0.101,259,2.446]],["body/interfaces/MovingAverage.html",[0,0.081,2,0.213,3,0.273,4,0.147,6,0.19,10,0.827,13,0.654,14,0.023,16,0.562,20,0.126,22,1.476,23,1.976,26,0.948,30,0.409,45,0.956,46,0.663,48,1.046,49,0.885,50,0.57,52,0.512,61,0.213,68,0.485,72,0.736,74,0.784,84,1.487,96,0.306,97,0.236,103,0.391,104,0.142,106,0.397,107,0.549,108,0.702,111,0.995,122,0.013,123,0.013,127,2.008,134,1.792,141,1.428,147,1.182,148,1.549,153,0.654,165,2.259,166,0.87,175,2.685,176,1.894,178,2.4,182,3.245,190,2.574,194,2.685,195,2.008,196,2.073,216,1.869,231,3.19,237,1.771,239,1.512,241,2.693,243,2.073,252,4.72,253,4.397,254,2.042,255,3.662,256,3.662,257,4.32,258,5.757,259,4.442,260,2.549,261,2.549,262,2.549,263,2.549,264,2.549,265,2.549,266,4.685,267,5.166,268,3.118,269,2.549,270,3.987,271,4.962,272,3.662,273,2.549,274,5.322,275,2.549,276,3.93,279,3.662,280,5.166,281,5.166,284,2.934,289,3.434,293,1.493,295,3.662,296,1.869,298,4.286,302,1.869,303,2.478,304,2.549,305,2.259,306,2.549,307,2.549,308,2.549,309,2.549,311,2.301,312,3.662,313,4.138,314,2.301,315,3.662,316,2.301,317,2.146,318,3.662,319,4.286,320,3.662,321,3.662,322,2.549,323,2.549,324,5.166,325,2.549,326,4.286,816,2.99,817,2.99,818,2.99,819,2.99]],["title/interfaces/Reservoir.html",[104,0.101,223,1.674]],["body/interfaces/Reservoir.html",[0,0.101,2,0.293,3,0.34,4,0.201,6,0.262,10,0.892,14,0.023,16,0.538,20,0.173,22,1.373,26,0.833,30,0.509,45,0.96,46,0.616,48,1.095,50,0.616,52,0.705,61,0.293,62,1.375,68,0.484,72,0.705,74,0.75,84,1.457,96,0.38,97,0.325,103,0.447,104,0.168,106,0.378,107,0.544,108,0.668,122,0.016,123,0.016,141,1.388,153,1.297,220,4.306,221,2.807,222,2.807,223,3.383,224,3.043,225,4.483,226,4.035,227,4.035,228,4.483,229,2.528,230,2.747,231,2.668,232,3.105,234,4.053,237,1.695,238,2.202,239,1.469,241,3.178,243,2.446,244,1.341,245,3.105,246,3.105,247,2.569,248,2.202,249,1.955,250,3.105,251,3.339,820,4.11,821,4.11,822,4.11]],["title/interfaces/Sampling.html",[104,0.101,148,1.103]],["body/interfaces/Sampling.html",[0,0.118,2,0.374,3,0.396,4,0.257,6,0.334,9,1.135,14,0.023,20,0.221,30,0.593,48,1.03,50,0.545,61,0.374,68,0.443,96,0.443,97,0.415,103,0.443,104,0.197,106,0.396,107,0.415,122,0.019,123,0.019,148,2.111,230,2.819,352,4.679,624,3.888,823,4.478,824,5.303,825,5.252]],["title/classes/SimpleSnapshot.html",[0,0.068,248,1.918]],["body/classes/SimpleSnapshot.html",[0,0.082,2,0.165,3,0.226,4,0.113,6,0.147,10,0.786,14,0.023,16,0.465,19,0.674,20,0.219,21,1.094,22,1.059,23,0.755,26,1.014,30,0.338,45,0.97,46,0.503,47,1.331,48,1.105,49,1.221,50,0.686,52,0.609,61,0.165,68,0.522,72,0.609,74,0.648,96,0.165,97,0.183,103,0.345,104,0.137,106,0.447,107,0.557,108,0.486,111,1.278,122,0.011,123,0.011,129,1.557,138,3.681,144,0.674,147,0.977,153,0.776,164,2.048,166,0.674,174,2.682,175,2.219,176,1.41,178,1.464,179,2.425,200,1.773,224,1.081,229,2.029,230,2.655,239,1.188,244,2.023,247,2.219,248,3.663,249,1.581,251,3.704,257,3.447,268,2.61,289,1.58,303,2.048,330,2.518,338,3.264,393,2.682,397,2.425,398,2.682,411,3.197,416,3.569,419,3.569,422,3.569,425,3.569,428,3.569,431,3.569,433,2.95,434,3.569,437,3.569,441,3.569,444,2.95,445,3.569,447,2.95,455,1.902,481,4.338,514,2.048,826,1.748,827,3.027,828,3.55,829,4.131,830,2.314,831,3.027,832,3.264,833,2.314,834,3.027,835,3.264,836,2.314,837,3.027,838,3.683,839,2.314,840,3.027,841,3.683,842,2.314,843,3.027,844,3.683,845,2.314,846,2.314,847,2.314,848,3.027,849,3.948,850,2.314,851,2.314,852,2.314,853,3.027,854,2.682,855,3.027,856,3.027,857,2.682,858,3.027,859,3.027,860,3.027,861,3.027,862,3.027,863,3.027,864,3.027,865,3.027,866,3.027,867,3.027,868,2.314,869,2.314,870,1.973,871,1.973,872,1.973,873,1.973,874,1.973,875,1.973,876,1.973,877,1.973,878,1.973,879,1.973,880,1.973,881,1.973,882,1.973,883,3.027,884,1.973,885,2.7,886,1.973,887,1.973,888,3.027,889,1.973,890,1.973,891,3.683,892,3.027,893,1.973]],["title/interfaces/SizeAttributeInterface.html",[104,0.101,518,2.066]],["body/interfaces/SizeAttributeInterface.html",[0,0.091,1,2.001,2,0.249,3,0.305,4,0.171,6,0.374,9,1.074,10,0.721,13,1.047,14,0.023,15,1.753,16,0.715,20,0.147,21,1.476,22,1.047,23,2.166,25,3.318,26,0.673,30,0.456,45,0.901,46,0.567,48,0.525,52,0.599,56,1.619,61,0.389,68,0.49,96,0.389,97,0.276,103,0.486,104,0.199,105,1.11,106,0.305,107,0.515,108,0.734,122,0.014,123,0.014,134,1.562,135,1.962,144,1.713,147,1.504,153,0.763,166,1.395,176,1.395,229,2.694,237,1.44,239,1.619,244,1.139,249,2.669,293,1.744,327,2.704,330,1.531,333,1.632,337,1.87,510,3.674,511,2.015,512,1.87,513,4.211,514,3.763,515,3.735,516,3.674,517,3.674,518,3.763,519,3.418,520,4.262,521,4.019,522,2.385,523,4.019,524,4.019,525,2.385,526,2.385,527,4.019,528,2.385,529,2.385,530,2.385,531,2.385,532,2.385,533,4.35,534,2.385,535,2.385,536,2.385]],["title/interfaces/SizeMethodInterface.html",[104,0.101,517,2.066]],["body/interfaces/SizeMethodInterface.html",[0,0.091,1,2.002,2,0.249,3,0.305,4,0.171,6,0.375,9,1.074,10,0.721,13,1.048,14,0.023,15,1.279,16,0.716,20,0.147,22,1.048,23,2.167,25,3.318,26,0.673,30,0.588,45,0.892,46,0.497,48,0.526,50,0.363,52,0.599,56,1.619,61,0.341,68,0.494,96,0.39,97,0.276,103,0.486,104,0.199,105,1.111,106,0.305,107,0.516,108,0.734,122,0.014,123,0.014,134,1.563,135,1.963,144,1.714,147,1.319,153,0.764,166,1.395,176,1.395,229,2.695,237,1.441,239,1.619,244,1.14,249,2.669,293,1.746,327,2.705,330,1.533,333,1.634,337,1.872,510,3.675,511,2.765,512,1.872,513,4.212,514,3.763,515,3.274,516,3.675,517,3.763,518,3.675,519,3.42,520,4.263,521,4.02,522,2.387,523,4.02,524,4.02,525,2.387,526,2.387,527,4.02,528,2.387,529,2.387,530,2.387,531,2.387,532,2.387,533,4.351,534,2.387,535,2.387,536,2.387,894,3.495]],["title/classes/SlidingWindowReservoir.html",[0,0.068,589,2.238]],["body/classes/SlidingWindowReservoir.html",[0,0.107,2,0.266,3,0.319,4,0.183,6,0.237,10,0.91,14,0.023,16,0.656,19,1.086,20,0.265,21,1.544,22,1.509,26,0.97,30,0.477,45,0.967,46,0.689,47,1.544,48,1.108,49,0.769,50,0.689,52,0.859,61,0.266,62,1.311,68,0.473,72,0.859,74,0.915,84,1.389,96,0.357,97,0.295,103,0.431,104,0.141,106,0.36,107,0.533,108,0.637,122,0.015,123,0.015,134,1.217,136,1.15,141,0.97,153,1.322,166,1.086,220,4.216,221,2.549,222,2.549,223,3.358,224,3.102,225,4.907,226,3.786,227,3.786,228,5.013,229,2.449,230,2.704,231,2.503,232,3.786,234,4.309,237,1.539,238,1.999,239,1.379,241,3.03,243,2.332,244,1.972,245,3.786,246,2.819,247,2.333,248,1.999,249,1.366,250,2.819,251,3.132,589,3.132,784,3.182,786,3.182,895,3.732,896,5.011,897,5.011,898,5.011,899,3.732,900,3.732,901,3.732,902,3.732,903,3.732]],["title/interfaces/Snapshot.html",[104,0.101,230,1.39]],["body/interfaces/Snapshot.html",[0,0.071,2,0.177,3,0.239,4,0.122,6,0.158,10,0.68,14,0.023,16,0.326,20,0.211,22,0.821,23,1.224,26,0.933,30,0.358,45,0.972,46,0.389,47,0.767,48,1.102,49,1.249,50,0.683,52,0.427,61,0.177,68,0.524,72,0.427,74,0.454,96,0.177,97,0.197,103,0.358,104,0.142,106,0.457,107,0.561,108,0.508,111,1.315,122,0.011,123,0.011,129,1.646,138,3.719,144,0.725,147,0.685,153,0.544,164,2.165,174,1.881,175,1.556,176,1.465,178,1.026,179,1.7,200,1.243,224,1.754,229,2.095,230,2.67,239,1.243,244,1.76,247,1.556,248,3.664,249,1.654,251,3.789,257,3.547,268,2.696,289,1.7,303,1.436,330,2.583,338,3.413,393,2.836,397,1.7,398,1.881,411,2.834,416,3.687,419,3.687,422,3.687,425,3.687,428,3.687,431,3.687,433,2.564,434,3.687,437,3.687,441,3.687,444,3.086,445,3.687,447,3.086,455,1.333,481,4.287,514,1.436,826,1.881,827,2.122,829,3.2,831,2.122,832,3.413,834,2.122,835,3.413,837,2.122,838,3.852,840,2.122,841,3.852,843,2.122,844,3.852,848,2.122,849,3.801,853,2.122,854,1.881,855,2.122,856,2.122,857,1.881,858,2.122,859,2.122,860,2.122,861,2.122,862,2.122,863,2.122,864,2.122,865,2.122,866,2.122,867,2.122,870,3.2,871,3.2,872,2.122,873,2.122,874,2.122,875,2.122,876,2.122,877,2.122,878,2.122,879,2.122,880,2.122,881,2.122,882,2.122,883,3.2,884,2.122,885,2.824,886,2.122,887,2.122,888,3.2,889,2.122,890,2.122,891,3.852,892,3.2,893,2.122,904,2.489,905,2.489,906,2.489,907,2.489,908,2.489,909,2.489,910,2.489,911,2.489,912,2.489,913,2.489,914,2.489,915,2.489,916,2.489]],["title/classes/StdClock.html",[0,0.068,214,1.918]],["body/classes/StdClock.html",[0,0.124,2,0.296,3,0.402,4,0.204,6,0.265,7,3.65,10,0.949,13,0.91,14,0.023,19,1.212,20,0.175,26,0.941,30,0.513,45,0.876,47,1.659,49,1.11,50,0.559,61,0.296,68,0.501,72,0.923,96,0.296,97,0.329,103,0.492,104,0.152,105,1.383,106,0.38,107,0.426,108,0.606,111,1.383,122,0.016,123,0.016,134,1.756,135,1.659,136,1.839,141,1.082,148,1.659,150,2.461,186,3.562,187,2.602,188,2.401,189,3.145,190,3.068,192,4.086,193,3.678,194,3.366,195,2.517,196,2.761,197,2.843,198,4.311,199,2.602,200,2.079,201,2.843,202,2.843,203,2.602,204,2.843,205,4.068,206,3.145,207,3.145,208,3.678,209,4.068,210,3.145,211,3.145,212,4.51,213,4.068,214,3.381,215,4.068,216,3.366,217,3.106,218,4.068,370,3.549,917,4.162,918,4.162]],["title/classes/StopWatch.html",[0,0.068,919,2.446]],["body/classes/StopWatch.html",[0,0.113,1,1.682,2,0.182,3,0.244,4,0.126,6,0.348,9,0.839,10,0.691,13,1.116,14,0.023,15,1.868,16,0.75,19,0.746,20,0.108,21,1.182,22,1.502,26,0.983,30,0.365,45,0.874,46,0.661,49,0.528,50,0.595,52,0.788,56,1.503,61,0.327,62,1.266,68,0.503,72,0.439,74,0.468,84,1.46,96,0.471,97,0.202,103,0.363,105,0.889,106,0.411,107,0.555,108,0.703,111,0.889,114,1.372,115,1.75,122,0.012,123,0.012,124,1.916,126,1.895,127,2.385,128,2.792,129,1.123,131,1.601,132,1.916,136,1.684,141,0.666,144,1.82,146,2.665,148,1.572,153,1.005,156,3.275,166,1.116,176,0.746,178,1.056,186,3.549,188,2.652,190,2.521,196,2.521,203,4.27,223,2.681,230,2.121,243,2.253,257,2.873,268,1.28,270,2.652,276,2.652,284,1.75,293,1.916,296,3.585,303,3.153,313,3.139,314,2.462,316,2.462,333,1.792,337,1.372,346,2.619,351,2.652,352,1.75,353,1.935,357,1.935,365,2.212,373,2.184,379,2.652,405,1.935,453,1.935,461,1.935,501,1.601,556,2.184,558,3.462,560,4.333,562,2.184,563,2.184,564,2.184,565,2.184,590,4.561,624,1.601,630,1.935,725,1.935,735,1.935,776,2.897,800,3.855,885,1.601,919,4.563,920,2.184,921,3.835,922,6.114,923,3.835,924,3.835,925,2.562,926,2.562,927,2.562,928,2.619,929,2.562,930,5.735,931,3.835,932,2.562,933,2.562,934,5.946,935,2.562,936,2.562,937,2.562,938,2.562,939,2.562,940,2.562,941,5.103,942,2.562,943,3.835,944,2.562,945,2.562,946,2.562,947,2.562,948,2.562,949,3.27,950,2.562,951,2.562,952,3.835,953,2.562,954,3.835,955,2.562,956,3.835,957,4.596,958,2.562,959,2.562,960,3.27,961,2.562,962,2.562,963,2.562,964,2.562]],["title/interfaces/Summarizing.html",[104,0.101,351,2.066]],["body/interfaces/Summarizing.html",[0,0.118,2,0.374,3,0.396,4,0.257,6,0.334,9,1.135,14,0.023,20,0.221,30,0.593,48,1.03,50,0.545,61,0.374,68,0.443,96,0.443,97,0.415,103,0.443,104,0.197,106,0.396,107,0.415,122,0.019,123,0.019,268,3.422,351,3.952,353,5.176,379,3.952,501,3.283,624,3.888,824,5.303,965,4.478,966,5.252]],["title/interfaces/Taggable.html",[101,2.238,104,0.101]],["body/interfaces/Taggable.html",[0,0.109,2,0.327,3,0.364,4,0.225,6,0.292,14,0.023,15,2.096,16,0.929,17,5.32,20,0.192,30,0.546,36,5.187,38,4.882,43,4.882,46,0.648,48,0.984,50,0.679,56,2.027,61,0.466,68,0.489,72,1.07,74,1.14,77,4.326,82,4.326,84,1.606,93,4.326,96,0.327,97,0.362,101,4.439,103,0.408,104,0.19,106,0.416,107,0.517,108,0.736,122,0.017,123,0.017,239,1.889,404,3.304,555,3.067,967,3.909,968,4.585,969,5.726,970,4.585,971,4.585,972,4.585]],["title/interfaces/Time.html",[104,0.101,190,1.476]],["body/interfaces/Time.html",[0,0.121,2,0.307,3,0.386,4,0.211,6,0.274,7,3.54,10,0.828,13,0.943,14,0.023,20,0.181,21,1.697,26,0.774,45,0.926,46,0.572,47,1.328,49,1.135,61,0.307,68,0.489,72,0.944,96,0.307,97,0.341,103,0.495,104,0.171,105,1.276,106,0.351,107,0.435,108,0.62,111,1.407,122,0.017,123,0.017,134,1.406,135,1.328,136,1.697,141,1.432,148,1.697,150,2.502,186,3.475,187,2.695,188,2.487,189,3.257,190,3.053,192,4.131,193,2.945,194,2.695,195,3.089,196,2.868,197,2.945,198,4.368,199,2.695,200,2.153,201,2.945,202,2.945,203,2.695,204,2.945,205,4.161,206,3.257,207,3.257,208,3.762,209,4.161,210,3.257,211,3.257,212,4.161,213,3.257,214,3.251,215,3.257,216,2.695,217,2.487,218,3.257]],["title/classes/TimeUnit.html",[0,0.068,276,2.066]],["body/classes/TimeUnit.html",[0,0.112,2,0.289,3,0.337,4,0.199,6,0.258,14,0.023,16,0.693,19,1.181,20,0.17,21,1.631,22,1.366,26,0.965,30,0.505,45,0.951,46,0.649,48,0.975,50,0.649,52,0.908,61,0.289,62,1.57,68,0.474,72,0.908,74,0.966,96,0.289,97,0.321,103,0.495,106,0.337,107,0.494,108,0.663,111,1.57,122,0.016,123,0.016,141,1.376,147,1.457,150,2.577,153,1.158,166,1.181,176,1.542,190,2.832,195,1.896,196,2.864,208,3.616,239,1.457,270,4.169,276,4.12,314,3.158,316,3.158,317,2.645,499,4.515,973,4.898,974,2.77,975,4.454,976,6.773,977,5.295,978,6.25,979,5.295,980,5.295,981,5.295,982,4.056,983,5.295,984,4.428,985,6.25,986,5.295,987,4.056,988,5.895,989,4.056,990,3.458,991,3.458,992,3.458,993,3.458,994,3.458,995,3.458,996,3.064,997,3.458]],["title/coverage.html",[998,3.682]],["body/coverage.html",[0,0.139,1,1.378,4,0.184,5,3.808,9,0.687,13,0.823,14,0.023,24,1.552,46,0.391,49,1.393,62,0.872,98,2.353,99,2.353,101,2.353,104,0.205,122,0.015,123,0.015,124,1.88,125,3.881,126,1.552,128,1.65,145,2.016,146,1.552,148,1.16,186,1.88,187,3.793,190,1.552,195,1.759,196,1.552,214,2.016,220,2.353,221,3.881,223,1.759,230,1.461,248,2.016,252,2.571,253,3.808,254,3.442,259,2.571,276,2.171,314,2.016,316,2.016,327,1.65,328,4.297,335,2.843,340,3.209,343,2.016,344,3.881,345,3.552,351,2.171,369,2.571,379,2.171,397,2.571,403,2.571,454,4.258,484,3.808,501,2.353,510,2.171,511,3.65,512,3.389,516,2.171,517,2.171,518,2.171,520,2.353,538,2.843,539,3.209,545,3.209,546,2.843,558,2.699,559,3.209,575,2.571,576,3.488,577,3.552,585,2.171,586,2.016,588,2.353,589,2.353,590,2.353,597,2.353,598,2.171,783,2.843,796,2.571,797,3.442,812,2.843,823,3.209,826,3.808,849,4.919,885,2.353,919,2.571,920,4.297,928,4.675,965,3.209,967,3.209,973,5.106,974,4.616,975,2.843,984,2.571,996,2.843,998,2.843,999,3.209,1000,3.764,1001,3.209,1002,5.394,1003,5.552,1004,3.764,1005,3.764,1006,4.297,1007,5.04,1008,5.04,1009,3.764,1010,3.764,1011,3.764,1012,3.764,1013,3.764,1014,3.764,1015,3.209,1016,3.764,1017,3.764,1018,3.764,1019,3.764,1020,4.844,1021,6.758,1022,3.209,1023,3.209,1024,3.764,1025,3.764,1026,6.327,1027,3.764,1028,3.764,1029,3.764,1030,4.297,1031,3.764,1032,3.764,1033,3.764,1034,3.764,1035,3.764,1036,3.764,1037,4.297,1038,3.209,1039,6.068,1040,3.209,1041,3.764,1042,3.764,1043,3.764,1044,3.209,1045,3.209]],["title/dependencies.html",[311,2.305,1046,2.997]],["body/dependencies.html",[3,0.365,14,0.021,61,0.408,122,0.02,123,0.02,311,3.069,1047,5.73,1048,5.73,1049,5.73,1050,4.885,1051,5.73]],["title/miscellaneous/functions.html",[13,0.941,1052,1.729]],["body/miscellaneous/functions.html",[6,0.35,13,1.202,14,0.02,16,0.72,20,0.231,72,1.158,74,1.004,106,0.35,122,0.019,123,0.019,148,1.969,150,2.634,187,3.438,190,2.953,192,3.994,196,2.267,197,3.756,198,4.613,199,3.438,200,2.747,201,3.756,202,3.756,204,3.756,885,3.994,1052,3.173,1053,5.5,1054,6.39]],["title/index.html",[20,0.126,106,0.191,156,1.605]],["body/index.html",[0,0.078,1,1.51,9,1.317,10,0.621,13,1.065,14,0.023,16,0.637,18,3.089,19,0.823,22,0.618,24,2.347,26,0.752,45,0.912,46,0.293,47,0.871,48,1.005,49,1.004,52,0.707,55,2.137,56,1.34,62,1.576,68,0.201,84,1.013,96,0.464,104,0.08,105,0.655,106,0.263,111,1.693,114,1.515,122,0.012,123,0.012,126,2.594,127,1.322,129,2.691,134,1.346,135,0.871,136,1.891,139,1.932,145,2.609,146,2.207,147,1.566,148,0.871,150,1.166,152,1.768,155,2.579,160,1.932,164,1.631,176,1.964,190,2.347,192,2.579,195,2.503,196,2.207,203,3.045,217,1.631,230,2.64,231,2.061,234,2.818,244,0.922,249,1.035,293,2.433,296,2.579,302,2.579,305,3.117,313,1.932,314,1.515,327,2.813,330,1.24,333,3.047,334,3.518,335,2.137,336,2.411,337,1.515,343,2.609,347,1.768,348,1.631,359,3.117,362,1.768,365,1.631,377,2.411,391,2.411,395,2.411,409,1.768,411,2.433,455,1.515,460,5.047,497,4.153,540,4.565,542,3.518,555,1.515,558,2.609,560,4.847,561,4.153,585,2.38,586,3.538,587,3.327,590,3.837,594,2.137,597,2.579,598,4.07,664,2.137,777,1.768,789,2.411,791,2.411,796,2.818,800,2.137,813,2.411,919,2.818,949,2.411,960,2.411,984,1.932,1023,2.411,1050,3.518,1055,2.828,1056,2.828,1057,2.828,1058,2.828,1059,2.828,1060,2.828,1061,2.828,1062,2.828,1063,2.828,1064,4.126,1065,2.828,1066,2.828,1067,2.828,1068,2.828,1069,2.828,1070,2.828,1071,2.828,1072,2.828,1073,2.828,1074,4.126,1075,4.126,1076,2.828,1077,2.828,1078,2.828,1079,4.126,1080,2.828,1081,2.828,1082,2.828,1083,2.828,1084,2.828,1085,2.828,1086,4.126,1087,2.828,1088,2.828,1089,2.828,1090,2.828,1091,2.828,1092,2.828,1093,2.828,1094,2.828,1095,2.828,1096,2.828,1097,2.828,1098,2.828,1099,2.828,1100,2.828,1101,2.828,1102,2.828,1103,2.828,1104,2.828,1105,2.828,1106,2.828,1107,2.828,1108,2.828,1109,2.828,1110,4.126,1111,2.828,1112,4.126,1113,2.828,1114,2.828,1115,4.126,1116,2.828,1117,2.828,1118,2.828,1119,2.828,1120,2.828,1121,2.828,1122,2.828,1123,2.828,1124,4.126,1125,4.126,1126,2.828,1127,2.828,1128,2.828,1129,2.828,1130,2.411,1131,4.126,1132,2.828,1133,4.126,1134,2.828,1135,2.828,1136,2.828,1137,2.828,1138,2.828,1139,2.828,1140,2.828,1141,2.828,1142,2.828,1143,2.828,1144,4.126,1145,2.828,1146,4.126,1147,2.828,1148,4.126,1149,2.828,1150,2.828,1151,2.828,1152,2.828,1153,2.828,1154,2.828,1155,2.828,1156,2.828,1157,2.828,1158,2.828,1159,4.871,1160,2.828,1161,2.828,1162,4.126,1163,4.126,1164,2.828,1165,2.828,1166,2.828,1167,2.828,1168,2.828,1169,2.828,1170,2.828,1171,2.828,1172,2.828,1173,2.828,1174,2.828,1175,2.828,1176,2.828,1177,2.828,1178,2.828,1179,4.126,1180,2.828,1181,2.828,1182,2.828,1183,5.354,1184,2.828,1185,2.828,1186,2.828,1187,2.828,1188,2.828,1189,2.137,1190,2.411]],["title/license.html",[106,0.191,156,1.605,1189,2.264]],["body/license.html",[4,0.251,14,0.019,64,3.504,122,0.019,123,0.019,127,2.398,136,1.89,155,3.207,349,3.207,854,3.876,999,4.374,1130,5.796,1189,3.876,1190,4.374,1191,6.561,1192,5.13,1193,5.13,1194,6.133,1195,5.13,1196,5.13,1197,5.13,1198,5.13,1199,6.133,1200,5.13,1201,7.234,1202,6.133,1203,6.561,1204,5.13,1205,6.561,1206,6.133,1207,5.13,1208,5.13,1209,5.13,1210,5.13,1211,5.13,1212,5.13,1213,5.13,1214,5.13,1215,5.13,1216,5.13,1217,5.13,1218,5.13,1219,6.133,1220,6.133,1221,5.13,1222,5.13,1223,6.133,1224,5.13,1225,5.13,1226,5.13,1227,5.13,1228,5.13,1229,5.13,1230,5.13,1231,5.13,1232,5.13,1233,5.13,1234,5.13,1235,5.13,1236,5.13,1237,5.13,1238,5.13,1239,5.13,1240,5.13,1241,5.13,1242,5.13,1243,5.13,1244,5.13,1245,5.13]],["title/modules.html",[350,3.046]],["body/modules.html",[14,0.02,122,0.02,123,0.02,350,3.629]],["title/overview.html",[1246,4.155]],["body/overview.html",[0,0.109,14,0.02,104,0.163,122,0.02,123,0.02,857,4.36,1246,4.921,1247,5.771]],["title/miscellaneous/typealiases.html",[1052,1.729,1248,4.303]],["body/miscellaneous/typealiases.html",[13,1.486,14,0.019,20,0.234,46,0.58,122,0.019,123,0.019,511,3.222,512,3.453,519,4.249,576,2.991,577,4.03,591,5.135,797,4.403,1022,4.761,1052,3.222,1249,5.585,1250,5.585,1251,6.797,1252,5.585,1253,5.585]],["title/unit-test.html",[270,2.222,1254,3.284]],["body/unit-test.html",[4,0.18,13,0.802,14,0.023,49,0.756,62,0.85,122,0.015,123,0.015,254,2.504,270,2.115,345,2.292,454,4.337,512,1.964,546,2.77,577,2.292,586,1.964,783,2.77,797,3.382,812,2.77,832,2.77,835,4.738,974,2.504,998,2.77,1001,3.126,1002,4.78,1003,5.346,1006,3.126,1015,3.126,1020,3.126,1030,5.346,1037,5.119,1038,3.126,1040,4.222,1044,3.126,1045,3.126,1254,3.126,1255,3.666,1256,3.666,1257,7.331,1258,3.666,1259,4.952,1260,3.666,1261,3.666,1262,4.952,1263,3.666,1264,3.666,1265,3.666,1266,3.666,1267,3.666,1268,3.666,1269,5.607,1270,7.414,1271,3.666,1272,3.666,1273,4.952,1274,4.952,1275,3.666,1276,3.666,1277,6.271,1278,3.666,1279,3.666,1280,4.952,1281,3.666,1282,4.952,1283,4.952,1284,3.666,1285,3.666,1286,4.952,1287,3.666,1288,3.666,1289,3.666,1290,3.666,1291,3.666,1292,3.666,1293,3.666,1294,3.666,1295,4.952,1296,3.666,1297,6.004,1298,5.607,1299,3.666,1300,3.666,1301,3.666,1302,3.666,1303,3.666,1304,3.666,1305,3.666,1306,4.952,1307,3.666,1308,3.666,1309,3.666,1310,4.952,1311,3.666,1312,4.952,1313,3.666,1314,3.666,1315,3.666,1316,3.666,1317,3.666,1318,3.666,1319,3.666,1320,3.666,1321,3.666,1322,3.666,1323,3.666,1324,3.666,1325,5.607,1326,3.666,1327,3.666,1328,3.666,1329,4.952,1330,3.666,1331,3.666]],["title/miscellaneous/variables.html",[928,2.939,1052,1.729]],["body/miscellaneous/variables.html",[14,0.022,20,0.212,46,0.524,47,2.223,48,1.085,62,1.647,74,0.922,122,0.018,123,0.018,146,2.083,195,3.047,196,2.687,314,3.491,316,3.491,344,3.45,345,3.799,347,3.158,348,2.914,350,3.158,403,4.452,404,2.914,484,3.817,501,4.074,502,4.307,503,4.307,928,3.45,973,3.817,974,4.896,975,4.925,984,4.452,990,4.307,991,4.307,992,4.307,993,4.307,994,4.307,995,4.307,996,4.925,997,4.307,1052,2.914,1332,7.107,1333,5.052,1334,5.052]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["0.005",{"_index":169,"title":{},"body":{"classes/Buckets.html":{}}}],["0.01",{"_index":170,"title":{},"body":{"classes/Buckets.html":{}}}],["0.025",{"_index":171,"title":{},"body":{"classes/Buckets.html":{}}}],["0.05",{"_index":172,"title":{},"body":{"classes/Buckets.html":{}}}],["0.1",{"_index":173,"title":{},"body":{"classes/Buckets.html":{}}}],["0.25",{"_index":174,"title":{},"body":{"classes/Buckets.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":175,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5.9",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":864,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.95",{"_index":867,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0/0",{"_index":1270,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1307,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":176,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["1.0",{"_index":289,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.3",{"_index":642,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.5",{"_index":754,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1/1",{"_index":1006,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":179,"title":{},"body":{"classes/Buckets.html":{},"classes/HdrHistogram.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["100",{"_index":454,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"unit-test.html":{}}}],["100.0",{"_index":449,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["10000",{"_index":161,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["1000000",{"_index":208,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":1161,"title":{},"body":{"index.html":{}}}],["1000000000",{"_index":1133,"title":{},"body":{"index.html":{}}}],["100m",{"_index":1162,"title":{},"body":{"index.html":{}}}],["102",{"_index":1135,"title":{},"body":{"index.html":{}}}],["11",{"_index":399,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["11/11",{"_index":1259,"title":{},"body":{"unit-test.html":{}}}],["11/16",{"_index":1276,"title":{},"body":{"unit-test.html":{}}}],["12",{"_index":855,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["12/12",{"_index":1329,"title":{},"body":{"unit-test.html":{}}}],["12/27",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["12345",{"_index":1118,"title":{},"body":{"index.html":{}}}],["13/15",{"_index":1324,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["13/28",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":1317,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":284,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{}}}],["15/15",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["15/16",{"_index":1308,"title":{},"body":{"unit-test.html":{}}}],["15/17",{"_index":1278,"title":{},"body":{"unit-test.html":{}}}],["15/30",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":1040,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["167/178",{"_index":1304,"title":{},"body":{"unit-test.html":{}}}],["17/17",{"_index":1015,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["171/182",{"_index":1299,"title":{},"body":{"unit-test.html":{}}}],["18/19",{"_index":1331,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":1320,"title":{},"body":{"unit-test.html":{}}}],["19/39",{"_index":1289,"title":{},"body":{"unit-test.html":{}}}],["2.0.0",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["2.5",{"_index":177,"title":{},"body":{"classes/Buckets.html":{}}}],["2/2",{"_index":1002,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":397,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["20/20",{"_index":1312,"title":{},"body":{"unit-test.html":{}}}],["20/35",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["2017",{"_index":1193,"title":{},"body":{"license.html":{}}}],["21",{"_index":1247,"title":{},"body":{"overview.html":{}}}],["21/24",{"_index":1290,"title":{},"body":{"unit-test.html":{}}}],["21/25",{"_index":1316,"title":{},"body":{"unit-test.html":{}}}],["22",{"_index":856,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["22/25",{"_index":1306,"title":{},"body":{"unit-test.html":{}}}],["24.25",{"_index":862,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["25",{"_index":857,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"overview.html":{}}}],["25/28",{"_index":1267,"title":{},"body":{"unit-test.html":{}}}],["25/40",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["26/26",{"_index":1280,"title":{},"body":{"unit-test.html":{}}}],["26/29",{"_index":1263,"title":{},"body":{"unit-test.html":{}}}],["27/27",{"_index":1310,"title":{},"body":{"unit-test.html":{}}}],["28/28",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":455,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["3/3",{"_index":1003,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":1284,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":398,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["30.000",{"_index":315,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["30/45",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":401,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["31/34",{"_index":1274,"title":{},"body":{"unit-test.html":{}}}],["32",{"_index":858,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["32bit",{"_index":495,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":863,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["39/41",{"_index":1325,"title":{},"body":{"unit-test.html":{}}}],["4.390",{"_index":1137,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":1030,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["4/5",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":859,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["41/43",{"_index":1322,"title":{},"body":{"unit-test.html":{}}}],["44",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["46",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["47/47",{"_index":1295,"title":{},"body":{"unit-test.html":{}}}],["49",{"_index":1288,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":178,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["5/5",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1283,"title":{},"body":{"unit-test.html":{}}}],["50",{"_index":849,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["500",{"_index":312,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["50th",{"_index":430,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["51,25",{"_index":866,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["55",{"_index":860,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["55/87",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":861,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["57",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":1020,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["6/9",{"_index":1265,"title":{},"body":{"unit-test.html":{}}}],["60",{"_index":281,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["62",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["64bit",{"_index":493,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["66",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["67",{"_index":1264,"title":{},"body":{"unit-test.html":{}}}],["68",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["69",{"_index":1275,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":1037,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["75",{"_index":832,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["75th",{"_index":414,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["8",{"_index":865,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["8/23",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":1038,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["80",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["80/86",{"_index":1303,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":1318,"title":{},"body":{"unit-test.html":{}}}],["83",{"_index":1282,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":1315,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":1300,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":1323,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":1277,"title":{},"body":{"unit-test.html":{}}}],["89",{"_index":1266,"title":{},"body":{"unit-test.html":{}}}],["9",{"_index":400,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["9/11",{"_index":1319,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":1269,"title":{},"body":{"unit-test.html":{}}}],["90",{"_index":1262,"title":{},"body":{"unit-test.html":{}}}],["90/105",{"_index":1301,"title":{},"body":{"unit-test.html":{}}}],["91",{"_index":1273,"title":{},"body":{"unit-test.html":{}}}],["91/95",{"_index":1291,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":1302,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":1298,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":835,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95/99",{"_index":1287,"title":{},"body":{"unit-test.html":{}}}],["95th",{"_index":418,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["96",{"_index":1286,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":838,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["98th",{"_index":421,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["99",{"_index":844,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9",{"_index":841,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9th",{"_index":424,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["99th",{"_index":427,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["abov",{"_index":1218,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/Logger.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":513,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accord",{"_index":193,"title":{},"body":{"classes/Clock.html":{},"classes/HdrHistogram.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["action",{"_index":1239,"title":{},"body":{"license.html":{}}}],["actual",{"_index":237,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":777,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"index.html":{}}}],["add",{"_index":243,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{}}}],["add(valu",{"_index":490,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration(dur",{"_index":938,"title":{},"body":{"classes/StopWatch.html":{}}}],["addlistener(listen",{"_index":627,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistri",{"_index":798,"title":{},"body":{"classes/MetricReporter.html":{}}}],["addmetricregistry(metricregistri",{"_index":802,"title":{},"body":{"classes/MetricReporter.html":{}}}],["again",{"_index":596,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["alias",{"_index":1249,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":1185,"title":{},"body":{"index.html":{}}}],["alpha",{"_index":258,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_sampler",{"_index":262,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_sampler",{"_index":263,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_sampler",{"_index":260,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_sampler",{"_index":261,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_sampler",{"_index":264,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_sampler",{"_index":265,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alway",{"_index":217,"title":{},"body":{"classes/Clock.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{}}}],["analyz",{"_index":1073,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1212,"title":{},"body":{"license.html":{}}}],["anerror",{"_index":358,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["applic",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"index.html":{}}}],["arg",{"_index":544,"title":{},"body":{"interfaces/Logger.html":{}}}],["aris",{"_index":1243,"title":{},"body":{"license.html":{}}}],["around",{"_index":1160,"title":{},"body":{"index.html":{}}}],["arr",{"_index":766,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":767,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":768,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":244,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["array(count",{"_index":162,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["arraylength",{"_index":1113,"title":{},"body":{"index.html":{}}}],["arraylength.getvalue();histogram",{"_index":1123,"title":{},"body":{"index.html":{}}}],["arraylengthgaug",{"_index":1108,"title":{},"body":{"index.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":1114,"title":{},"body":{"index.html":{}}}],["associ",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"license.html":{}}}],["assum",{"_index":199,"title":{},"body":{"classes/Clock.html":{},"classes/HdrHistogram.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["asynchron",{"_index":958,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribut",{"_index":515,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["author",{"_index":1232,"title":{},"body":{"license.html":{}}}],["averag",{"_index":257,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.t",{"_index":254,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:103",{"_index":294,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:111",{"_index":277,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:134",{"_index":297,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:144",{"_index":300,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:155",{"_index":299,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:168",{"_index":310,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:182",{"_index":301,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":816,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":817,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:37",{"_index":819,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:45",{"_index":818,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:57",{"_index":282,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:58",{"_index":283,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:59",{"_index":287,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":288,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":285,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":286,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:71",{"_index":278,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:79",{"_index":291,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:87",{"_index":292,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:95",{"_index":290,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["avg",{"_index":266,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":1170,"title":{},"body":{"index.html":{}}}],["b",{"_index":164,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{}}}],["basemetr",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["basemetric.count",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["basenam",{"_index":592,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basic",{"_index":1063,"title":{},"body":{"index.html":{}}}],["begin",{"_index":897,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["below",{"_index":396,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["between",{"_index":365,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["book",{"_index":1067,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":614,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["boundari",{"_index":138,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":1255,"title":{},"body":{"unit-test.html":{}}}],["bucket",{"_index":128,"title":{"classes/Buckets.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["bucketcount",{"_index":124,"title":{"interfaces/BucketCounting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["buckets(boundari",{"_index":163,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buckets=new",{"_index":453,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["bucketwidth",{"_index":157,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["buffer",{"_index":1183,"title":{},"body":{"index.html":{}}}],["build",{"_index":624,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["c",{"_index":1192,"title":{},"body":{"license.html":{}}}],["calcul",{"_index":255,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":411,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metered.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["callcount",{"_index":1140,"title":{},"body":{"index.html":{}}}],["callcount.get15minuter",{"_index":1145,"title":{},"body":{"index.html":{}}}],["callcount.get1minuter",{"_index":1149,"title":{},"body":{"index.html":{}}}],["callcount.get5minuter",{"_index":1147,"title":{},"body":{"index.html":{}}}],["callcount.getcount",{"_index":1143,"title":{},"body":{"index.html":{}}}],["callcount.getmeanrate();tim",{"_index":1150,"title":{},"body":{"index.html":{}}}],["callcount.mark(1",{"_index":1142,"title":{},"body":{"index.html":{}}}],["callstat",{"_index":1151,"title":{},"body":{"index.html":{}}}],["callstats.addduration(100",{"_index":1153,"title":{},"body":{"index.html":{}}}],["callstats.get15minuter",{"_index":1155,"title":{},"body":{"index.html":{}}}],["callstats.get1minuter",{"_index":1157,"title":{},"body":{"index.html":{}}}],["callstats.get5minuter",{"_index":1156,"title":{},"body":{"index.html":{}}}],["callstats.getcount",{"_index":1154,"title":{},"body":{"index.html":{}}}],["callstats.getmeanr",{"_index":1158,"title":{},"body":{"index.html":{}}}],["callstats.getsnapshot",{"_index":1159,"title":{},"body":{"index.html":{}}}],["callstats.newstopwatch",{"_index":1164,"title":{},"body":{"index.html":{}}}],["callstats.tim",{"_index":1168,"title":{},"body":{"index.html":{}}}],["callstats.timeasync(async",{"_index":1171,"title":{},"body":{"index.html":{}}}],["capac",{"_index":234,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["carbon",{"_index":1080,"title":{},"body":{"index.html":{}}}],["catch",{"_index":407,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["catch((err",{"_index":961,"title":{},"body":{"classes/StopWatch.html":{}}}],["caus",{"_index":1104,"title":{},"body":{"index.html":{}}}],["chang",{"_index":551,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["charg",{"_index":1198,"title":{},"body":{"license.html":{}}}],["check",{"_index":521,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["child",{"_index":741,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["cint64",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["cint64\").int64",{"_index":503,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":1235,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["clock",{"_index":186,"title":{"classes/Clock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["clock:49",{"_index":918,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=this.defaultclock",{"_index":721,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["code",{"_index":969,"title":{},"body":{"interfaces/Taggable.html":{}}}],["collect",{"_index":249,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["collection.length",{"_index":524,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.s",{"_index":527,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["combin",{"_index":936,"title":{},"body":{"classes/StopWatch.html":{}}}],["commonli",{"_index":11,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["compon",{"_index":216,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["condit",{"_index":1217,"title":{},"body":{"license.html":{}}}],["config",{"_index":373,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/StopWatch.html":{}}}],["configur",{"_index":1075,"title":{},"body":{"index.html":{}}}],["connect",{"_index":1245,"title":{},"body":{"license.html":{}}}],["consid",{"_index":853,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["consol",{"_index":1079,"title":{},"body":{"index.html":{}}}],["console.log(`ad",{"_index":1173,"title":{},"body":{"index.html":{}}}],["console.log(`remov",{"_index":1174,"title":{},"body":{"index.html":{}}}],["const",{"_index":111,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["constructor(alpha",{"_index":275,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(boundari",{"_index":167,"title":{},"body":{"classes/Buckets.html":{}}}],["constructor(clock",{"_index":923,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(initi",{"_index":488,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listen",{"_index":793,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(lowest",{"_index":354,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["constructor(maxs",{"_index":232,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":582,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(nam",{"_index":336,"title":{},"body":{"interfaces/Gauge.html":{},"index.html":{}}}],["constructor(nanosecondsperunit",{"_index":979,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(priv",{"_index":410,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(refer",{"_index":468,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["constructor(valu",{"_index":827,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["contain",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"interfaces/Metric.html":{}}}],["container.t",{"_index":546,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{},"unit-test.html":{}}}],["container.ts:19",{"_index":549,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:29",{"_index":547,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:39",{"_index":554,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["container.ts:49",{"_index":557,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["continu",{"_index":375,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["contract",{"_index":1240,"title":{},"body":{"license.html":{}}}],["conveni",{"_index":921,"title":{},"body":{"classes/StopWatch.html":{}}}],["convert",{"_index":499,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":977,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(valu",{"_index":981,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copi",{"_index":1130,"title":{},"body":{"index.html":{},"license.html":{}}}],["copyright",{"_index":1191,"title":{},"body":{"license.html":{}}}],["correspond",{"_index":140,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["corrspond",{"_index":626,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["count",{"_index":126,"title":{"interfaces/Counting.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["countabl",{"_index":143,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["counter",{"_index":24,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["counter(nam",{"_index":716,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.setgroup(group",{"_index":717,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["coverag",{"_index":998,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":153,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["current",{"_index":134,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{}}}],["damag",{"_index":1236,"title":{},"body":{"license.html":{}}}],["data",{"_index":1074,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":212,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["day",{"_index":996,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":1202,"title":{},"body":{"license.html":{}}}],["debug",{"_index":541,"title":{},"body":{"interfaces/Logger.html":{}}}],["decim",{"_index":363,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["default",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultclock",{"_index":622,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultnamefactory(basenam",{"_index":621,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultreservoir",{"_index":220,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defin",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["delet",{"_index":633,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["depend",{"_index":311,"title":{"dependencies.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"dependencies.html":{}}}],["deprec",{"_index":640,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["description=nul",{"_index":714,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["determin",{"_index":188,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{}}}],["deviat",{"_index":444,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":885,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(on",{"_index":204,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["differ",{"_index":302,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["directgaug",{"_index":613,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["distribut",{"_index":155,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{},"license.html":{}}}],["divid",{"_index":304,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["document",{"_index":999,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":203,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["dure",{"_index":1186,"title":{},"body":{"index.html":{}}}],["e",{"_index":408,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["e.g",{"_index":147,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["each",{"_index":395,"title":{},"body":{"classes/HdrHistogram.html":{},"index.html":{}}}],["edg",{"_index":394,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["elaps",{"_index":197,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elasticsearch",{"_index":1082,"title":{},"body":{"index.html":{}}}],["elder",{"_index":201,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["element",{"_index":1182,"title":{},"body":{"index.html":{}}}],["embed",{"_index":941,"title":{},"body":{"classes/StopWatch.html":{}}}],["empti",{"_index":439,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["end",{"_index":151,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["equal",{"_index":985,"title":{},"body":{"classes/TimeUnit.html":{}}}],["err",{"_index":962,"title":{},"body":{"classes/StopWatch.html":{}}}],["error",{"_index":542,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["error(\"modul",{"_index":457,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["errorcount",{"_index":1101,"title":{},"body":{"index.html":{}}}],["errorcount.getcount",{"_index":1106,"title":{},"body":{"index.html":{}}}],["errorcount.incr",{"_index":1105,"title":{},"body":{"index.html":{}}}],["errorcount.increment(1",{"_index":1103,"title":{},"body":{"index.html":{}}}],["errorcount.reset();gaug",{"_index":1107,"title":{},"body":{"index.html":{}}}],["event",{"_index":127,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{},"license.html":{}}}],["everyth",{"_index":142,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["exampl",{"_index":19,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["execut",{"_index":377,"title":{},"body":{"classes/HdrHistogram.html":{},"index.html":{}}}],["exponenti",{"_index":165,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponential(initi",{"_index":181,"title":{},"body":{"classes/Buckets.html":{}}}],["exponentiallyweightedmovingaverag",{"_index":252,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":103,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["express",{"_index":1225,"title":{},"body":{"license.html":{}}}],["extend",{"_index":105,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["extractor",{"_index":529,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":956,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":182,"title":{},"body":{"classes/Buckets.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factori",{"_index":623,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["few",{"_index":1093,"title":{},"body":{"index.html":{}}}],["field",{"_index":1180,"title":{},"body":{"index.html":{}}}],["figur",{"_index":355,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["figures=3",{"_index":452,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["filter((metr",{"_index":770,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.iscount",{"_index":646,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgaug",{"_index":652,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":655,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismet",{"_index":658,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecount",{"_index":666,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istim",{"_index":661,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["final",{"_index":556,"title":{},"body":{"interfaces/MetadataContainer.html":{},"classes/StopWatch.html":{}}}],["find",{"_index":764,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricadded(nam",{"_index":778,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved(nam",{"_index":781,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":200,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["fit",{"_index":1228,"title":{},"body":{"license.html":{}}}],["fo",{"_index":824,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/Summarizing.html":{}}}],["follow",{"_index":854,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((registr",{"_index":647,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["found",{"_index":458,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["free",{"_index":1197,"title":{},"body":{"license.html":{}}}],["function",{"_index":13,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["function'",{"_index":952,"title":{},"body":{"classes/StopWatch.html":{}}}],["furnish",{"_index":1215,"title":{},"body":{"license.html":{}}}],["futur",{"_index":550,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["gather",{"_index":1179,"title":{},"body":{"index.html":{}}}],["gaug",{"_index":327,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"index.html":{}}}],["gauge.t",{"_index":512,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":537,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":894,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugeregistr",{"_index":616,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gener",{"_index":620,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generatename(nam",{"_index":773,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["get",{"_index":106,"title":{"index.html":{},"license.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get15minuter",{"_index":562,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get1minuter",{"_index":563,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get5minuter",{"_index":564,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentil",{"_index":416,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentil",{"_index":419,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentil",{"_index":422,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentil",{"_index":425,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentil",{"_index":428,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getalpha",{"_index":271,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverag",{"_index":272,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":298,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbucket",{"_index":131,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/StopWatch.html":{}}}],["getbyname(nam",{"_index":769,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":132,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["getcounter(nam",{"_index":675,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":643,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbynam",{"_index":674,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname(nam",{"_index":688,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdefaultclock",{"_index":637,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescript",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["getfirstbyname(nam",{"_index":765,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaug",{"_index":651,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauge(nam",{"_index":677,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":650,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbynam",{"_index":676,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname(nam",{"_index":690,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgroup",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["gethistogram",{"_index":654,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogram(nam",{"_index":680,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":653,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbynam",{"_index":679,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname(nam",{"_index":692,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmax",{"_index":434,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":441,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanr",{"_index":565,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["getmedian",{"_index":431,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmet",{"_index":657,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetadata",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["getmetadata(nam",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmetadatamap",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["getmeter(nam",{"_index":682,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":656,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbynam",{"_index":681,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname(nam",{"_index":693,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetr",{"_index":667,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetric(nam",{"_index":672,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetriclist",{"_index":668,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetricsbynam",{"_index":671,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsbyname(nam",{"_index":686,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmin",{"_index":437,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":665,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountersbyname(nam",{"_index":689,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getnam",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["getnanosecondsperunit",{"_index":978,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getsnapshot",{"_index":352,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{}}}],["getstddev",{"_index":445,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":353,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["gettag(nam",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["gettim",{"_index":660,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimer(nam",{"_index":684,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":659,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbynam",{"_index":683,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname(nam",{"_index":694,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getunit",{"_index":273,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalu",{"_index":330,"title":{},"body":{"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["getvalue(0.5",{"_index":848,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":831,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":834,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":837,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":843,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":840,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantil",{"_index":447,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["give",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["given",{"_index":317,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/TimeUnit.html":{}}}],["grant",{"_index":1196,"title":{},"body":{"license.html":{}}}],["graphit",{"_index":1081,"title":{},"body":{"index.html":{}}}],["group",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["group=nul",{"_index":713,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupabl",{"_index":98,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["hdr",{"_index":348,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hdrhistogram",{"_index":343,"title":{"classes/HdrHistogram.html":{}},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["hdrhistogram(lowest",{"_index":730,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["hdrsnapshot",{"_index":369,"title":{"classes/HdrSnapshot.html":{}},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"coverage.html":{}}}],["hdrsnapshot(thi",{"_index":464,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["here",{"_index":553,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["herebi",{"_index":1195,"title":{},"body":{"license.html":{}}}],["high",{"_index":306,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":146,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["histogram(reservoir",{"_index":735,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.setgroup(group",{"_index":731,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["histogram.t",{"_index":345,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["histogram.ts:109",{"_index":475,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:120",{"_index":478,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:130",{"_index":482,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:140",{"_index":483,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:151",{"_index":476,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:162",{"_index":479,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:173",{"_index":480,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:200",{"_index":368,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram.ts:208",{"_index":356,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram.ts:247",{"_index":381,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram.ts:257",{"_index":382,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram.ts:26",{"_index":469,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:43",{"_index":470,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:54",{"_index":471,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:65",{"_index":472,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:76",{"_index":473,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:87",{"_index":474,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram.ts:98",{"_index":477,"title":{},"body":{"classes/HdrSnapshot.html":{}}}],["histogram:101",{"_index":390,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:118",{"_index":388,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:128",{"_index":386,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:138",{"_index":389,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:148",{"_index":385,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:158",{"_index":387,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:30",{"_index":378,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:38",{"_index":374,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:46",{"_index":380,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:54",{"_index":371,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["histogram:62",{"_index":372,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["holder",{"_index":1233,"title":{},"body":{"license.html":{}}}],["hour",{"_index":975,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hrd",{"_index":412,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["http://metrics.dropwizard.io",{"_index":1057,"title":{},"body":{"index.html":{}}}],["id",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["identifi",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["impli",{"_index":1226,"title":{},"body":{"license.html":{}}}],["import",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["includ",{"_index":1205,"title":{},"body":{"license.html":{}}}],["inclus",{"_index":366,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["increas",{"_index":391,"title":{},"body":{"classes/HdrHistogram.html":{},"index.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(metr",{"_index":706,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":700,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["influx",{"_index":1083,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["inherit",{"_index":370,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/StdClock.html":{}}}],["initi",{"_index":184,"title":{},"body":{"classes/Buckets.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{}}}],["initial=0",{"_index":504,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["insert",{"_index":786,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":460,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"index.html":{}}}],["instal",{"_index":359,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"index.html":{}}}],["instanc",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["instance.getmetr",{"_index":619,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalu",{"_index":615,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":605,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalu",{"_index":617,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":604,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instead",{"_index":644,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["int64",{"_index":501,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initi",{"_index":506,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":485,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapp",{"_index":379,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/HdrHistogram.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["integ",{"_index":497,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{}}}],["interfac",{"_index":104,"title":{"interfaces/BucketCounting.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["intern",{"_index":949,"title":{},"body":{"classes/StopWatch.html":{},"index.html":{}}}],["interv",{"_index":267,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["invoc",{"_index":930,"title":{},"body":{"classes/StopWatch.html":{}}}],["invok",{"_index":776,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["iscounter(inst",{"_index":603,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isgauge(inst",{"_index":612,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram(inst",{"_index":609,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface(collect",{"_index":522,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface(collect",{"_index":525,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismeter(inst",{"_index":610,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset(inst",{"_index":618,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter(inst",{"_index":606,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(quantil",{"_index":887,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["ispuremonotonecounter(inst",{"_index":607,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["issizeattributeinterface(collect",{"_index":526,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface(collect",{"_index":528,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istimer(inst",{"_index":611,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it'",{"_index":500,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["javascript",{"_index":494,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["keep",{"_index":784,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["key",{"_index":548,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["kind",{"_index":1224,"title":{},"body":{"license.html":{}}}],["last",{"_index":303,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["latenc",{"_index":1124,"title":{},"body":{"index.html":{}}}],["length",{"_index":514,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["lengthattributeinterfac",{"_index":510,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterfac",{"_index":516,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["liabil",{"_index":1237,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":1234,"title":{},"body":{"license.html":{}}}],["lib/.../clock.t",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../hdr",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../int64.t",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../logg",{"_index":1252,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../metr",{"_index":1250,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../siz",{"_index":1253,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../tim",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/clock.t",{"_index":187,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/metrics/clock.ts:49",{"_index":191,"title":{},"body":{"classes/Clock.html":{}}}],["lib/metrics/clock.ts:68",{"_index":917,"title":{},"body":{"classes/StdClock.html":{}}}],["lib/metrics/counter.t",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/counting.t",{"_index":125,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"coverage.html":{}}}],["lib/metrics/counting.ts:120",{"_index":133,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:130",{"_index":137,"title":{},"body":{"interfaces/BucketCounting.html":{}}}],["lib/metrics/counting.ts:20",{"_index":219,"title":{},"body":{"interfaces/Counting.html":{}}}],["lib/metrics/counting.ts:43",{"_index":185,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:67",{"_index":183,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:88",{"_index":168,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/counting.ts:97",{"_index":180,"title":{},"body":{"classes/Buckets.html":{}}}],["lib/metrics/gauge.t",{"_index":328,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{}}}],["lib/metrics/gauge.ts:21",{"_index":331,"title":{},"body":{"interfaces/Gauge.html":{}}}],["lib/metrics/groupable.t",{"_index":340,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{}}}],["lib/metrics/groupable.ts:18",{"_index":341,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/groupable.ts:26",{"_index":342,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/hdr",{"_index":344,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/histogram.t",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/int64.t",{"_index":484,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/int64.ts:18",{"_index":489,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:36",{"_index":491,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:46",{"_index":492,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:56",{"_index":498,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/logg",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/logger.t",{"_index":539,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["lib/metrics/metadata",{"_index":545,"title":{},"body":{"interfaces/MetadataContainer.html":{},"coverage.html":{}}}],["lib/metrics/meter.t",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/metered.t",{"_index":559,"title":{},"body":{"interfaces/Metered.html":{},"coverage.html":{}}}],["lib/metrics/metered.ts:20",{"_index":569,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:28",{"_index":566,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:36",{"_index":568,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:44",{"_index":567,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:52",{"_index":570,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metr",{"_index":576,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/metric.t",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["lib/metrics/metric.ts:103",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:111",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:119",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:121",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:125",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:129",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:135",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:139",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:143",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:147",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:151",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:155",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:159",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:163",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:167",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:171",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:175",{"_index":83,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:179",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:23",{"_index":572,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:31",{"_index":574,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:39",{"_index":571,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:47",{"_index":573,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:71",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:79",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:87",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:95",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/mov",{"_index":253,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.t",{"_index":221,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.ts:110",{"_index":240,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:133",{"_index":900,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:141",{"_index":899,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:149",{"_index":898,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:167",{"_index":901,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:179",{"_index":903,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:19",{"_index":820,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:193",{"_index":902,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:27",{"_index":822,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:35",{"_index":821,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:57",{"_index":235,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:65",{"_index":233,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:83",{"_index":236,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:95",{"_index":242,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/s",{"_index":511,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/sampling.t",{"_index":823,"title":{},"body":{"interfaces/Sampling.html":{},"coverage.html":{}}}],["lib/metrics/sampling.ts:19",{"_index":825,"title":{},"body":{"interfaces/Sampling.html":{}}}],["lib/metrics/snapshot.t",{"_index":826,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["lib/metrics/snapshot.ts:105",{"_index":913,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:114",{"_index":914,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:134",{"_index":828,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:153",{"_index":830,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:163",{"_index":833,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:17",{"_index":904,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:173",{"_index":836,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:183",{"_index":839,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:193",{"_index":842,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:203",{"_index":847,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:213",{"_index":845,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:223",{"_index":850,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:233",{"_index":868,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:243",{"_index":869,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:25",{"_index":905,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:253",{"_index":846,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:269",{"_index":851,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:303",{"_index":852,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:33",{"_index":906,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:41",{"_index":907,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:49",{"_index":908,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:57",{"_index":911,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:65",{"_index":909,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:73",{"_index":912,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:81",{"_index":915,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:89",{"_index":916,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:97",{"_index":910,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/summarizing.t",{"_index":965,"title":{},"body":{"interfaces/Summarizing.html":{},"coverage.html":{}}}],["lib/metrics/summarizing.ts:18",{"_index":966,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["lib/metrics/taggable.t",{"_index":967,"title":{},"body":{"interfaces/Taggable.html":{},"coverage.html":{}}}],["lib/metrics/taggable.ts:17",{"_index":970,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:26",{"_index":968,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:35",{"_index":972,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:43",{"_index":971,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/tim",{"_index":973,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/timer.t",{"_index":920,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{}}}],["lib/metrics/timer.ts:31",{"_index":925,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:39",{"_index":926,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:47",{"_index":924,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:66",{"_index":927,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:76",{"_index":929,"title":{},"body":{"classes/StopWatch.html":{}}}],["librari",{"_index":540,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["licens",{"_index":1189,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":1206,"title":{},"body":{"license.html":{}}}],["line",{"_index":1256,"title":{},"body":{"unit-test.html":{}}}],["linear",{"_index":154,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["linear(start",{"_index":159,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["link",{"_index":144,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["list",{"_index":662,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["listen",{"_index":587,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["listener.metricadded(nam",{"_index":780,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(nam",{"_index":782,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.t",{"_index":783,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{},"unit-test.html":{}}}],["listener.ts:20",{"_index":790,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:29",{"_index":792,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["logger",{"_index":538,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["loggerreport",{"_index":1023,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["loggerreporter(global.consol",{"_index":1088,"title":{},"body":{"index.html":{}}}],["logic",{"_index":194,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["lower",{"_index":891,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["lowest",{"_index":360,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["lowest=1",{"_index":450,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m",{"_index":762,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.getnam",{"_index":761,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":699,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getnam",{"_index":751,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":1148,"title":{},"body":{"index.html":{}}}],["m15",{"_index":1144,"title":{},"body":{"index.html":{}}}],["m5",{"_index":1146,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":364,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mamang",{"_index":685,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manag",{"_index":599,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mani",{"_index":1066,"title":{},"body":{"index.html":{}}}],["manual",{"_index":630,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["map",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["map((m",{"_index":698,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metr",{"_index":772,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((registr",{"_index":663,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map.set(registration.nam",{"_index":648,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mark",{"_index":149,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["match",{"_index":123,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math.exp",{"_index":280,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(po",{"_index":893,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(po",{"_index":889,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":886,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":238,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["max=100",{"_index":451,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["maximum",{"_index":224,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["maxsiz",{"_index":228,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":129,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Metered.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["meant",{"_index":1058,"title":{},"body":{"index.html":{}}}],["measur",{"_index":560,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["memberof",{"_index":107,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["merchant",{"_index":1227,"title":{},"body":{"license.html":{}}}],["merg",{"_index":1209,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["metadatacontain",{"_index":99,"title":{"interfaces/MetadataContainer.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["meter",{"_index":558,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["meter(clock",{"_index":725,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.setgroup(group",{"_index":726,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["method",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["metric",{"_index":9,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/Sampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"index.html":{}}}],["metric.getgroup",{"_index":774,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getgroup()}.${nam",{"_index":775,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":750,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":759,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.metricref",{"_index":670,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.nam",{"_index":771,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setdescription(descript",{"_index":744,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":743,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(nam",{"_index":757,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricad",{"_index":787,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(nam",{"_index":789,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricnam",{"_index":593,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref",{"_index":581,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getnam",{"_index":602,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistr",{"_index":575,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{}}}],["metricregistration(metr",{"_index":747,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistri",{"_index":598,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metricregistry.defaultnamefactori",{"_index":625,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(inst",{"_index":608,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metr",{"_index":745,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metr",{"_index":749,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylisten",{"_index":585,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistr",{"_index":597,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistration(listen",{"_index":629,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricremov",{"_index":788,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(nam",{"_index":791,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricreport",{"_index":796,"title":{"classes/MetricReporter.html":{}},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metrics.foreach((metr",{"_index":705,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":697,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics/lib/metrics/clock.t",{"_index":1258,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counter.t",{"_index":1260,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counting.t",{"_index":1261,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/gauge.t",{"_index":1268,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/groupable.t",{"_index":1271,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/hdr",{"_index":1272,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/histogram.t",{"_index":1279,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/int64.t",{"_index":1281,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logg",{"_index":1285,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logger.t",{"_index":1292,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metadata",{"_index":1293,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/meter.t",{"_index":1294,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metered.t",{"_index":1296,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metr",{"_index":1297,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metric.t",{"_index":1305,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/mov",{"_index":1309,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reservoir.t",{"_index":1311,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/s",{"_index":1314,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/sampling.t",{"_index":1313,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/snapshot.t",{"_index":1321,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/summarizing.t",{"_index":1326,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/taggable.t",{"_index":1327,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/tim",{"_index":1328,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/timer.t",{"_index":1330,"title":{},"body":{"unit-test.html":{}}}],["metrics[0",{"_index":703,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricset",{"_index":588,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{}}}],["microsecond",{"_index":984,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":986,"title":{},"body":{"classes/TimeUnit.html":{}}}],["millisecond",{"_index":195,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["min",{"_index":436,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["minimum",{"_index":871,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["minut",{"_index":316,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["miscellan",{"_index":1052,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1190,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":1257,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":1208,"title":{},"body":{"license.html":{}}}],["modul",{"_index":350,"title":{"modules.html":{}},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["monitor",{"_index":1055,"title":{},"body":{"index.html":{}}}],["monoton",{"_index":664,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["monotonecount",{"_index":145,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["monotonecounter(nam",{"_index":720,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["more",{"_index":307,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["move",{"_index":256,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverag",{"_index":259,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["multipl",{"_index":580,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["multipli",{"_index":295,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["myarray",{"_index":1112,"title":{},"body":{"index.html":{}}}],["myarray.push(1",{"_index":1120,"title":{},"body":{"index.html":{}}}],["myarray.push(2",{"_index":1121,"title":{},"body":{"index.html":{}}}],["myarray.push(3",{"_index":1122,"title":{},"body":{"index.html":{}}}],["name",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namefactori",{"_index":591,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["nan",{"_index":433,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":196,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":983,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanosecond",{"_index":325,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanosecondsperunit",{"_index":976,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nativ",{"_index":347,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram",{"_index":403,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nativehistogram(lowest",{"_index":462,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["necessari",{"_index":1065,"title":{},"body":{"index.html":{}}}],["need",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["new",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["newcounter(nam",{"_index":715,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhdrhistogram",{"_index":729,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhistogram",{"_index":733,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmet",{"_index":723,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter(nam",{"_index":719,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newstopwatch",{"_index":963,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtim",{"_index":736,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["node",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["nodej",{"_index":1060,"title":{},"body":{"index.html":{}}}],["none",{"_index":402,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["noninfring",{"_index":1231,"title":{},"body":{"license.html":{}}}],["notic",{"_index":1219,"title":{},"body":{"license.html":{}}}],["now",{"_index":1188,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1061,"title":{},"body":{"index.html":{}}}],["null",{"_index":404,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Taggable.html":{},"miscellaneous/variables.html":{}}}],["num",{"_index":486,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["object",{"_index":135,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{}}}],["obtain",{"_index":1200,"title":{},"body":{"license.html":{}}}],["old",{"_index":226,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["on",{"_index":150,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["one.millisecond",{"_index":207,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanosecond",{"_index":206,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalu",{"_index":205,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["oper",{"_index":376,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["option",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":895,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["otherwis",{"_index":1242,"title":{},"body":{"license.html":{}}}],["out",{"_index":1244,"title":{},"body":{"license.html":{}}}],["over",{"_index":1077,"title":{},"body":{"index.html":{}}}],["overal",{"_index":384,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["overview",{"_index":1246,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":1046,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":108,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["paramet",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1229,"title":{},"body":{"license.html":{}}}],["pass",{"_index":293,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["per",{"_index":313,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["percentil",{"_index":415,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["permiss",{"_index":1194,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1214,"title":{},"body":{"license.html":{}}}],["person",{"_index":1199,"title":{},"body":{"license.html":{}}}],["pleas",{"_index":459,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["po",{"_index":888,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["point",{"_index":192,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pool",{"_index":954,"title":{},"body":{"classes/StopWatch.html":{}}}],["portion",{"_index":1222,"title":{},"body":{"license.html":{}}}],["posit",{"_index":247,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["possibl",{"_index":361,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["precis",{"_index":160,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["precision=10000",{"_index":158,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["previous",{"_index":806,"title":{},"body":{"classes/MetricReporter.html":{}}}],["print",{"_index":1086,"title":{},"body":{"index.html":{}}}],["privat",{"_index":22,"title":{},"body":{"classes/BaseMetric.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["progress",{"_index":189,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["prometheu",{"_index":1084,"title":{},"body":{"index.html":{}}}],["promis",{"_index":960,"title":{},"body":{"classes/StopWatch.html":{},"index.html":{}}}],["properti",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["protect",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"classes/HdrHistogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["provid",{"_index":349,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"license.html":{}}}],["proxi",{"_index":578,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["public",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["publish",{"_index":1210,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":1230,"title":{},"body":{"license.html":{}}}],["pushgateway",{"_index":1085,"title":{},"body":{"index.html":{}}}],["quantil",{"_index":481,"title":{},"body":{"classes/HdrSnapshot.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["queue",{"_index":334,"title":{},"body":{"interfaces/Gauge.html":{},"index.html":{}}}],["queuesiz",{"_index":1110,"title":{},"body":{"index.html":{}}}],["queuesize.getvalu",{"_index":1119,"title":{},"body":{"index.html":{}}}],["queuesize.setvalue(12345",{"_index":1117,"title":{},"body":{"index.html":{}}}],["random",{"_index":246,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["rang",{"_index":152,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/HdrHistogram.html":{},"index.html":{}}}],["rate",{"_index":296,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reach",{"_index":225,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/HdrHistogram.html":{},"interfaces/Metric.html":{}}}],["record",{"_index":362,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["refer",{"_index":409,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["referenc",{"_index":413,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["reflect",{"_index":552,"title":{},"body":{"interfaces/MetadataContainer.html":{}}}],["regardless",{"_index":329,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["regist",{"_index":579,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register",{"_index":753,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register(nam",{"_index":756,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetr",{"_index":755,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetric(metr",{"_index":742,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registr",{"_index":594,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["registration.metricref",{"_index":649,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metr",{"_index":1178,"title":{},"body":{"index.html":{}}}],["registri",{"_index":586,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["registry.addlistener(new",{"_index":1175,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"newalloc",{"_index":1187,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"request",{"_index":1177,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"requestcount",{"_index":1096,"title":{},"body":{"index.html":{}}}],["registry.newhdrhistogram(\"requestlat",{"_index":1134,"title":{},"body":{"index.html":{}}}],["registry.newhistogram(\"requestlat",{"_index":1126,"title":{},"body":{"index.html":{}}}],["registry.newmeter(\"callcount",{"_index":1141,"title":{},"body":{"index.html":{}}}],["registry.newmonotonecounter(\"errorcount",{"_index":1102,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"callstat",{"_index":1152,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"request",{"_index":1089,"title":{},"body":{"index.html":{}}}],["registry.registermetric(arraylength",{"_index":1116,"title":{},"body":{"index.html":{}}}],["registry.registermetric(capac",{"_index":1184,"title":{},"body":{"index.html":{}}}],["registry.registermetric(queues",{"_index":1115,"title":{},"body":{"index.html":{}}}],["registry.t",{"_index":577,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:25",{"_index":794,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:41",{"_index":795,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:62",{"_index":584,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:69",{"_index":583,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["remov",{"_index":555,"title":{},"body":{"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["removecounter(nam",{"_index":707,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegauge(nam",{"_index":709,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram(nam",{"_index":710,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener(listen",{"_index":631,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetadata",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["removemetadata(nam",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["removemeter(nam",{"_index":711,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetr",{"_index":695,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetric(nam",{"_index":696,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistri",{"_index":799,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetricregistry(metricregistri",{"_index":804,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetrics(nam",{"_index":704,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removetag",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["removetag(nam",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["removetimer(nam",{"_index":712,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["replac",{"_index":227,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":333,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricReporter.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":1090,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":1091,"title":{},"body":{"index.html":{}}}],["reporter.t",{"_index":797,"title":{},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:21",{"_index":801,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:29",{"_index":807,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:37",{"_index":808,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:45",{"_index":803,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:55",{"_index":805,"title":{},"body":{"classes/MetricReporter.html":{}}}],["repres",{"_index":141,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["represent",{"_index":102,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["request",{"_index":561,"title":{},"body":{"interfaces/Metered.html":{},"index.html":{}}}],["requestcount",{"_index":1095,"title":{},"body":{"index.html":{}}}],["requestcount.decrement(1",{"_index":1098,"title":{},"body":{"index.html":{}}}],["requestcount.getcount",{"_index":1099,"title":{},"body":{"index.html":{}}}],["requestcount.increment(1",{"_index":1097,"title":{},"body":{"index.html":{}}}],["requestcount.reset();monotonecount",{"_index":1100,"title":{},"body":{"index.html":{}}}],["requestlat",{"_index":1125,"title":{},"body":{"index.html":{}}}],["requestlatency.getsnapshot",{"_index":1131,"title":{},"body":{"index.html":{}}}],["requestlatency.update(102000",{"_index":1136,"title":{},"body":{"index.html":{}}}],["requestlatency.update(12345",{"_index":1127,"title":{},"body":{"index.html":{}}}],["requestlatency.update(23456",{"_index":1128,"title":{},"body":{"index.html":{}}}],["requestlatency.update(34567",{"_index":1129,"title":{},"body":{"index.html":{}}}],["requestlatency.update(4390000",{"_index":1138,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":1094,"title":{},"body":{"index.html":{}}}],["require(\"n",{"_index":406,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["require(\"nod",{"_index":502,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["reservoir",{"_index":223,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/HdrHistogram.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=nul",{"_index":728,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["resourc",{"_index":1072,"title":{},"body":{"index.html":{}}}],["restart",{"_index":896,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restrict",{"_index":1204,"title":{},"body":{"license.html":{}}}],["result",{"_index":122,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["right",{"_index":1207,"title":{},"body":{"license.html":{}}}],["safe",{"_index":595,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sale",{"_index":1068,"title":{},"body":{"index.html":{}}}],["sampl",{"_index":148,"title":{"interfaces/Sampling.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["sampler",{"_index":724,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1",{"_index":722,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["save",{"_index":1062,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":1251,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["second",{"_index":314,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":1213,"title":{},"body":{"license.html":{}}}],["sesond",{"_index":202,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":15,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{}}}],["set.t",{"_index":812,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{},"unit-test.html":{}}}],["set.ts:21",{"_index":815,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":814,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock(defaultclock",{"_index":639,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescript",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setdescription(descript",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setgroup",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{}}}],["setgroup(group",{"_index":87,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{}}}],["setinterv",{"_index":1092,"title":{},"body":{"index.html":{}}}],["setmetadata",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{}}}],["setmetadata(nam",{"_index":89,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{}}}],["setnam",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setname(nam",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["setnamefactory(namefactori",{"_index":635,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["settag",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Taggable.html":{}}}],["settag(nam",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["setvalue(valu",{"_index":339,"title":{},"body":{"interfaces/Gauge.html":{}}}],["shall",{"_index":1220,"title":{},"body":{"license.html":{}}}],["ship",{"_index":1078,"title":{},"body":{"index.html":{}}}],["sign",{"_index":496,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["similar",{"_index":1056,"title":{},"body":{"index.html":{}}}],["simpl",{"_index":222,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["simplegaug",{"_index":335,"title":{},"body":{"interfaces/Gauge.html":{},"coverage.html":{},"index.html":{}}}],["simplegauge(\"requestcount",{"_index":1111,"title":{},"body":{"index.html":{}}}],["simplesnapshot",{"_index":248,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["singl",{"_index":813,"title":{},"body":{"interfaces/MetricSet.html":{},"index.html":{}}}],["size",{"_index":229,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["sizeattributeinterfac",{"_index":518,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegaug",{"_index":520,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collect",{"_index":532,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collect",{"_index":534,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collect",{"_index":535,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collect",{"_index":536,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterfac",{"_index":517,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":589,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":734,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":230,"title":{"interfaces/Snapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["snapshot.getmean",{"_index":1163,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();hdrhistogram",{"_index":1132,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();met",{"_index":1139,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();metriclisten",{"_index":1172,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":1201,"title":{},"body":{"license.html":{}}}],["sort",{"_index":829,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["specif",{"_index":130,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{}}}],["specifi",{"_index":239,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["standard",{"_index":443,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["start",{"_index":156,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/MetricReporter.html":{},"classes/StopWatch.html":{}}}],["starttim",{"_index":922,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":1087,"title":{},"body":{"index.html":{}}}],["state",{"_index":870,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["statement",{"_index":1001,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":23,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["statist",{"_index":1076,"title":{},"body":{"index.html":{}}}],["stdclock",{"_index":214,"title":{"classes/StdClock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["stop",{"_index":800,"title":{},"body":{"classes/MetricReporter.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["stopwatch",{"_index":919,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["stopwatch(this.clock",{"_index":964,"title":{},"body":{"classes/StopWatch.html":{}}}],["storag",{"_index":1181,"title":{},"body":{"index.html":{}}}],["string",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["subject",{"_index":1216,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":1211,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":1221,"title":{},"body":{"license.html":{}}}],["sum",{"_index":268,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summar",{"_index":351,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["super",{"_index":337,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["super(nul",{"_index":456,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["support",{"_index":1050,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["support/regist",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["synchron",{"_index":953,"title":{},"body":{"classes/StopWatch.html":{}}}],["system",{"_index":1069,"title":{},"body":{"index.html":{}}}],["t",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["tabl",{"_index":1045,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1044,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":17,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{}}}],["taggabl",{"_index":101,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{},"coverage.html":{}}}],["templat",{"_index":332,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/MetadataContainer.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["test",{"_index":1254,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["th",{"_index":383,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["therefor",{"_index":950,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.a.length",{"_index":1109,"title":{},"body":{"index.html":{}}}],["this.addduration(diff(starttim",{"_index":957,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.alpha",{"_index":319,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.avg",{"_index":324,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.buckets.boundari",{"_index":467,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.clock",{"_index":931,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.tim",{"_index":934,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.count",{"_index":465,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.defaultclock",{"_index":638,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.descript",{"_index":115,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/StopWatch.html":{}}}],["this.extractor",{"_index":533,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.firemetricadded(metric.getnam",{"_index":748,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(nam",{"_index":758,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(nam",{"_index":702,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname(nam",{"_index":687,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(nam",{"_index":691,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname(nam",{"_index":673,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(nam",{"_index":678,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getmax",{"_index":890,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":884,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.5",{"_index":880,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":875,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":876,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":877,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":879,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":878,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.group",{"_index":116,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.group}.${this.nam",{"_index":121,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.histogram",{"_index":461,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["this.histogram.getbucket",{"_index":951,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":943,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":942,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":944,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(dur",{"_index":939,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.interv",{"_index":320,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.listeners.foreach((listen",{"_index":779,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listen",{"_index":632,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listen",{"_index":628,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":634,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.maxs",{"_index":250,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.met",{"_index":937,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metadata",{"_index":109,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.delete(nam",{"_index":112,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.get(nam",{"_index":110,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.metadata.set(nam",{"_index":113,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.meter.get15minuter",{"_index":945,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuter",{"_index":947,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuter",{"_index":946,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanr",{"_index":948,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":940,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metr",{"_index":645,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricref",{"_index":601,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistries.indexof(metricregistri",{"_index":810,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.push(metricregistri",{"_index":809,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.splice(index",{"_index":811,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metrics.map((metr",{"_index":669,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":746,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.splice(index",{"_index":701,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nam",{"_index":114,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["this.namefactori",{"_index":636,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(nam",{"_index":760,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":988,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":505,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(valu",{"_index":507,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumb",{"_index":508,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostr",{"_index":509,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.reference.getcount",{"_index":440,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.max",{"_index":435,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.mean",{"_index":442,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.min",{"_index":438,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(50",{"_index":432,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(75",{"_index":417,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(95",{"_index":420,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(98",{"_index":423,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99",{"_index":429,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(99.9",{"_index":426,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.percentile(quantil",{"_index":448,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.reference.histogram.stddev",{"_index":446,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.register(counter.getnam",{"_index":718,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(histogram.getnam",{"_index":732,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(meter.getnam",{"_index":727,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(metricnam",{"_index":763,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(timer.getnam",{"_index":739,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":752,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listen",{"_index":600,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(nam",{"_index":708,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.setdescription(descript",{"_index":531,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(nam",{"_index":530,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.snapshot",{"_index":463,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.starttim",{"_index":933,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.sum",{"_index":326,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.sum.add(valu",{"_index":466,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{}}}],["this.tag",{"_index":117,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.delete(nam",{"_index":120,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.get(nam",{"_index":118,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.set(nam",{"_index":119,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tim",{"_index":932,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttim",{"_index":935,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timeunitinnanosecond",{"_index":322,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.unit",{"_index":321,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.valu",{"_index":338,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((valu",{"_index":883,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":251,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":874,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":882,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":892,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":881,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["thread",{"_index":1071,"title":{},"body":{"index.html":{}}}],["through",{"_index":305,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["throw",{"_index":357,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["tick",{"_index":274,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":190,"title":{"interfaces/Time.html":{}},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["time(f",{"_index":955,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeasync(f",{"_index":959,"title":{},"body":{"classes/StopWatch.html":{}}}],["timer",{"_index":590,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["timer(clock",{"_index":737,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.setgroup(group",{"_index":738,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.start",{"_index":1165,"title":{},"body":{"index.html":{}}}],["timer.stop",{"_index":1166,"title":{},"body":{"index.html":{}}}],["timeunit",{"_index":276,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{}}}],["timeunit(1",{"_index":990,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":991,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":992,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":993,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":995,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":994,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":997,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanosecond",{"_index":269,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["tonumb",{"_index":487,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["tort",{"_index":1241,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["total",{"_index":392,"title":{},"body":{"classes/HdrHistogram.html":{},"interfaces/Metered.html":{}}}],["track",{"_index":785,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["tri",{"_index":405,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/StopWatch.html":{}}}],["trigger",{"_index":318,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["truth",{"_index":213,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two",{"_index":198,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.millisecond",{"_index":211,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanosecond",{"_index":210,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalu",{"_index":209,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Buckets.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":1248,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":523,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["typescript",{"_index":1059,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":740,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["uniqu",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["unit",{"_index":270,"title":{"unit-test.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"unit-test.html":{}}}],["unit.convertto(interv",{"_index":323,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":989,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.t",{"_index":974,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":980,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":987,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":982,"title":{},"body":{"classes/TimeUnit.html":{}}}],["until",{"_index":245,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updat",{"_index":231,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["update(valu",{"_index":241,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["upper",{"_index":393,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["us",{"_index":136,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":1064,"title":{},"body":{"index.html":{}}}],["valu",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["valueextractor",{"_index":519,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":873,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.slice(0",{"_index":872,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["variabl",{"_index":928,"title":{"miscellaneous/variables.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["versa",{"_index":309,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":641,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["via",{"_index":1176,"title":{},"body":{"index.html":{}}}],["vice",{"_index":308,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["void",{"_index":84,"title":{},"body":{"classes/BaseMetric.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"interfaces/MetadataContainer.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["wait",{"_index":1070,"title":{},"body":{"index.html":{}}}],["warn",{"_index":543,"title":{},"body":{"interfaces/Logger.html":{}}}],["warranti",{"_index":1223,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1167,"title":{},"body":{"index.html":{}}}],["weight",{"_index":279,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["whether",{"_index":1238,"title":{},"body":{"license.html":{}}}],["who",{"_index":215,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":139,"title":{},"body":{"interfaces/BucketCounting.html":{},"classes/Buckets.html":{},"interfaces/Counting.html":{},"index.html":{}}}],["without",{"_index":1203,"title":{},"body":{"license.html":{}}}],["work",{"_index":1169,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":346,"title":{},"body":{"classes/HdrHistogram.html":{},"classes/HdrSnapshot.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["ye",{"_index":367,"title":{},"body":{"classes/HdrHistogram.html":{}}}],["zero",{"_index":218,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set tags\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                metadata\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getMetadata\n                            \n                            \n                                    Public\n                                getMetadataMap\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeMetadata\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setMetadata\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:71\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:111\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:95\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:79\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metadata:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:119\n                            \n                        \n\n                \n                    \n                        The metadata associated with an instance of class.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:103\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:87\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:147\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:155\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:125\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:121\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:139\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:167\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:163\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:129\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:175\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:151\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:159\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:135\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:143\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:171\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:179\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): void {\n        this.metadata.set(name, value);\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BucketCounting.html":{"url":"interfaces/BucketCounting.html","title":"interface - BucketCounting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BucketCounting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining counting events based on Buckets.\nThe meaning of the countings is implementation-specific.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getBuckets\n                                \n                                \n                                    getCounts\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getBuckets\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetBuckets()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the current Buckets object used to do the counting.\n\n\n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCounts\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCounts()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:130\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from the boundary to the count of events\nwithin the corresponding boundary.\nThe meaning of the count is implementation specific.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Buckets.html":{"url":"classes/Buckets.html","title":"class - Buckets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Buckets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Contains boundaries used to mark one end of a value range.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                boundaries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                exponential\n                            \n                            \n                                    Static\n                                linear\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/counting.ts:88\n                            \n                        \n\n                \n                    \n                            Creates an instance of Buckets.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            boundaries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        boundaries:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10]\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/counting.ts:97\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            exponential\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        exponential(initial: number, factor: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:67\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with exponentially distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        factor\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            linear\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        linear(start: number, bucketWidth: number, count: number, precision: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:43\n                            \n                        \n\n\n                \n                    \n                            Creates a new Buckets object with linear-distributed values.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        bucketWidth\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        precision\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                10000\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n/**\n * Contains boundaries used to mark one end of a value range.\n *\n * @export\n * @class Buckets\n */\nexport class Buckets {\n\n    /**\n     * Creates a new Buckets object with linear-distributed values.\n     *\n     * @static\n     * @param {number} start\n     * @param {number} bucketWidth\n     * @param {number} count\n     * @param {number} [precision=10000]\n     * @returns {Buckets}\n     * @memberof Buckets\n     */\n    public static linear(start: number, bucketWidth: number, count: number, precision = 10000): Buckets {\n        const boundaries = new Array(count);\n        const buckets = new Buckets(boundaries);\n        for (let i = 0; i  a - b);\n    }\n\n}\n\n/**\n * Interface for defining counting events based on Buckets.\n * The meaning of the countings is implementation-specific.\n *\n * @export\n * @interface BucketCounting\n * @extends {Metric}\n */\nexport interface BucketCounting extends Metric {\n\n    /**\n     * Gets the current Buckets object used to do the counting.\n     *\n     * @returns {Buckets}\n     * @memberof BucketCounting\n     */\n    getBuckets(): Buckets;\n\n    /**\n     * Gets a mapping from the boundary to the count of events\n     * within the corresponding boundary.\n     * The meaning of the count is implementation specific.\n     *\n     * @returns {Map}\n     * @memberof BucketCounting\n     */\n    getCounts(): Map;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                        The capacity of this reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:57\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:83\n                            \n                        \n\n\n                \n                    \n                            Gets the actual number of value, but at max the specified maximum.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:110\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot instance.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:95\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MovingAverage\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                    TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:71\n                            \n                        \n\n                \n                    \n                        Alpha component (weight) of the moving average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            avg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        avg:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : -1.0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:95\n                            \n                        \n\n                \n                    \n                        The current average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:79\n                            \n                        \n\n                \n                    \n                        The sampling interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:87\n                            \n                        \n\n                \n                    \n                        The sum of all values passed to the update function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeUnitInNanoseconds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timeUnitInNanoseconds:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:103\n                            \n                        \n\n                \n                    \n                        Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unit:     TimeUnit\n\n                    \n                \n                    \n                        \n                            Type :     TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                        The time unit of the sampling rate.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:134\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:155\n                            \n                        \n\n\n                \n                    \n                            Gets the average in the specified time unit.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:144\n                            \n                        \n\n\n                \n                    \n                            Gets the time unit.\n\n\n                            \n                            \n                            \n                                Returns :     TimeUnit\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        tick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:182\n                            \n                        \n\n\n                \n                    \n                            Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:168\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the current sum.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets the current value of the gauge.\n\n\n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @template T\n */\nexport interface Gauge extends Metric {\n\n    /**\n     * Gets the current value of the gauge.\n     *\n     * @returns {T}\n     * @memberof Gauge\n     */\n    getValue(): T;\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n\n    /**\n     * The value - initially set to 0.\n     *\n     * @private\n     * @type {number}\n     * @memberof SimpleGauge\n     */\n    private value: number = 0;\n\n    /**\n     * Creates an instance of SimpleGauge with an optional name.\n     *\n     * @param {string} [name] optional metric name.\n     * @param {string} [description] optional metric description.\n     * @memberof SimpleGauge\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @returns {number}\n     * @memberof SimpleGauge\n     */\n    public getValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Sets the current value.\n     *\n     * @param {number} value\n     * @memberof SimpleGauge\n     */\n    public setValue(value: number): void {\n        this.value = value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/groupable.ts\n        \n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getGroup\n                                \n                                \n                                    setGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the group name.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Sets the group name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new group name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n    /**\n     * Gets the group name.\n     *\n     * @returns {string}\n     * @memberof Groupable\n     */\n    getGroup(): string;\n\n    /**\n     * Sets the group name.\n     *\n     * @param {string} group the new group name\n     * @memberof Groupable\n     */\n    setGroup(group: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HdrHistogram.html":{"url":"classes/HdrHistogram.html","title":"class - HdrHistogram","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HdrHistogram\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/hdr-histogram.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n\n            \n\n            \n                Extends\n            \n            \n                    Histogram\n            \n\n            \n                Implements\n            \n            \n                        BucketCounting\n                        Counting\n                        Metric\n                        Sampling\n                        Summarizing\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                histogram\n                            \n                            \n                                    Private\n                                snapshot\n                            \n                            \n                                    Protected\n                                    Readonly\n                                bucketCounts\n                            \n                            \n                                    Protected\n                                    Readonly\n                                buckets\n                            \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Protected\n                                    Readonly\n                                reservoir\n                            \n                            \n                                    Protected\n                                sum\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSnapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                getBuckets\n                            \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                getCounts\n                            \n                            \n                                    Public\n                                getSnapshot\n                            \n                            \n                                    Public\n                                getSum\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(lowest: number, max: number, figures: number, name?: string, description?: string, buckets: Buckets)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/hdr-histogram.ts:208\n                            \n                        \n\n                \n                    \n                            Creates an instance of HdrHistogram.\nThrows anerror if the 'native-hdr-histogram' module is not installed.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        lowest\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is the lowest possible number that can be recorded\n\n                                                        \n                                                \n                                                \n                                                        max\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                is the maximum number that can be recorded\n\n                                                        \n                                                \n                                                \n                                                        figures\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        buckets\n                                                  \n                                                        \n                                                                    Buckets\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            histogram\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        histogram:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:200\n                            \n                        \n\n                \n                    \n                        histogram instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        snapshot:     HdrSnapshot\n\n                    \n                \n                    \n                        \n                            Type :     HdrSnapshot\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:208\n                            \n                        \n\n                \n                    \n                        Snapshot instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Readonly\n                            bucketCounts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        bucketCounts:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:54\n                            \n                        \n\n                \n                    \n                        Contains all countings based on Histogram.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Readonly\n                            buckets\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        buckets:     Buckets\n\n                    \n                \n                    \n                        \n                            Type :     Buckets\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:62\n                            \n                        \n\n                \n                    \n                        The bucket config used to count.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        count:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:38\n                            \n                        \n\n                \n                    \n                        Continuous number representing the update operations executed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Readonly\n                            reservoir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reservoir:     Reservoir\n\n                    \n                \n                    \n                        \n                            Type :     Reservoir\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:30\n                            \n                        \n\n                \n                    \n                        The value reservoir used to do sampling.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     Int64Wrapper\n\n                    \n                \n                    \n                        \n                            Type :     Int64Wrapper\n\n                        \n                    \n                    \n                        \n                            Default value : new Int64Wrapper()\n                        \n                    \n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:46\n                            \n                        \n\n                \n                    \n                        Sum of all values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:247\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot instance.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:257\n                            \n                        \n\n\n                \n                    \n                            Updates the histogram, all counters and th overall sum with the given value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getBuckets\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getBuckets()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:148\n                            \n                        \n\n\n                \n                    \n                            Gets the buckets config object.\n\n\n                            \n                            \n                            \n                                Returns :     Buckets\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCount()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:128\n                            \n                        \n\n\n                \n                    \n                            Gets the count of update operations executed.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getCounts\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCounts()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:158\n                            \n                        \n\n\n                \n                    \n                            Gets the actual bucket counts.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSnapshot()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:118\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSum()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:138\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of all values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Histogram\n\n                                \n                            \n                        \n                            \n                                    Defined in Histogram:101\n                            \n                        \n\n\n                \n                    \n                            Increases the total count, updates the reservoir,\nupdates the bucket counts and adds the specified value\nto the overall sum.\nThe bucket boundaries from Buckets represent the upper edge\nof a value range. Each value that is below a boundary is increasing the\naccording bucket count. E.g. assume the bucket config [10, 20, 30]:\nthe value 11 is increasing buckets 20 and 30\nthe value -9 is increasing all buckets (10, 20 and 30)\nthe value 31 is increasing none of the buckets\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BucketCounting, Buckets, Counting } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Metric } from \"./metric\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\n\n/**\n * The 'native-hdr-histogram' module (optional).\n */\nlet NativeHistogram: any = null;\ntry {\n    NativeHistogram = require(\"native-hdr-histogram\");\n} catch (e) {\n}\n\n/**\n * Snapshot implementation for a {@link HdrHistogram} reference.\n *\n * @export\n * @class HdrSnapshot\n * @implements {Snapshot}\n */\nexport class HdrSnapshot implements Snapshot {\n\n    /**\n     * Creates an instance of HdrSnapshot.\n     * @param {*} reference\n     * @memberof HdrSnapshot\n     */\n    public constructor(private reference: any) {\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 75th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.reference.histogram.percentile(75);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 95th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.reference.histogram.percentile(95);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 98th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.reference.histogram.percentile(98);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99.9th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.reference.histogram.percentile(99.9);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.reference.histogram.percentile(99);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 50th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMedian(): number {\n        return this.reference.histogram.percentile(50);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the max value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMax(): number {\n        return this.reference.histogram.max() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the min value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMin(): number {\n        return this.reference.histogram.min() || 0;\n    }\n\n    /**\n     * Always returns an empty array.\n     *\n     * @returns {number[]}\n     * @memberof HdrSnapshot\n     */\n    public getValues(): number[] {\n        return [];\n    }\n\n    /**\n     * Returns the count of all values recorded.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public size(): number {\n        return this.reference.getCount();\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMean(): number {\n        return this.reference.histogram.mean() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getStdDev(): number {\n        return this.reference.histogram.stddev() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the given percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getValue(quantile: number): number {\n        return this.reference.histogram.percentile(quantile * 100.0);\n    }\n\n}\n\n/**\n * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n *\n * @export\n * @class HdrHistogram\n * @extends {Histogram}\n * @implements {BucketCounting}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n * @implements {Summarizing}\n */\nexport class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {\n\n    /**\n     * histogram instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof HdrHistogram\n     */\n    private histogram: any;\n    /**\n     * Snapshot instance.\n     *\n     * @private\n     * @type {HdrSnapshot}\n     * @memberof HdrHistogram\n     */\n    private snapshot: HdrSnapshot;\n\n    /**\n     * Creates an instance of HdrHistogram.\n     * Throws anerror if the 'native-hdr-histogram' module is not installed.\n     *\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {Buckets} [buckets=new Buckets()]\n     * @memberof HdrHistogram\n     */\n    public constructor(\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n        super(null, name, description, buckets);\n\n        if (!NativeHistogram) {\n            throw new Error(\"Module 'native-hdr-histogram' not found. \" +\n                            \"Please install the optional dependencies of 'inspector-metrics' module.\");\n        }\n\n        this.histogram = new NativeHistogram(lowest, max, figures);\n        this.snapshot = new HdrSnapshot(this);\n    }\n\n    /**\n     * Gets the snapshot instance.\n     *\n     * @returns {Snapshot}\n     * @memberof HdrHistogram\n     */\n    public getSnapshot(): Snapshot {\n        return this.snapshot;\n    }\n\n    /**\n     * Updates the histogram, all counters and th overall sum with the given value.\n     *\n     * @param {number} value\n     * @memberof HdrHistogram\n     */\n    public update(value: number): void {\n        this.count++;\n        this.sum.add(value);\n        for (const boundary of this.buckets.boundaries) {\n            if (value \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HdrSnapshot.html":{"url":"classes/HdrSnapshot.html","title":"class - HdrSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HdrSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/hdr-histogram.ts\n        \n\n            \n                Description\n            \n            \n                Snapshot implementation for a HdrHistogram reference.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reference: any)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/hdr-histogram.ts:26\n                            \n                        \n\n                \n                    \n                            Creates an instance of HdrSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reference\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:43\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 75th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:54\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 95th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:65\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 98th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:76\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99.9th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:87\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 99th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:109\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the max value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:151\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the mean value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:98\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the 50th percentile.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:120\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the min value - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:162\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the standard deviation - if NaN returns 0.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls the native hrd-histogram implementation of the\nreferenced HdrHistogram for the given percentile.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:130\n                            \n                        \n\n\n                \n                    \n                            Always returns an empty array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/hdr-histogram.ts:140\n                            \n                        \n\n\n                \n                    \n                            Returns the count of all values recorded.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BucketCounting, Buckets, Counting } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Metric } from \"./metric\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\n\n/**\n * The 'native-hdr-histogram' module (optional).\n */\nlet NativeHistogram: any = null;\ntry {\n    NativeHistogram = require(\"native-hdr-histogram\");\n} catch (e) {\n}\n\n/**\n * Snapshot implementation for a {@link HdrHistogram} reference.\n *\n * @export\n * @class HdrSnapshot\n * @implements {Snapshot}\n */\nexport class HdrSnapshot implements Snapshot {\n\n    /**\n     * Creates an instance of HdrSnapshot.\n     * @param {*} reference\n     * @memberof HdrSnapshot\n     */\n    public constructor(private reference: any) {\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 75th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.reference.histogram.percentile(75);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 95th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.reference.histogram.percentile(95);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 98th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.reference.histogram.percentile(98);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99.9th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.reference.histogram.percentile(99.9);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 99th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.reference.histogram.percentile(99);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the 50th percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMedian(): number {\n        return this.reference.histogram.percentile(50);\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the max value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMax(): number {\n        return this.reference.histogram.max() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the min value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMin(): number {\n        return this.reference.histogram.min() || 0;\n    }\n\n    /**\n     * Always returns an empty array.\n     *\n     * @returns {number[]}\n     * @memberof HdrSnapshot\n     */\n    public getValues(): number[] {\n        return [];\n    }\n\n    /**\n     * Returns the count of all values recorded.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public size(): number {\n        return this.reference.getCount();\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getMean(): number {\n        return this.reference.histogram.mean() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getStdDev(): number {\n        return this.reference.histogram.stddev() || 0;\n    }\n\n    /**\n     * Calls the native hrd-histogram implementation of the\n     * referenced {@link HdrHistogram} for the given percentile.\n     *\n     * @returns {number}\n     * @memberof HdrSnapshot\n     */\n    public getValue(quantile: number): number {\n        return this.reference.histogram.percentile(quantile * 100.0);\n    }\n\n}\n\n/**\n * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.\n *\n * @export\n * @class HdrHistogram\n * @extends {Histogram}\n * @implements {BucketCounting}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n * @implements {Summarizing}\n */\nexport class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {\n\n    /**\n     * histogram instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof HdrHistogram\n     */\n    private histogram: any;\n    /**\n     * Snapshot instance.\n     *\n     * @private\n     * @type {HdrSnapshot}\n     * @memberof HdrHistogram\n     */\n    private snapshot: HdrSnapshot;\n\n    /**\n     * Creates an instance of HdrHistogram.\n     * Throws anerror if the 'native-hdr-histogram' module is not installed.\n     *\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {Buckets} [buckets=new Buckets()]\n     * @memberof HdrHistogram\n     */\n    public constructor(\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n        super(null, name, description, buckets);\n\n        if (!NativeHistogram) {\n            throw new Error(\"Module 'native-hdr-histogram' not found. \" +\n                            \"Please install the optional dependencies of 'inspector-metrics' module.\");\n        }\n\n        this.histogram = new NativeHistogram(lowest, max, figures);\n        this.snapshot = new HdrSnapshot(this);\n    }\n\n    /**\n     * Gets the snapshot instance.\n     *\n     * @returns {Snapshot}\n     * @memberof HdrHistogram\n     */\n    public getSnapshot(): Snapshot {\n        return this.snapshot;\n    }\n\n    /**\n     * Updates the histogram, all counters and th overall sum with the given value.\n     *\n     * @param {number} value\n     * @memberof HdrHistogram\n     */\n    public update(value: number): void {\n        this.count++;\n        this.sum.add(value);\n        for (const boundary of this.buckets.boundaries) {\n            if (value \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/int64.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            num\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        num:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                        int64_t value instance.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:36\n                            \n                        \n\n\n                \n                    \n                            Adds the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toNumber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toNumber()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:46\n                            \n                        \n\n\n                \n                    \n                            Gets the 64bit value as javascript 32bit signed integer.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:56\n                            \n                        \n\n\n                \n                    \n                            Converts the 64bit integer to it's string representation.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n    /**\n     * int64_t value instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof Int64Wrapper\n     */\n    private num: any;\n\n    /**\n     * Creates an instance of Int64Wrapper.\n     *\n     * @param {number} [initial=0]\n     * @memberof Int64Wrapper\n     */\n    public constructor(initial: number = 0) {\n        this.num = new Int64(initial);\n    }\n\n    /**\n     * Adds the specified value.\n     *\n     * @param {number} value\n     * @memberof Int64Wrapper\n     */\n    public add(value: number): void {\n        this.num = this.num.add(value);\n    }\n\n    /**\n     * Gets the 64bit value as javascript 32bit signed integer.\n     *\n     * @returns {number}\n     * @memberof Int64Wrapper\n     */\n    public toNumber(): number {\n        return this.num.toNumber();\n    }\n\n    /**\n     * Converts the 64bit integer to it's string representation.\n     *\n     * @returns {string}\n     * @memberof Int64Wrapper\n     */\n    public toString(): string {\n        return this.num.toString();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                    \n                                \n                                \n                                    \n                                        length:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            length\n                            \n                            \n                        \n                    \n                \n                \n                    \nlength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/logger.ts\n        \n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        error\n                                \n                                \n                                        info\n                                \n                                \n                                        warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                    \n                                \n                                \n                                    \n                                        warn:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n    error: (...args: any[]) => any;\n    warn: (...args: any[]) => any;\n    info: (...args: any[]) => any;\n    debug: (...args: any[]) => any;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetadataContainer.html":{"url":"interfaces/MetadataContainer.html","title":"interface - MetadataContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetadataContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metadata-container.ts\n        \n\n            \n                Description\n            \n            \n                Interface for all classes that can associate metadata with instances.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetadata\n                                \n                                \n                                    getMetadataMap\n                                \n                                \n                                    removeMetadata\n                                \n                                \n                                    setMetadata\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:29\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Gets the metadata associated with the specified name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetadataMap\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetadataMap()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets all the metadata associated with an instance.\nFuture changes to the metadata of this instance may\nnot be reflected in the map returned here.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveMetadata(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:39\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Removes the metadata associated with the specified name and returns it finally.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The metadata key\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setMetadata\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetMetadata(name: string, value: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metadata-container.ts:49\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Sets the metadata object to the name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The key of the metadata\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                any value\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Interface for all classes that can associate metadata with instances.\n *\n * @export\n * @interface MetadataContainer\n */\nexport interface MetadataContainer {\n\n    /**\n     * Gets all the metadata associated with an instance.\n     * Future changes to the metadata of this instance may\n     * not be reflected in the map returned here.\n     *\n     * @returns {Map}\n     * @memberof MetadataContainer\n     */\n    getMetadataMap(): Map;\n\n    /**\n     * Gets the metadata associated with the specified name.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    getMetadata(name: string): T;\n\n    /**\n     * Removes the metadata associated with the specified name and returns it finally.\n     *\n     * @template T\n     * @param {string} name The metadata key\n     * @returns {T}\n     * @memberof MetadataContainer\n     */\n    removeMetadata(name: string): T;\n\n    /**\n     * Sets the metadata object to the name.\n     *\n     * @template T\n     * @param {string} name The key of the metadata\n     * @param {T} value any value\n     * @memberof MetadataContainer\n     */\n    setMetadata(name: string, value: T): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metered.ts\n        \n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get15MinuteRate\n                                \n                                \n                                    get1MinuteRate\n                                \n                                \n                                    get5MinuteRate\n                                \n                                \n                                    getCount\n                                \n                                \n                                    getMeanRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get15MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget15MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:28\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 15 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get1MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget1MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:44\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last minute.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get5MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget5MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 5 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the total number of events.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMeanRate\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMeanRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:52\n                            \n                        \n\n\n                \n                    \n                            Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n    /**\n     * Gets the total number of events.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getCount(): number;\n\n    /**\n     * Gets the rate of the last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get15MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get5MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last minute.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get1MinuteRate(): number;\n\n    /**\n     * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getMeanRate(): number;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Representation for a metrics.\n\n            \n\n            \n                Extends\n            \n            \n                    Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getDescription\n                                \n                                \n                                    getName\n                                \n                                \n                                    setDescription\n                                \n                                \n                                    setName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:39\n                            \n                        \n\n\n                \n                    \n                            Gets the description of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:23\n                            \n                        \n\n\n                \n                    \n                            Gets the name of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:47\n                            \n                        \n\n\n                \n                    \n                            Sets the description of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:31\n                            \n                        \n\n\n                \n                    \n                            Sets the name of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { MetadataContainer } from \"./metadata-container\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, MetadataContainer, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n    /**\n     * The metadata associated with an instance of class.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected metadata: Map = new Map();\n\n    public getMetadataMap(): Map {\n        return this.metadata;\n    }\n\n    public getMetadata(name: string): T {\n        return this.metadata.get(name) as T;\n    }\n\n    public removeMetadata(name: string): T {\n        const value = this.metadata.get(name) as T;\n        this.metadata.delete(name);\n        return value;\n    }\n\n    public setMetadata(name: string, value: T): void {\n        this.metadata.set(name, value);\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:69\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            metricRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRef:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:62\n                            \n                        \n\n                \n                    \n                        The metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:69\n                            \n                        \n\n                \n                    \n                        The name the metric is registered with.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { HdrHistogram } from \"./hdr-histogram\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new hdr-histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {HdrHistogram}\n     * @memberof MetricRegistry\n     */\n    public newHdrHistogram(\n        name: string,\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        group: string = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): HdrHistogram {\n\n        const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry-listener.ts\n        \n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metricAdded\n                                \n                                \n                                    metricRemoved\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricAdded\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricAdded(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:20\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was added to a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the metric\n\n                                                        \n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                metric object\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricRemoved\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricRemoved(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:29\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was removed from a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n\n    /**\n     * Called when a metric was added to a {@link MetricRegistry}.\n     *\n     * @param {string} name name of the metric\n     * @param {Metric} metric metric object\n     * @memberof MetricRegistryListener\n     */\n    metricAdded(name: string, metric: Metric): void;\n\n    /**\n     * Called when a metric was removed from a {@link MetricRegistry}.\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistryListener\n     */\n    metricRemoved(name: string, metric: Metric): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                    MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        remove()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:41\n                            \n                        \n\n\n                \n                    \n                            Removes the managed listener from the metric registry.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Buckets } from \"./counting\";\nimport { Gauge } from \"./gauge\";\nimport { HdrHistogram } from \"./hdr-histogram\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new hdr-histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {number} [lowest=1] is the lowest possible number that can be recorded\n     * @param {number} [max=100] is the maximum number that can be recorded\n     * @param {number} [figures=3]\n     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {HdrHistogram}\n     * @memberof MetricRegistry\n     */\n    public newHdrHistogram(\n        name: string,\n        lowest: number = 1,\n        max: number = 100,\n        figures: number = 3,\n        group: string = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): HdrHistogram {\n\n        const histogram = new HdrHistogram(lowest, max, figures, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Histogram {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description, buckets);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null,\n        buckets: Buckets = new Buckets()): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description, buckets);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricReporter.html":{"url":"classes/MetricReporter.html","title":"class - MetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Base-class for metric-reporter implementations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                metricRegistries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addMetricRegistry\n                            \n                            \n                                    Public\n                                removeMetricRegistry\n                            \n                            \n                                    Public\n                                    Abstract\n                                start\n                            \n                            \n                                    Public\n                                    Abstract\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metricRegistries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRegistries:     MetricRegistry[]\n\n                    \n                \n                    \n                        \n                            Type :     MetricRegistry[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:21\n                            \n                        \n\n                \n                    \n                        MetricRegistry instances.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            addMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        addMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:45\n                            \n                        \n\n\n                \n                    \n                            Adds a new MetricRegistry to be reported.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:55\n                            \n                        \n\n\n                \n                    \n                            Removes the given MetricRegistry if it was previously added.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:29\n                            \n                        \n\n\n                \n                    \n                            Implementations start reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:37\n                            \n                        \n\n\n                \n                    \n                            Implementations stop reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MetricRegistry } from \"./metric-registry\";\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected metricRegistries: MetricRegistry[] = [];\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract start(): void;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract stop(): void;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): void {\n        this.metricRegistries.push(metricRegistry);\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): void {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-set.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetricList\n                                \n                                \n                                    getMetrics\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets a list of all Metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from names to metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n    /**\n     * Gets a mapping from names to metric instances.\n     *\n     * @deprecated since version 1.3 - use {@link getMetricList} instead\n     * @returns {Map}\n     * @memberof MetricSet\n     */\n    getMetrics(): Map;\n\n    /**\n     * Gets a list of all {@link Metric} instances.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricSet\n     */\n    getMetricList(): Metric[];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAlpha\n                                \n                                \n                                    getAverage\n                                \n                                \n                                    tick\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \ntick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:45\n                            \n                        \n\n\n                \n                    \n                            Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:37\n                            \n                        \n\n\n                \n                    \n                            Adds the given value to the logic of the implementation.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    snapshot\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the capacity of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nsnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:35\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:27\n                            \n                        \n\n\n                \n                    \n                            Adds a value to the reservoir.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/sampling.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSnapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/sampling.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of values.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Snapshot } from \"./snapshot\";\n\n/**\n * Interface fo all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n    /**\n     * Gets the snapshot of values.\n     *\n     * @returns {Snapshot}\n     * @memberof Sampling\n     */\n    getSnapshot(): Snapshot;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                        Sorted collection of values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:153\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:163\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:183\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:193\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:213\n                            \n                        \n\n\n                \n                    \n                            Gets the last value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:253\n                            \n                        \n\n\n                \n                    \n                            Gets average value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:203\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:223\n                            \n                        \n\n\n                \n                    \n                            Gets the first value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:269\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:303\n                            \n                        \n\n\n                \n                    \n                            Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:233\n                            \n                        \n\n\n                \n                    \n                            Gets the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:243\n                            \n                        \n\n\n                \n                    \n                            Gets the length of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            index\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        index:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                        The current index in the value array.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:141\n                            \n                        \n\n                \n                    \n                        The capacity of the reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:133\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:167\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values, but at may the capacity of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:193\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot using the values array.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:179\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get75thPercentile\n                                \n                                \n                                    get95thPercentile\n                                \n                                \n                                    get98thPercentile\n                                \n                                \n                                    get999thPercentile\n                                \n                                \n                                    get99thPercentile\n                                \n                                \n                                    getMax\n                                \n                                \n                                    getMean\n                                \n                                \n                                    getMedian\n                                \n                                \n                                    getMin\n                                \n                                \n                                    getStdDev\n                                \n                                \n                                    getValue\n                                \n                                \n                                    getValues\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 75% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:25\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 95% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:33\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 98% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:41\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99.9% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:65\n                            \n                        \n\n\n                \n                    \n                            Gets the maximum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets the average of all values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:57\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 50% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:73\n                            \n                        \n\n\n                \n                    \n                            Gets the minimum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:105\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the value of boundary specified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:81\n                            \n                        \n\n\n                \n                    \n                            Gets all values.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:89\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                    Clock\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:68\n                            \n                        \n\n\n                \n                    \n                            Returns a Time object whos nanoseconds component is always zero.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Clock\n\n                                \n                            \n                        \n                            \n                                    Defined in Clock:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/timer.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                    Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clock\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clock:     Clock\n\n                    \n                \n                    \n                        \n                            Type :     Clock\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:31\n                            \n                        \n\n                \n                    \n                        Used to determine a duration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            startTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startTime:     Time\n\n                    \n                \n                    \n                        \n                            Type :     Time\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:47\n                            \n                        \n\n                \n                    \n                        Gets set when the start function is invoked using the clock.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:39\n                            \n                        \n\n                \n                    \n                        The timer the duration is reported to.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:66\n                            \n                        \n\n\n                \n                    \n                            Sets the startTime variable.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:76\n                            \n                        \n\n\n                \n                    \n                            Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, diff, Time } from \"./clock\";\nimport { BucketCounting, Buckets } from \"./counting\";\nimport { Histogram } from \"./histogram\";\nimport { Int64Wrapper } from \"./int64\";\nimport { Meter } from \"./meter\";\nimport { Metered } from \"./metered\";\nimport { BaseMetric } from \"./metric\";\nimport { Reservoir } from \"./reservoir\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof StopWatch\n     */\n    private clock: Clock;\n    /**\n     * The timer the duration is reported to.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof StopWatch\n     */\n    private timer: Timer;\n    /**\n     * Gets set when the start function is invoked using the clock.\n     *\n     * @private\n     * @type {Time}\n     * @memberof StopWatch\n     */\n    private startTime: Time;\n\n    /**\n     * Creates an instance of StopWatch.\n     *\n     * @param {Clock} clock\n     * @param {Timer} timer\n     * @memberof StopWatch\n     */\n    public constructor(clock: Clock, timer: Timer) {\n        this.clock = clock;\n        this.timer = timer;\n    }\n\n    /**\n     * Sets the startTime variable.\n     *\n     * @memberof StopWatch\n     */\n    public start(): void {\n        this.startTime = this.clock.time();\n    }\n\n    /**\n     * Adds the duration between the last invocation of the start function\n     * and this invocation to the timer in nanoseconds.\n     *\n     * @memberof StopWatch\n     */\n    public stop(): void {\n        this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND);\n    }\n\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements BucketCounting, Metered, Sampling, Summarizing {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof Timer\n     */\n    private clock: Clock;\n    /**\n     * Metric to measure the event rate.\n     *\n     * @private\n     * @type {Meter}\n     * @memberof Timer\n     */\n    private meter: Meter;\n    /**\n     * Metric to measure the duration of events.\n     *\n     * @private\n     * @type {Histogram}\n     * @memberof Timer\n     */\n    private histogram: Histogram;\n\n    /**\n     * Creates an instance of Timer.\n     *\n     * @param {Clock} clock\n     * @param {Reservoir} reservoir\n     * @param {string} [name]\n     * @param {string} [description]\n     * @param {string} [buckets=new Buckets()]\n     * @memberof Timer\n     */\n    public constructor(\n        clock: Clock,\n        reservoir: Reservoir,\n        name?: string,\n        description?: string,\n        buckets: Buckets = new Buckets()) {\n\n        super();\n        this.clock = clock;\n        this.name = name;\n        this.description = description;\n        this.meter = new Meter(clock, 1, name);\n        this.histogram = new Histogram(reservoir, name, description, buckets);\n    }\n\n    /**\n     * Adds a duration manually.\n     *\n     * @param {number} duration\n     * @param {TimeUnit} unit\n     * @memberof Timer\n     */\n    public addDuration(duration: number, unit: TimeUnit): void {\n        if (duration >= 0) {\n            this.histogram.update(unit.convertTo(duration, NANOSECOND));\n            this.meter.mark(1);\n        }\n    }\n\n    /**\n     * Gets a snapshot from the embedded {@link Histogram}.\n     *\n     * @returns {Snapshot}\n     * @memberof Timer\n     */\n    public getSnapshot(): Snapshot {\n        return this.histogram.getSnapshot();\n    }\n\n    /**\n     * Gets the count from the embedded {@link Histogram}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getCount(): number {\n        return this.histogram.getCount();\n    }\n\n    /**\n     * Gets the sum from the embedded {@link Histogram}.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Timer\n     */\n    public getSum(): Int64Wrapper {\n        return this.histogram.getSum();\n    }\n\n    /**\n     * Gets the average rate per second of last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get15MinuteRate(): number {\n        return this.meter.get15MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get5MinuteRate(): number {\n        return this.meter.get5MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last minute.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get1MinuteRate(): number {\n        return this.meter.get1MinuteRate();\n    }\n\n    /**\n     * Gets the mean rate from the embedded {@link Meter}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getMeanRate(): number {\n        return this.meter.getMeanRate();\n    }\n\n    /**\n     * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.\n     *\n     * @returns {Buckets}\n     * @memberof Timer\n     */\n    public getBuckets(): Buckets {\n        return this.histogram.getBuckets();\n    }\n\n    /**\n     * Gets the bucket counts from the internal {@link Histogram}.\n     *\n     * @returns {Map}\n     * @memberof Timer\n     */\n    public getCounts(): Map {\n        return this.histogram.getCounts();\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * synchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public time(f: () => void): void {\n        const startTime: Time = this.clock.time();\n        try {\n            f();\n        } finally {\n            this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n        }\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * asynchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public timeAsync(f: () => Promise): Promise {\n        const startTime: Time = this.clock.time();\n        return f()\n            .then(() => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n            })\n            .catch((err) => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n                throw err;\n            });\n    }\n\n    /**\n     * Builds a new StopWatch.\n     *\n     * @returns {StopWatch}\n     * @memberof Timer\n     */\n    public newStopWatch(): StopWatch {\n        return new StopWatch(this.clock, this);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSum()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/summarizing.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n    /**\n     * Gets the sum of values.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Summarizing\n     */\n    getSum(): Int64Wrapper;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/taggable.ts\n        \n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getTag\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeTag\n                                \n                                \n                                    setTag\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Gets the specified tag or {@code null}.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets all tags.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:43\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:35\n                            \n                        \n\n\n                \n                    \n                            Sets the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n    /**\n     * Gets all tags.\n     *\n     * @returns {Map}\n     * @memberof Taggable\n     */\n    getTags(): Map;\n\n    /**\n     * Gets the specified tag or {@code null}.\n     *\n     * @param {string} name\n     * @returns {string}\n     * @memberof Taggable\n     */\n    getTag(name: string): string;\n\n    /**\n     * Sets the specified tag.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof Taggable\n     */\n    setTag(name: string, value: string): void;\n\n    /**\n     * Removes the specified tag.\n     *\n     * @param {string} name\n     * @memberof Taggable\n     */\n    removeTag(name: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        milliseconds\n                                \n                                \n                                        nanoseconds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                    \n                                \n                                \n                                    \n                                        milliseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                    \n                                \n                                \n                                    \n                                        nanoseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/time-unit.ts\n        \n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            nanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nanosecondsPerUnit:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                        The nanoseconds for one unit of this time unit.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convertTo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convertTo(value: number, unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:53\n                            \n                        \n\n\n                \n                    \n                            Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getNanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNanosecondsPerUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the nanoseconds in one unit of this time unit.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n    /**\n     * The nanoseconds for one unit of this time unit.\n     *\n     * @private\n     * @type {number}\n     * @memberof TimeUnit\n     */\n    private nanosecondsPerUnit: number;\n\n    /**\n     * Creates an instance of TimeUnit.\n     *\n     * @param {number} nanosecondsPerUnit\n     * @memberof TimeUnit\n     */\n    public constructor(nanosecondsPerUnit: number) {\n        this.nanosecondsPerUnit = nanosecondsPerUnit;\n    }\n\n    /**\n     * Gets the nanoseconds in one unit of this time unit.\n     *\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public getNanosecondsPerUnit(): number {\n        return this.nanosecondsPerUnit;\n    }\n\n    /**\n     * Converts the given value to the time unit specified.\n     *\n     * E.g.:\n     *\n     * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n     * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n     *\n     * @param {number} value\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public convertTo(value: number, unit: TimeUnit): number {\n        return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n    }\n\n}\n\nexport const NANOSECOND = new TimeUnit(1);\nexport const MICROSECOND = new TimeUnit(1000);\nexport const MILLISECOND = new TimeUnit(1000000);\nexport const SECOND = new TimeUnit(1000000000);\nexport const MINUTE = new TimeUnit(60000000000);\nexport const HOUR = new TimeUnit(3600000000000);\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                Clock\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                StdClock\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                interface\n            \n            \n                Time\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                function\n            \n            \n                diff\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                Counter\n            \n            \n                50 %\n                (15/30)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                MonotoneCounter\n            \n            \n                46 %\n                (13/28)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                class\n            \n            \n                Buckets\n            \n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                BucketCounting\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                Counting\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                class\n            \n            \n                SimpleGauge\n            \n            \n                44 %\n                (12/27)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                interface\n            \n            \n                Gauge\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/groupable.ts\n            \n            \n                interface\n            \n            \n                Groupable\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                class\n            \n            \n                HdrHistogram\n            \n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                class\n            \n            \n                HdrSnapshot\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                lib/metrics/hdr-histogram.ts\n            \n            \n                variable\n            \n            \n                NativeHistogram\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/histogram.ts\n            \n            \n                class\n            \n            \n                Histogram\n            \n            \n                57 %\n                (20/35)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                class\n            \n            \n                Int64Wrapper\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                variable\n            \n            \n                Int64\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/logger-reporter.ts\n            \n            \n                class\n            \n            \n                LoggerReporter\n            \n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                lib/metrics/logger.ts\n            \n            \n                interface\n            \n            \n                Logger\n            \n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                lib/metrics/metadata-container.ts\n            \n            \n                interface\n            \n            \n                MetadataContainer\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/meter.ts\n            \n            \n                class\n            \n            \n                Meter\n            \n            \n                66 %\n                (30/45)\n            \n        \n        \n            \n                \n                lib/metrics/metered.ts\n            \n            \n                interface\n            \n            \n                Metered\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry-listener.ts\n            \n            \n                interface\n            \n            \n                MetricRegistryListener\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistration\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistry\n            \n            \n                63 %\n                (55/87)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistryListenerRegistration\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-reporter.ts\n            \n            \n                class\n            \n            \n                MetricReporter\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-set.ts\n            \n            \n                interface\n            \n            \n                MetricSet\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                class\n            \n            \n                BaseMetric\n            \n            \n                34 %\n                (8/23)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                interface\n            \n            \n                Metric\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                class\n            \n            \n                ExponentiallyWeightedMovingAverage\n            \n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                interface\n            \n            \n                MovingAverage\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                DefaultReservoir\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                SlidingWindowReservoir\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                interface\n            \n            \n                Reservoir\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/sampling.ts\n            \n            \n                interface\n            \n            \n                Sampling\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                class\n            \n            \n                SizeGauge\n            \n            \n                50 %\n                (15/30)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                class\n            \n            \n                SimpleSnapshot\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                interface\n            \n            \n                Snapshot\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/metrics/summarizing.ts\n            \n            \n                interface\n            \n            \n                Summarizing\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/taggable.ts\n            \n            \n                interface\n            \n            \n                Taggable\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                class\n            \n            \n                TimeUnit\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                DAY\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                HOUR\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MICROSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MILLISECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MINUTE\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                NANOSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                SECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                StopWatch\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                Timer\n            \n            \n                62 %\n                (25/40)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            node-cint64 : 2.0.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (lib/.../clock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/clock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            diff\n                            \n                            \n                        \n                    \n                \n                \n                    \ndiff(one: undefined, two: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time time is elder than the sesond point in time.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        one\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                                \n                                                        two\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called, number of bookings in a sales system\")\nMonotoneCounter - a monotonically increasing integer value (e.g. \"error count\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHdrHistogram - recording and analyzing sampled data value counts across a configurable integer value range with configurable value precision\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nCarbon / Graphite\nElasticsearch\nInflux\nPrometheus / Pushgateway\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter(global.console);\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();MonotoneCounter\nimport { MonotoneCounter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst errorCount: MonotoneCounter = registry.newMonotoneCounter(\"errorCount\");\n\n// +1\nerrorCount.increment(1);\n\n// causes error\nerrorCount.increment(-1);\n\n// =1\nerrorCount.getCount();\n\nerrorCount.reset();Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency\nconst requestLatency: Histogram = registry.newHistogram(\"requestLatency\");\n\nrequestLatency.update(12345);\nrequestLatency.update(23456);\nrequestLatency.update(34567);\n\n// a copy of the current values\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();HdrHistogram\nimport { HdrHistogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// measures a duration / latency between 1 and 1000000000 nanoseconds\nconst requestLatency: HdrHistogram = registry.newHdrHistogram(\"requestLatency\", 1, 1000000000);\n\n// 102 microseconds in nanoseconds\nrequestLatency.update(102000);\n// 4.390 milliseconds in nanoseconds\nrequestLatency.update(4390000);\n\n// only snapshot interface - always uses the current values\n// since the native-hdr-histogram is used as a reference\nconst snapshot: Snapshot = requestLatency.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    21 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NameFactory   (lib/.../metric-registry.ts)\n                        \n                        \n                            Scheduler   (lib/.../logger-reporter.ts)\n                        \n                        \n                            ValueExtractor   (lib/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/metric-registry.ts\n    \n        \n            \n                \n                    \n                        \n                        NameFactory\n                    \n                \n                \n                    \n                        NameFactory:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/logger-reporter.ts\n    \n        \n            \n                \n                    \n                        \n                        Scheduler\n                    \n                \n                \n                    \n                        Scheduler:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/size-gauge.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueExtractor\n                    \n                \n                \n                    \n                        ValueExtractor:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                    /mnt/c/git/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counting.ts\n            \n            \n                90 %\n                (26/29)\n            \n            \n                67 %\n                (6/9)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                89 %\n                (25/28)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/groupable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/hdr-histogram.ts\n            \n            \n                91 %\n                (31/34)\n            \n            \n                69 %\n                (11/16)\n            \n            \n                88 %\n                (15/17)\n            \n            \n                91 %\n                (31/34)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                100 %\n                (26/26)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/int64.ts\n            \n            \n                83 %\n                (5/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger-reporter.ts\n            \n            \n                96 %\n                (95/99)\n            \n            \n                49 %\n                (19/39)\n            \n            \n                88 %\n                (21/24)\n            \n            \n                96 %\n                (91/95)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metadata-container.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                100 %\n                (47/47)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (47/47)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metered.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                94 %\n                (171/182)\n            \n            \n                86 %\n                (90/105)\n            \n            \n                93 %\n                (80/86)\n            \n            \n                94 %\n                (167/178)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-reporter.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-set.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric.ts\n            \n            \n                88 %\n                (22/25)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                94 %\n                (15/16)\n            \n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/moving-average.ts\n            \n            \n                100 %\n                (27/27)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reservoir.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/sampling.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                84 %\n                (21/25)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/summarizing.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/taggable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/time-unit.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                95 %\n                (39/41)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                95 %\n                (18/19)\n            \n            \n                95 %\n                (39/41)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (lib/.../time-unit.ts)\n                        \n                        \n                            HOUR   (lib/.../time-unit.ts)\n                        \n                        \n                            Int64   (lib/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (lib/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            NativeHistogram   (lib/.../hdr-histogram.ts)\n                        \n                        \n                            SECOND   (lib/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/time-unit.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DAY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DAY:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(86400000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HOUR\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        HOUR:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(3600000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MICROSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MICROSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MILLISECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MILLISECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MINUTE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MINUTE:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(60000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NANOSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NANOSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        SECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000000)\n                        \n                    \n\n\n            \n        \n\n    lib/metrics/int64.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Int64\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Int64:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"node-cint64\").Int64\n                        \n                    \n\n\n            \n        \n\n    lib/metrics/hdr-histogram.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NativeHistogram\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NativeHistogram:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n\n                \n                    \n                        The 'native-hdr-histogram' module (optional).\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
