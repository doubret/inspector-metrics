var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/BaseMetric.html",[0,0.069,1,1.021]],["body/classes/BaseMetric.html",[0,0.111,1,1.841,2,0.212,3,0.274,4,0.146,5,2.175,6,0.437,7,2.87,8,2.4,9,1.266,10,0.89,11,3.559,12,3.559,13,0.894,14,0.023,15,1.981,16,0.886,17,3.355,18,2.836,19,0.781,20,0.125,21,1.131,22,1.019,23,1.812,24,2.071,25,2.811,26,1.053,27,2.822,28,3.617,29,0.411,30,3.284,31,2.87,32,3.284,33,3.176,34,2.4,35,2.4,36,2.4,37,2.4,38,2.4,39,2.87,40,0.791,41,0.741,42,1.33,43,0.957,44,0.894,45,0.741,46,2.884,47,0.992,48,2.4,49,3.094,50,2.226,51,1.876,52,2.884,53,2.884,54,2.4,55,2.884,56,2.884,57,0.485,58,1.006,59,2.884,60,2.884,61,0.514,62,2.884,63,2.884,64,2.226,65,2.884,66,0.992,67,1.127,68,2.884,69,2.226,70,2.884,71,1.515,72,2.822,73,2.884,74,2.226,75,2.884,76,2.822,77,2.884,78,2.226,79,2.884,80,2.884,81,0.361,82,0.235,83,3.355,84,3.355,85,2.175,86,0.395,87,0.037,88,1.115,89,0.274,90,0.531,91,0.525,92,2.008,93,2.074,94,4.184,95,2.457,96,2.457,97,2.457,98,2.457,99,2.457,100,0.013,101,0.013]],["title/classes/Clock.html",[0,0.069,102,1.768]],["body/classes/Clock.html",[0,0.127,2,0.307,3,0.391,4,0.211,6,0.274,7,3.666,10,0.928,13,0.895,14,0.023,19,1.132,20,0.181,26,0.915,29,0.53,40,0.838,42,1.132,44,1.153,45,0.448,57,0.307,61,0.505,66,0.897,81,0.307,82,0.341,86,0.505,87,0.048,88,1.224,89,0.391,90,0.439,91,0.677,100,0.017,101,0.017,102,3.504,103,2.605,104,2.16,105,3.096,106,4.065,107,3.016,108,4.183,109,1.638,110,4.061,111,4.065,112,3.357,113,1.132,114,2.502,115,2.665,116,2.849,117,2.961,118,4.291,119,2.849,120,2.077,121,2.849,122,2.849,123,2.073,124,2.605,125,2.849,126,2.036,127,4.065,128,3.154,129,3.154,130,3.671,131,4.065,132,3.154,133,3.154,134,4.065,135,3.154,136,3.178,137,1.71,138,3.154,139,2.605,140,3.154,141,3.154]],["title/classes/Counter.html",[0,0.069,24,1.369]],["body/classes/Counter.html",[0,0.097,1,1.426,2,0.216,3,0.278,4,0.149,6,0.447,9,1.162,10,0.846,14,0.023,15,1.289,16,0.89,17,2.898,18,2.508,19,0.797,20,0.127,21,1.148,22,0.94,23,1.511,24,2.518,25,2.71,26,1.056,27,2.436,28,3.311,29,0.417,30,2.855,31,2.649,32,2.855,33,3.071,34,2.436,35,2.436,36,2.436,37,2.436,38,2.436,39,2.649,40,0.882,41,0.746,42,1.472,43,1.104,44,1.284,45,0.762,47,0.959,48,1.692,49,2.436,50,1.569,51,1.847,54,1.692,57,0.441,58,0.709,61,0.506,64,1.569,66,1.089,67,1.288,69,1.569,71,1.487,72,1.692,74,1.569,76,1.692,78,1.569,81,0.365,82,0.24,86,0.311,88,1.129,89,0.193,90,0.405,91,0.624,92,1.204,93,1.462,100,0.013,101,0.013,109,1.99,113,0.797,142,2.221,143,4.527,144,4.972,145,2.945,146,2.642,147,3.823,148,3.444,149,4.242,150,4.633,151,2.468,152,4.234,153,0.797,154,2.642,155,2.945,156,0.963,157,2.889,158,4.391,159,2.945,160,3.613,161,2.945,162,2.945,163,2.945,164,2.945,165,2.945,166,2.945,167,2.945,168,2.945,169,2.7,170,4.633,171,4.234,172,2.945,173,2.945,174,2.945,175,3.613,176,3.199,177,2.945,178,2.945,179,2.945,180,2.945,181,2.945,182,2.945,183,2.945,184,2.945,185,2.945,186,2.945,187,2.945,188,2.945,189,2.006,190,1.204]],["title/interfaces/Counting.html",[87,0.031,148,1.768]],["body/interfaces/Counting.html",[2,0.371,3,0.398,4,0.255,6,0.331,9,1.223,14,0.023,20,0.218,24,2.59,29,0.596,40,0.865,43,0.944,45,0.541,57,0.371,61,0.445,81,0.445,82,0.412,86,0.445,87,0.057,88,1.475,89,0.398,90,0.412,100,0.019,101,0.019,109,1.843,113,1.641,123,2.332,147,3.231,148,3.473,151,3.345,191,4.305,192,6.064,193,6.064,194,3.345,195,5.054,196,1.739,197,2.353]],["title/classes/DefaultReservoir.html",[0,0.069,198,2.218]],["body/classes/DefaultReservoir.html",[0,0.109,2,0.27,3,0.325,4,0.186,6,0.241,10,0.973,14,0.023,16,0.622,19,0.997,20,0.159,21,1.342,22,1.266,26,0.995,29,0.487,40,0.922,41,0.69,42,0.997,43,1.139,45,0.69,47,0.932,57,0.27,58,1.444,61,0.483,66,0.825,67,0.938,71,1.272,81,0.364,82,0.3,86,0.44,87,0.044,89,0.367,90,0.545,91,0.703,100,0.015,101,0.015,113,0.997,153,0.997,156,1.361,198,4.269,199,2.509,200,3.088,201,3.286,202,4.269,203,4.858,204,4.52,205,4.52,206,4.964,207,2.557,208,2.826,209,2.641,210,3.738,211,4.957,212,3.816,213,3.683,214,3.683,215,2.157,216,3.738,217,1.821,218,3.683,219,3.218,220,3.683,221,2.438,222,1.692,223,3.738,224,3.738,225,3.088,226,1.962,227,1.334,228,2.777,229,3.088]],["title/classes/ExponentiallyWeightedMovingAverage.html",[0,0.069,230,2.425]],["body/classes/ExponentiallyWeightedMovingAverage.html",[0,0.085,2,0.174,3,0.237,4,0.12,6,0.155,10,0.761,13,0.772,14,0.023,16,0.549,19,0.641,20,0.102,21,0.977,22,1.313,23,2.052,26,1.004,29,0.355,40,0.919,41,0.735,42,1.609,43,1.09,44,0.935,45,0.723,47,0.6,57,0.174,61,0.481,66,0.727,67,0.827,71,1.259,81,0.265,82,0.193,86,0.359,87,0.032,89,0.39,90,0.543,91,0.724,100,0.011,101,0.011,107,2.539,109,1.806,112,1.475,113,0.977,114,1.099,115,1.998,123,2.132,126,1.232,139,2.248,153,1.184,156,0.819,169,1.176,196,0.679,209,3.167,215,1.031,217,1.599,219,2.511,221,1.902,230,4.57,231,5.121,232,1.613,233,4.165,234,4.165,235,4.272,236,3.074,237,5.785,238,4.148,239,4.165,240,4.165,241,4.165,242,4.165,243,4.165,244,4.165,245,4.911,246,5.52,247,3.453,248,4.165,249,3.972,250,4.483,251,3.074,252,4.165,253,4.723,254,3.074,255,3.878,256,3.609,257,2.369,258,4.165,259,2.175,260,5.455,261,5.455,262,2.369,263,3.568,264,2.369,265,3.33,266,2.369,267,2.369,268,2.369,269,2.369,270,3.33,271,2.369,272,2.369,273,2.369,274,1.792,275,2.369,276,4.165,277,2.248,278,2.369,279,3.724,280,2.369,281,2.369,282,2.369,283,2.248,284,2.808,285,3.074,286,2.721,287,3.074,288,3.074,289,3.074,290,3.074,291,2.369,292,1.475,293,2.017,294,2.017,295,2.978,296,1.262,297,1.613,298,2.017,299,1.262,300,2.017,301,1.36,302,3.724,303,3.074,304,3.074,305,2.017,306,2.017,307,4.723,308,2.017,309,3.297]],["title/interfaces/Gauge.html",[87,0.031,310,1.455]],["body/interfaces/Gauge.html",[0,0.107,1,1.735,2,0.317,3,0.36,4,0.218,6,0.431,8,2.477,9,1.214,10,0.855,14,0.023,15,1.67,16,0.8,20,0.186,22,1.04,26,0.879,29,0.54,40,0.858,41,0.648,43,1.096,44,1.176,45,0.462,47,0.717,51,1.627,57,0.403,61,0.468,67,1.144,71,0.979,81,0.403,82,0.351,86,0.468,87,0.054,88,1.494,89,0.397,90,0.536,91,0.76,92,1.763,93,2.141,100,0.017,101,0.017,109,2,113,1.488,146,2.686,154,2.686,156,0.979,190,1.763,196,1.237,200,2.686,207,1.763,222,1.472,310,2.898,311,3.252,312,3.744,313,3.055,314,4.313,315,4.34,316,2.937,317,1.876,318,3.252,319,4.259,320,3.744,321,3.673]],["title/interfaces/Groupable.html",[83,2.218,87,0.031]],["body/interfaces/Groupable.html",[2,0.358,3,0.389,4,0.246,6,0.389,8,3.409,9,1.182,14,0.023,15,1.804,16,0.896,18,3.152,20,0.211,29,0.583,31,3.547,36,3.409,41,0.522,45,0.636,51,1.823,57,0.358,58,1.43,61,0.47,66,0.811,67,0.922,71,1.347,74,3.162,81,0.358,82,0.397,83,4.249,86,0.436,87,0.06,89,0.389,90,0.483,91,0.612,100,0.018,101,0.018,104,2.149,317,2.582,322,4.154,323,5.935,324,4.877,325,4.877]],["title/classes/Histogram.html",[0,0.069,194,1.768]],["body/classes/Histogram.html",[0,0.091,1,1.997,2,0.194,3,0.257,4,0.134,6,0.438,9,1.187,10,0.859,14,0.023,15,0.805,16,0.88,17,2.755,18,2.403,19,0.717,20,0.114,21,1.063,22,1.265,23,1.421,24,1.798,25,2.513,26,1.049,27,2.254,28,3.172,29,0.386,30,2.686,31,2.492,32,2.686,33,2.942,34,2.254,35,2.254,36,2.254,37,2.254,38,2.254,39,2.492,40,0.88,41,0.743,42,1.495,43,1.063,44,1,45,0.755,47,0.919,48,1.521,49,2.254,50,1.411,51,1.832,54,1.521,57,0.425,58,1.127,61,0.511,64,1.411,66,1.023,67,1.241,69,1.411,71,1.359,72,1.521,74,1.411,76,1.521,78,1.411,81,0.451,82,0.216,86,0.288,88,1.062,89,0.379,90,0.501,91,0.649,92,1.083,93,1.315,100,0.016,101,0.012,104,1.873,109,1.193,113,1.4,123,2.302,143,2.96,148,3.347,151,2.568,153,0.717,156,0.891,157,2.674,158,4.254,190,1.083,194,3.291,196,1.126,201,3.274,208,2.447,209,3.276,219,2.254,247,3.276,259,0.853,309,1.997,326,2.256,327,2.96,328,3.925,329,3.925,330,3.925,331,3.221,332,3.9,333,3.9,334,3.925,335,3.925,336,2.649,337,3.925,338,5.172,339,4.405,340,2.649,341,3.607,342,1.997,343,1.997,344,1.997,345,1.997,346,1.997,347,1.997,348,2.649,349,2.649,350,2.649,351,2.649,352,1.997,353,1.997,354,1.997,355,1.997,356,1.997,357,1.997,358,1.997,359,1.997,360,1.997,361,1.997,362,1.997,363,1.521,364,2.649,365,3.925,366,2.649,367,2.649,368,2.649]],["title/classes/Int64Wrapper.html",[0,0.069,341,2.045]],["body/classes/Int64Wrapper.html",[0,0.127,2,0.311,3,0.278,4,0.214,6,0.278,14,0.023,16,0.683,19,1.148,20,0.183,21,1.472,22,1.197,26,1.027,29,0.534,39,3.373,40,0.888,41,0.678,43,1.093,44,0.907,45,0.701,47,1.053,51,1.672,58,1.021,61,0.5,66,0.904,67,1.028,71,1.235,85,4.1,86,0.399,89,0.356,90,0.533,91,0.683,100,0.017,101,0.017,126,1.447,146,2.641,153,1.148,156,1.235,217,1.652,221,2.755,341,4.035,363,2.435,369,3.197,370,4.631,371,5.437,372,6.332,373,6.332,374,6.332,375,5.437,376,5.437,377,5.437,378,4.24,379,4.24,380,6.332,381,5.437,382,5.437,383,5.437,384,5.393,385,4.24,386,4.631,387,4.1,388,3.611,389,3.611,390,4.24,391,5.437,392,4.24,393,4.24,394,4.24,395,4.24]],["title/interfaces/LengthAttributeInterface.html",[87,0.031,396,2.045]],["body/interfaces/LengthAttributeInterface.html",[0,0.091,1,1.543,2,0.25,3,0.308,4,0.172,6,0.38,9,1.03,10,0.731,13,1.005,14,0.023,15,1.035,16,0.676,20,0.147,21,1.272,22,0.889,23,1.997,25,2.686,26,0.683,29,0.462,40,0.856,41,0.576,43,0.53,47,0.567,51,1.482,57,0.345,61,0.501,81,0.395,82,0.278,86,0.496,87,0.062,88,1.067,89,0.308,90,0.525,91,0.81,100,0.015,101,0.015,109,1.428,137,2.572,153,1.272,156,0.773,190,1.392,196,1.543,197,2.101,207,2.686,215,1.482,217,1.763,222,1.605,227,2.621,259,1.514,274,1.691,310,2.488,313,1.581,317,1.482,396,3.704,397,1.956,398,1.815,399,4.146,400,3.916,401,3.665,402,3.615,403,3.615,404,3.615,405,3.352,406,4.205,407,3.952,408,2.32,409,3.952,410,3.952,411,2.32,412,2.32,413,3.952,414,2.32,415,2.32,416,2.32,417,2.32,418,2.32,419,4.287,420,2.32,421,2.32,422,2.32]],["title/interfaces/LengthMethodInterface.html",[87,0.031,402,2.045]],["body/interfaces/LengthMethodInterface.html",[0,0.091,1,1.543,2,0.25,3,0.308,4,0.172,6,0.38,9,1.03,10,0.731,13,1.005,14,0.023,15,1.035,16,0.676,20,0.147,22,0.889,23,1.997,25,2.686,26,0.683,29,0.598,40,0.848,41,0.503,43,0.53,45,0.365,47,0.567,51,1.482,57,0.345,61,0.505,81,0.395,82,0.278,86,0.496,87,0.062,88,1.067,89,0.308,90,0.525,91,0.81,100,0.015,101,0.015,109,1.428,137,2.572,153,1.272,156,0.773,190,1.392,196,1.348,197,2.101,207,2.686,215,1.482,217,1.763,222,1.163,227,2.621,259,1.514,274,1.691,310,2.488,313,1.581,317,1.482,396,3.615,397,2.7,398,1.815,399,4.146,400,3.916,401,3.201,402,3.704,403,3.615,404,3.615,405,3.352,406,4.205,407,3.952,408,2.32,409,3.952,410,3.952,411,2.32,412,2.32,413,3.952,414,2.32,415,2.32,416,2.32,417,2.32,418,2.32,419,4.287,420,2.32,421,2.32,422,2.32,423,3.407]],["title/interfaces/Logger.html",[87,0.031,424,2.685]],["body/interfaces/Logger.html",[2,0.509,3,0.403,4,0.261,6,0.339,7,3.276,13,1.532,14,0.023,20,0.223,21,1.664,41,0.727,57,0.38,81,0.38,82,0.421,86,0.451,87,0.058,100,0.019,101,0.019,104,2.227,176,5.119,424,5.228,425,4.405,426,5.237,427,6.789,428,6.789,429,6.789]],["title/interfaces/Metered.html",[87,0.031,430,1.897]],["body/interfaces/Metered.html",[2,0.318,3,0.362,4,0.219,6,0.284,9,1.215,10,0.858,13,1.18,14,0.023,20,0.187,29,0.542,40,0.911,45,0.706,57,0.318,61,0.518,81,0.405,82,0.353,86,0.405,87,0.054,88,1.378,89,0.462,90,0.537,100,0.017,101,0.017,113,1.493,151,3.17,196,1.582,215,2.401,263,3.169,265,3.758,277,4.509,284,3.87,292,3.436,299,3.59,301,3.667,430,3.693,431,3.694,432,4.16,433,3.169,434,4.699,435,5.439,436,5.439,437,5.439,438,5.439,439,4.337,440,4.337,441,4.337,442,4.337,443,5.517,444,4.337,445,4.197]],["title/interfaces/Metric.html",[9,0.632,87,0.031]],["body/interfaces/Metric.html",[0,0.106,1,1.895,2,0.256,3,0.313,4,0.176,5,2.628,6,0.445,7,2.902,8,2.002,9,1.285,10,0.847,11,2.969,12,2.969,13,0.745,14,0.023,15,2.008,16,0.867,17,2.902,18,2.549,20,0.151,22,0.903,23,1.655,24,1.34,25,2.701,26,1.002,27,2.002,28,3.128,29,0.469,30,3.525,31,1.857,32,3.525,33,1.857,35,2.742,37,2.742,39,1.857,40,0.684,41,0.695,43,0.743,44,0.745,45,0.627,47,0.906,48,2.002,49,2.742,50,1.857,51,1.867,54,2.002,57,0.465,58,0.84,61,0.51,64,1.857,66,0.794,67,0.903,69,1.857,71,1.522,72,3.128,74,1.857,76,3.128,78,1.857,81,0.4,82,0.284,83,3.822,84,3.649,85,3.6,86,0.43,87,0.048,88,1.33,89,0.384,90,0.552,91,0.599,92,2.226,93,2.37,94,4.639,95,2.969,96,2.969,97,2.969,98,2.969,99,2.969,100,0.015,101,0.015,446,3.486,447,3.486,448,3.486,449,3.486]],["title/classes/MetricRegistration.html",[0,0.069,450,2.425]],["body/classes/MetricRegistration.html",[0,0.083,1,0.778,2,0.087,3,0.135,4,0.06,6,0.366,9,1.27,10,0.32,13,0.691,14,0.023,15,1.214,16,0.873,18,2.505,19,0.322,20,0.185,21,0.556,22,1.141,23,1.773,24,2.483,26,1.014,40,0.258,41,0.574,42,0.875,44,0.691,45,0.291,47,1.154,51,1.827,57,0.478,58,1.453,61,0.522,66,0.198,67,0.225,71,1.267,81,0.374,82,0.097,86,0.315,88,0.466,89,0.377,90,0.558,91,0.872,92,0.486,100,0.006,101,0.006,102,2.897,104,2.163,105,2.603,113,0.322,117,2.355,120,0.59,126,2.039,136,1.094,137,2.08,147,3.182,151,0.59,153,0.322,156,0.616,169,1.984,189,1.848,194,3.073,196,0.589,197,2.302,201,2.488,217,1.442,221,1.739,222,1.364,227,0.744,259,1.287,283,1.279,310,2.014,312,1.848,315,3.974,316,2.201,387,0.896,430,3.298,450,3.086,451,1.722,452,0.74,453,1.75,454,3.404,455,1.75,456,3.65,457,1.75,458,2.054,459,1.188,460,2.83,461,2.788,462,3.651,463,2.489,464,0.74,465,3.856,466,3.417,467,2.311,468,3.11,469,1.549,470,1.012,471,2.295,472,1.012,473,2.669,474,3.93,475,1.012,476,4.903,477,1.012,478,1.012,479,1.012,480,3.86,481,1.012,482,5.312,483,3.65,484,1.012,485,1.012,486,1.012,487,1.012,488,1.012,489,1.012,490,1.012,491,1.75,492,1.012,493,1.75,494,1.75,495,1.75,496,1.012,497,1.75,498,1.012,499,1.012,500,1.012,501,0.896,502,2.311,503,1.75,504,2.669,505,1.012,506,1.012,507,1.012,508,1.012,509,1.012,510,0.896,511,1.012,512,1.012,513,1.012,514,1.012,515,1.012,516,1.012,517,1.012,518,2.753,519,1.012,520,4.4,521,4.4,522,4.341,523,1.75,524,4.4,525,4.751,526,1.75,527,3.404,528,3.404,529,4.457,530,1.75,531,1.012,532,1.75,533,1.75,534,1.012,535,1.75,536,1.75,537,1.012,538,1.75,539,1.75,540,1.012,541,1.75,542,3.232,543,3.404,544,1.012,545,1.012,546,0.896,547,0.896,548,1.012,549,1.75,550,1.012,551,1.012,552,3.11,553,1.012,554,1.012,555,1.012,556,1.012,557,1.012,558,1.012,559,1.012,560,1.012,561,1.012,562,1.012,563,1.012,564,1.012,565,1.012,566,4.04,567,1.012,568,1.012,569,1.012,570,1.012,571,1.012,572,1.012,573,1.012,574,3.404,575,1.012,576,1.012,577,1.75,578,1.75,579,1.012,580,1.75,581,1.75,582,1.012,583,1.012,584,1.012,585,1.012,586,1.012,587,3.11,588,1.012,589,1.012,590,1.012,591,1.012,592,3.65,593,3.11,594,1.012,595,4.341,596,1.012,597,1.75,598,1.75,599,1.012,600,1.012,601,1.75,602,1.012,603,1.012,604,1.75,605,0.896,606,1.012,607,1.012,608,1.75,609,1.012,610,1.75,611,0.896,612,1.012,613,1.012,614,1.012,615,1.012,616,1.012,617,1.012,618,1.012,619,1.012,620,1.012,621,1.75,622,1.75,623,1.75,624,1.75,625,1.75,626,1.012,627,1.75,628,1.012,629,1.012,630,1.012,631,1.012,632,1.012,633,1.012,634,1.012,635,1.012,636,1.012,637,1.012,638,1.012,639,1.012,640,1.75,641,1.012,642,1.012,643,1.012,644,1.012,645,1.012,646,1.012,647,1.012,648,1.012,649,1.012,650,1.012,651,1.012,652,1.012,653,1.012,654,1.549,655,0.74,656,1.012,657,1.75,658,1.012,659,1.012,660,1.012]],["title/interfaces/MetricRegistryListener.html",[87,0.031,460,2.045]],["body/interfaces/MetricRegistryListener.html",[2,0.339,3,0.377,4,0.233,6,0.377,9,1.315,14,0.023,16,0.881,20,0.2,29,0.565,41,0.615,45,0.615,51,1.792,57,0.339,61,0.422,66,0.956,67,1.086,71,1.484,81,0.422,82,0.377,86,0.422,87,0.059,90,0.468,91,0.82,100,0.018,101,0.018,137,2.348,197,2.08,433,3.753,451,3.329,460,3.86,461,3.329,462,3.912,471,3.753,474,3.753,655,3.578,661,3.488,662,4.893,663,5.745,664,4.893,665,5.745,666,5.745,667,4.893,668,4.625,669,4.893,670,4.625]],["title/classes/MetricRegistryListenerRegistration.html",[0,0.069,473,2.218]],["body/classes/MetricRegistryListenerRegistration.html",[0,0.084,1,0.78,2,0.087,3,0.135,4,0.06,6,0.366,9,1.268,10,0.321,13,0.693,14,0.023,15,1.217,16,0.867,18,2.47,19,0.323,20,0.185,22,1.142,23,1.775,24,2.484,26,1.012,29,0.202,40,0.259,41,0.546,42,0.877,44,0.693,45,0.221,47,1.154,51,1.826,57,0.479,58,1.454,61,0.523,66,0.198,67,0.225,71,1.289,81,0.374,82,0.097,86,0.315,88,0.468,89,0.378,90,0.559,91,0.872,92,0.487,100,0.006,101,0.006,102,2.899,104,2.187,105,2.607,113,0.558,117,2.253,120,0.592,126,2.041,136,1.097,137,2.017,147,3.184,151,0.592,153,0.323,156,0.618,169,1.987,189,1.853,194,3.076,196,0.342,197,2.304,201,2.491,217,1.444,221,1.742,222,1.367,227,0.746,259,1.289,283,0.742,310,2.017,312,1.853,315,3.733,316,2.206,387,0.899,430,3.301,450,2.727,451,1.449,452,0.742,453,1.015,454,2.759,455,1.015,456,2.317,457,1.015,460,3.082,461,3.025,462,3.867,463,2.493,464,0.742,465,3.858,466,3.422,467,2.317,468,3.116,469,2.051,470,1.754,471,2.927,472,1.754,473,2.959,474,3.946,475,1.015,476,4.974,477,1.015,478,1.015,479,1.015,480,3.866,481,1.015,482,5.315,483,3.656,484,1.015,485,1.015,486,1.015,487,1.015,488,1.015,489,1.015,490,1.015,491,1.754,492,1.015,493,1.754,494,1.754,495,1.754,496,1.015,497,1.754,498,1.015,499,1.015,500,1.015,501,0.899,502,2.317,503,1.754,504,2.674,505,1.015,506,1.015,507,1.015,508,1.015,509,1.015,510,0.899,511,1.015,512,1.015,513,1.015,514,1.015,515,1.015,516,1.015,517,1.015,518,2.759,519,1.015,520,4.403,521,4.403,522,4.345,523,1.754,524,4.403,525,4.756,526,1.754,527,3.41,528,3.41,529,4.462,530,1.754,531,1.015,532,1.754,533,1.754,534,1.015,535,1.754,536,1.754,537,1.015,538,1.754,539,1.754,540,1.015,541,1.754,542,3.237,543,3.41,544,1.015,545,1.015,546,0.899,547,0.899,548,1.015,549,1.754,550,1.015,551,1.015,552,3.116,553,1.015,554,1.015,555,1.015,556,1.015,557,1.015,558,1.015,559,1.015,560,1.015,561,1.015,562,1.015,563,1.015,564,1.015,565,1.015,566,4.046,567,1.015,568,1.015,569,1.015,570,1.015,571,1.015,572,1.015,573,1.015,574,3.41,575,1.015,576,1.015,577,1.754,578,1.754,579,1.015,580,1.754,581,1.754,582,1.015,583,1.015,584,1.015,585,1.015,586,1.015,587,3.116,588,1.015,589,1.015,590,1.015,591,1.015,592,3.656,593,3.116,594,1.015,595,4.345,596,1.015,597,1.754,598,1.754,599,1.015,600,1.015,601,1.754,602,1.015,603,1.015,604,1.754,605,0.899,606,1.015,607,1.015,608,1.754,609,1.015,610,1.754,611,0.899,612,1.015,613,1.015,614,1.015,615,1.015,616,1.015,617,1.015,618,1.015,619,1.015,620,1.015,621,1.754,622,1.754,623,1.754,624,1.754,625,1.754,626,1.015,627,1.754,628,1.015,629,1.015,630,1.015,631,1.015,632,1.015,633,1.015,634,1.015,635,1.015,636,1.015,637,1.015,638,1.015,639,1.015,640,1.754,641,1.015,642,1.015,643,1.015,644,1.015,645,1.015,646,1.015,647,1.015,648,1.015,649,1.015,650,1.015,651,1.015,652,1.015,653,1.015,654,1.553,655,0.742,656,1.015,657,1.754,658,1.015,659,1.015,660,1.015,671,1.192,672,1.192,673,1.192]],["title/classes/MetricReporter.html",[0,0.069,674,2.425]],["body/classes/MetricReporter.html",[0,0.126,2,0.301,3,0.349,4,0.207,6,0.269,7,3.722,8,3.057,9,1.2,10,1.033,14,0.023,16,0.668,19,1.11,20,0.255,21,1.441,25,2.555,26,1.028,29,0.523,40,0.515,41,0.67,42,1.11,43,0.638,45,0.694,47,0.885,57,0.301,58,1.282,61,0.459,66,0.885,67,1.007,71,1.556,81,0.391,82,0.334,86,0.391,90,0.528,91,0.668,100,0.017,101,0.017,126,1.4,169,2.642,197,2.14,221,2.316,259,1.714,317,2.981,433,3.591,451,3.538,461,2.185,471,3.057,474,4.22,655,3.315,674,4.667,675,2.793,676,5.322,677,5.322,678,4.522,679,5.007,680,4.101,681,5.322,682,4.101,683,5.322,684,4.101,685,5.322,686,4.101,687,4.101,688,4.101,689,4.101,690,4.101]],["title/interfaces/MetricSet.html",[87,0.031,463,2.218]],["body/interfaces/MetricSet.html",[2,0.357,3,0.388,4,0.246,6,0.319,9,1.3,14,0.023,16,0.744,20,0.21,29,0.582,45,0.635,47,1.153,57,0.509,61,0.488,81,0.435,82,0.396,86,0.435,87,0.057,88,1.451,89,0.436,90,0.483,100,0.018,101,0.018,104,1.762,113,1.604,197,2.146,227,2.146,451,3.404,463,4.246,520,3.668,521,3.668,522,3.668,524,3.668,542,4.468,546,5.015,547,5.141,691,3.668,692,5.047,693,4.865,694,4.865]],["title/classes/MonotoneCounter.html",[0,0.069,147,1.897]],["body/classes/MonotoneCounter.html",[0,0.1,1,2.034,2,0.228,3,0.289,4,0.157,6,0.45,9,1.176,10,0.867,14,0.023,15,1.34,16,0.89,17,2.97,18,2.561,19,0.841,20,0.134,21,1.193,22,0.969,23,1.557,24,2.417,25,2.739,26,1.055,27,2.532,28,3.38,29,0.433,30,2.942,31,2.729,32,2.942,33,3.136,34,2.532,35,2.532,36,2.532,37,2.532,38,2.532,39,2.729,40,0.873,41,0.745,42,1.509,43,1.087,44,1.307,45,0.762,47,0.979,48,1.785,49,2.532,50,1.656,51,1.855,54,1.785,57,0.449,58,0.749,61,0.504,64,1.656,66,1.069,67,1.28,69,1.656,71,1.458,72,1.785,74,1.656,76,1.785,78,1.656,81,0.376,82,0.253,86,0.324,88,1.163,89,0.204,90,0.417,91,0.643,92,1.27,93,1.543,100,0.014,101,0.014,109,1.858,142,2.344,143,4.203,146,2.746,147,3.422,148,3.387,150,3.755,151,2.543,152,4.363,153,0.841,154,2.746,156,1.001,157,3.002,158,4.352,160,3.755,169,2.189,170,3.755,171,3.755,175,3.755,176,3.324,189,3.002,190,1.27,342,2.344,343,2.344,344,2.344,345,2.344,346,2.344,347,2.344,352,2.344,353,2.344,354,2.344,355,2.344,356,2.344,357,2.344,358,2.344,359,2.344,360,2.344,361,2.344,362,2.344,695,4.408,696,3.108,697,3.108,698,3.108]],["title/interfaces/MovingAverage.html",[87,0.031,238,2.425]],["body/interfaces/MovingAverage.html",[0,0.082,2,0.213,3,0.275,4,0.146,6,0.19,10,0.841,13,0.621,14,0.023,16,0.527,20,0.125,22,1.264,23,1.815,26,0.97,29,0.413,40,0.911,41,0.676,43,1.071,44,0.898,45,0.579,47,0.483,57,0.213,61,0.495,66,0.698,67,0.794,71,1.356,81,0.308,82,0.236,86,0.397,87,0.044,89,0.404,90,0.561,91,0.773,100,0.013,101,0.013,107,2.518,109,1.642,112,2.614,113,1.462,114,1.948,115,2.015,123,1.896,126,1.433,139,1.807,153,0.786,156,0.659,169,2.084,196,1.204,209,3.361,215,1.826,217,1.642,219,2.832,221,2.145,230,4.661,231,4.322,232,1.977,233,3.575,234,3.575,235,4.262,236,2.472,237,5.69,238,4.378,239,2.472,240,2.472,241,2.472,242,2.472,243,2.472,244,2.472,245,4.601,246,5.088,247,3.282,248,2.472,249,3.93,250,4.881,251,3.575,252,2.472,253,5.247,254,2.472,255,3.872,258,3.575,259,2.07,260,5.088,261,5.088,263,3.292,265,2.858,270,3.358,274,1.441,276,3.575,277,1.807,279,4.199,283,1.807,284,2.41,285,2.472,286,2.188,287,2.472,288,2.472,289,2.472,290,2.472,292,2.614,293,3.575,294,3.575,295,4.069,296,2.236,297,2.858,298,3.575,299,2.236,300,3.575,301,2.41,302,4.199,303,3.575,304,3.575,305,2.472,306,2.472,307,5.088,308,2.472,309,3.718,699,2.902,700,2.902,701,2.902,702,2.902]],["title/interfaces/Reservoir.html",[87,0.031,201,1.653]],["body/interfaces/Reservoir.html",[0,0.102,2,0.296,3,0.345,4,0.203,6,0.264,10,0.911,14,0.023,16,0.505,20,0.174,22,1.174,26,0.85,29,0.517,40,0.915,41,0.627,43,1.124,45,0.627,47,0.67,57,0.296,58,1.411,61,0.494,66,0.67,67,0.761,71,1.33,81,0.386,82,0.328,86,0.456,87,0.052,89,0.384,90,0.556,91,0.735,100,0.016,101,0.016,113,1.423,156,1.33,198,4.251,199,2.742,200,2.508,201,3.334,202,4.012,203,4.416,204,3.965,205,3.965,206,4.416,207,2.633,208,2.867,209,2.802,210,3.036,212,3.989,215,1.752,216,3.036,217,1.598,219,3.363,221,2.548,222,1.375,223,3.036,224,3.036,225,2.508,226,2.145,227,1.904,228,3.036,229,3.275,703,4.026,704,4.026,705,4.026]],["title/interfaces/Sampling.html",[87,0.031,123,1.369]],["body/interfaces/Sampling.html",[0,0.12,2,0.381,3,0.404,4,0.262,6,0.34,9,1.094,14,0.023,20,0.224,29,0.606,43,1.058,45,0.556,57,0.381,61,0.452,81,0.452,82,0.423,86,0.452,87,0.061,89,0.404,90,0.423,100,0.019,101,0.019,123,2.614,208,2.947,332,5.126,504,3.839,706,4.424,707,5.249,708,5.194]],["title/classes/SimpleGauge.html",[0,0.069,319,2.218]],["body/classes/SimpleGauge.html",[0,0.098,1,2.026,2,0.22,3,0.281,4,0.151,6,0.448,8,2.465,9,1.204,10,0.781,14,0.023,15,1.763,16,0.892,17,2.92,18,2.524,19,0.811,20,0.129,21,1.162,22,1.142,23,1.525,24,1.929,25,2.6,26,1.05,27,2.465,28,3.332,29,0.422,30,2.882,31,2.673,32,2.882,33,3.091,34,2.465,35,2.465,36,2.465,37,2.465,38,2.465,39,2.673,40,0.877,41,0.745,42,1.484,43,1.099,44,1.241,45,0.756,47,0.965,48,1.72,49,2.465,50,1.595,51,1.85,54,1.72,57,0.467,58,0.721,61,0.508,64,1.595,66,1.058,67,1.292,69,1.595,71,1.412,72,1.72,74,1.595,76,1.72,78,1.595,81,0.315,82,0.244,86,0.402,87,0.038,88,1.317,89,0.329,90,0.473,91,0.63,92,1.224,93,1.487,100,0.013,101,0.013,109,1.89,113,0.811,146,2.674,153,0.811,154,2.674,156,0.975,157,2.924,158,4.33,190,1.224,196,1.231,200,2.674,207,1.754,222,1.466,310,2.686,311,2.258,312,2.039,313,2.693,315,3.418,316,2.039,317,1.868,318,3.237,319,4.034,320,2.924,321,3.656,342,2.258,343,2.258,344,2.258,345,2.258,346,2.258,347,2.258,352,2.258,353,2.258,354,2.258,355,2.258,356,2.258,357,2.258,358,2.258,359,2.258,360,2.258,361,2.258,362,2.258,709,4.293,710,4.293,711,2.995,712,2.995]],["title/classes/SimpleSnapshot.html",[0,0.069,226,1.897]],["body/classes/SimpleSnapshot.html",[0,0.082,2,0.164,3,0.226,4,0.113,6,0.146,10,0.797,14,0.023,16,0.433,19,0.605,20,0.221,21,0.934,22,0.897,23,0.679,26,1.04,29,0.339,40,0.924,41,0.508,42,1.141,43,1.135,44,1.247,45,0.7,47,0.574,57,0.164,61,0.534,66,0.574,67,0.653,81,0.164,82,0.182,86,0.348,87,0.042,89,0.456,90,0.569,91,0.529,100,0.011,101,0.011,120,1.713,126,1.85,153,0.605,156,0.783,196,0.99,197,0.809,202,1.391,207,2.095,208,2.766,217,1.281,222,2.088,225,2.149,226,3.606,227,1.527,229,3.633,235,3.374,247,2.731,259,1.527,263,1.982,270,1.521,284,1.982,297,2.35,313,2.621,320,2.871,400,1.982,433,3.629,445,2.149,713,1.684,714,4.365,715,4.365,716,4.365,717,4.365,718,4.365,719,4.365,720,4.365,721,4.365,722,4.365,723,4.365,724,2.939,725,3.45,726,4.039,727,2.234,728,2.939,729,3.179,730,5.794,731,2.234,732,2.939,733,3.179,734,2.234,735,2.939,736,3.591,737,2.234,738,2.939,739,3.591,740,2.234,741,2.939,742,3.591,743,2.234,744,2.234,745,2.234,746,2.939,747,3.865,748,2.234,749,2.234,750,3.591,751,3.591,752,2.234,753,2.939,754,2.602,755,2.939,756,2.602,757,2.602,758,2.939,759,2.939,760,2.939,761,2.939,762,2.939,763,2.602,764,4.81,765,2.939,766,2.602,767,2.939,768,2.939,769,2.939,770,2.939,771,2.939,772,2.939,773,2.939,774,3.591,775,2.234,776,2.234,777,1.902,778,1.902,779,1.902,780,1.902,781,1.902,782,2.602,783,1.902,784,1.902,785,1.902,786,1.902,787,1.902,788,1.902,789,1.902,790,1.902,791,2.939,792,1.902,793,2.626,794,1.902,795,1.902,796,2.939,797,1.902,798,1.902,799,3.591,800,2.939,801,2.939,802,1.902]],["title/interfaces/SizeAttributeInterface.html",[87,0.031,404,2.045]],["body/interfaces/SizeAttributeInterface.html",[0,0.091,1,1.543,2,0.25,3,0.308,4,0.172,6,0.38,9,1.03,10,0.731,13,1.005,14,0.023,15,1.427,16,0.675,20,0.147,21,1.271,22,0.888,23,1.997,25,2.685,26,0.682,29,0.462,40,0.856,41,0.576,43,0.53,47,0.566,51,1.481,57,0.395,61,0.5,81,0.395,82,0.277,86,0.495,87,0.062,88,1.067,89,0.308,90,0.525,91,0.809,100,0.015,101,0.015,109,1.427,137,2.571,153,1.271,156,0.773,190,1.391,196,1.543,197,2.1,207,2.81,215,1.481,217,1.762,222,1.162,227,2.621,259,1.513,274,1.69,310,2.487,313,1.58,317,1.481,396,3.614,397,1.955,398,1.813,399,4.145,400,3.703,401,3.663,402,3.614,403,3.614,404,3.703,405,3.35,406,4.204,407,3.95,408,2.318,409,3.95,410,3.95,411,2.318,412,2.318,413,3.95,414,2.318,415,2.318,416,2.318,417,2.318,418,2.318,419,4.285,420,2.318,421,2.318,422,2.318]],["title/interfaces/SizeMethodInterface.html",[87,0.031,403,2.045]],["body/interfaces/SizeMethodInterface.html",[0,0.091,1,1.543,2,0.25,3,0.308,4,0.172,6,0.38,9,1.03,10,0.731,13,1.005,14,0.023,15,1.035,16,0.676,20,0.147,22,0.889,23,1.997,25,2.686,26,0.683,29,0.598,40,0.848,41,0.503,43,0.53,45,0.365,47,0.567,51,1.482,57,0.345,61,0.505,81,0.395,82,0.278,86,0.496,87,0.062,88,1.067,89,0.308,90,0.525,91,0.81,100,0.015,101,0.015,109,1.428,137,2.572,153,1.272,156,0.773,190,1.392,196,1.348,197,2.101,207,2.81,215,1.482,217,1.763,222,1.163,227,2.621,259,1.514,274,1.691,310,2.488,313,1.581,317,1.482,396,3.615,397,2.7,398,1.815,399,4.146,400,3.704,401,3.201,402,3.615,403,3.704,404,3.615,405,3.352,406,4.205,407,3.952,408,2.32,409,3.952,410,3.952,411,2.32,412,2.32,413,3.952,414,2.32,415,2.32,416,2.32,417,2.32,418,2.32,419,4.287,420,2.32,421,2.32,422,2.32,803,3.407]],["title/classes/SlidingWindowReservoir.html",[0,0.069,464,2.218]],["body/classes/SlidingWindowReservoir.html",[0,0.108,2,0.267,3,0.323,4,0.184,6,0.239,10,0.929,14,0.023,16,0.618,19,0.986,20,0.269,21,1.332,22,1.294,26,0.993,29,0.484,40,0.921,41,0.703,42,1.332,43,1.138,44,0.779,45,0.703,47,0.819,57,0.267,58,1.342,61,0.482,66,0.819,67,0.931,71,1.265,81,0.361,82,0.297,86,0.438,87,0.044,89,0.365,90,0.544,91,0.7,100,0.015,101,0.015,104,1.32,109,1.107,113,0.986,153,0.986,156,1.355,198,4.159,199,2.482,200,2.27,201,3.307,202,4.089,203,4.843,204,3.711,205,3.711,206,4.951,207,2.547,208,2.82,209,2.622,210,3.711,212,4.245,215,1.586,216,2.748,217,1.496,219,3.201,221,2.425,222,2.037,223,3.711,224,2.748,225,2.27,226,1.942,227,1.32,228,2.748,229,3.065,464,3.065,662,3.104,664,3.104,804,3.644,805,4.922,806,4.922,807,4.922,808,3.644,809,3.644,810,3.644,811,3.644,812,3.644]],["title/interfaces/Snapshot.html",[87,0.031,208,1.455]],["body/interfaces/Snapshot.html",[0,0.071,2,0.177,3,0.239,4,0.121,6,0.158,10,0.687,14,0.023,16,0.302,20,0.213,22,0.691,23,1.11,26,0.954,29,0.359,40,0.925,41,0.391,42,0.651,43,1.131,44,1.277,45,0.696,47,0.4,57,0.177,61,0.536,66,0.4,67,0.455,81,0.177,82,0.196,86,0.362,87,0.044,89,0.466,90,0.573,91,0.554,100,0.011,101,0.011,120,1.195,126,1.905,156,0.546,196,0.69,197,0.871,202,2.275,207,2.166,208,2.782,217,1.342,222,1.809,225,1.499,226,3.607,227,1.599,229,3.72,235,3.475,247,2.824,259,1.588,263,1.382,270,1.639,284,1.382,297,1.639,313,2.691,320,3.007,400,1.382,433,3.205,445,2.275,713,1.815,714,4.514,715,4.514,716,4.514,717,4.514,718,4.514,719,4.514,720,4.514,721,4.514,722,4.514,723,4.514,724,2.05,726,3.111,728,2.05,729,3.329,730,5.855,732,2.05,733,3.329,735,2.05,736,3.761,738,2.05,739,3.761,741,2.05,742,3.761,746,2.05,747,3.717,750,3.761,751,3.761,753,2.05,754,1.815,755,2.05,756,1.815,757,1.815,758,2.05,759,2.05,760,2.05,761,2.05,762,2.05,763,1.815,764,4.752,765,2.05,766,1.815,767,2.05,768,2.05,769,2.05,770,2.05,771,2.05,772,2.05,773,2.05,774,3.111,777,3.111,778,3.111,779,2.05,780,2.05,781,2.05,782,2.754,783,2.05,784,2.05,785,2.05,786,2.05,787,2.05,788,2.05,789,2.05,790,2.05,791,3.111,792,2.05,793,2.75,794,2.05,795,2.05,796,3.111,797,2.05,798,2.05,799,3.761,800,3.111,801,3.111,802,2.05,813,2.406,814,2.406,815,2.406,816,2.406,817,2.406,818,2.406,819,2.406,820,2.406,821,2.406,822,2.406,823,2.406,824,2.406,825,2.406]],["title/classes/StdClock.html",[0,0.069,136,1.897]],["body/classes/StdClock.html",[0,0.126,2,0.299,3,0.409,4,0.206,6,0.267,7,3.597,10,0.971,13,0.872,14,0.023,19,1.104,20,0.176,26,0.963,29,0.521,40,0.832,42,1.435,44,1.134,45,0.568,57,0.299,61,0.512,66,0.882,81,0.299,82,0.332,86,0.502,87,0.047,88,1.338,89,0.386,90,0.432,91,0.666,100,0.016,101,0.016,102,3.511,103,2.54,104,2.134,105,2.343,106,3.076,107,3.021,109,1.612,110,4.029,111,3.999,112,3.303,113,1.104,114,2.462,115,2.71,116,2.778,117,2.926,118,4.25,119,2.778,120,2.025,121,2.778,122,2.778,123,2.039,124,2.54,125,2.778,126,2.012,127,3.999,128,3.076,129,3.076,130,3.612,131,3.999,132,3.076,133,3.076,134,4.443,135,3.999,136,3.324,137,2.167,138,3.999,139,3.303,140,3.999,141,3.999,158,2.54,826,4.079,827,4.079]],["title/classes/StopWatch.html",[0,0.069,828,2.425]],["body/classes/StopWatch.html",[0,0.116,1,1.325,2,0.191,3,0.253,4,0.131,6,0.336,9,0.82,10,0.719,13,1.095,14,0.023,15,1.556,16,0.721,19,0.703,20,0.112,21,1.047,22,1.295,26,1.004,29,0.38,40,0.837,41,0.681,44,0.555,45,0.615,47,0.769,51,1.308,57,0.191,58,1.233,61,0.51,66,0.432,67,0.491,71,1.35,81,0.48,82,0.211,86,0.376,88,0.878,89,0.409,90,0.566,91,0.767,92,1.061,93,1.289,100,0.012,101,0.012,102,3.504,104,1.983,105,2.654,107,2.498,115,2.498,123,1.969,124,4.214,126,1.32,148,1.289,151,1.289,153,0.703,156,1.049,190,1.061,194,3.101,197,2.154,201,2.665,208,2.238,221,2.383,235,2.878,247,1.383,249,2.654,255,2.654,259,0.836,263,1.491,265,1.768,274,1.92,277,3.576,284,3.145,295,3.147,296,2.462,299,2.462,301,2.941,317,1.683,331,2.878,332,1.957,333,1.957,341,2.654,363,1.491,370,3.294,430,3.438,432,4.329,435,2.211,436,2.211,437,2.211,438,2.211,445,1.617,465,4.514,504,1.617,510,1.957,605,1.957,611,1.957,654,2.916,678,4.163,679,3.861,793,1.617,828,4.539,829,2.211,830,3.867,831,6.112,832,4.621,833,3.867,834,2.596,835,2.596,836,2.596,837,2.634,838,2.596,839,3.867,840,5.741,841,3.867,842,2.596,843,2.596,844,5.947,845,2.596,846,2.596,847,2.596,848,2.596,849,2.596,850,2.596,851,2.596,852,5.121,853,2.596,854,2.596,855,2.596,856,2.596,857,2.596,858,2.596,859,2.596,860,3.867,861,2.596,862,3.867,863,2.596,864,2.596,865,3.867,866,2.596,867,4.621,868,2.596,869,2.596,870,3.294,871,2.596,872,2.596,873,2.596,874,2.596,875,2.596]],["title/interfaces/Summarizing.html",[87,0.031,331,2.218]],["body/interfaces/Summarizing.html",[0,0.12,2,0.381,3,0.404,4,0.262,6,0.34,9,1.094,14,0.023,20,0.224,29,0.606,43,1.058,45,0.556,57,0.381,61,0.452,81,0.452,82,0.423,86,0.452,87,0.061,89,0.404,90,0.423,100,0.019,101,0.019,247,3.622,331,4.234,333,5.126,341,3.904,363,2.983,504,3.839,707,5.249,876,4.424,877,5.194]],["title/interfaces/Taggable.html",[84,2.218,87,0.031]],["body/interfaces/Taggable.html",[0,0.11,2,0.331,3,0.371,4,0.228,6,0.296,14,0.023,15,1.718,16,0.884,17,3.721,20,0.195,29,0.556,33,3.626,34,3.247,38,3.247,41,0.662,43,1.008,45,0.694,51,1.868,57,0.475,61,0.5,64,3.012,66,1.027,67,1.168,69,3.012,71,1.47,78,3.012,81,0.331,82,0.367,84,4.388,86,0.415,87,0.059,89,0.425,90,0.528,91,0.813,100,0.018,101,0.018,217,2.068,471,3.247,595,4.263,878,3.84,879,4.509,880,5.654,881,4.509,882,4.509,883,4.509]],["title/interfaces/Time.html",[87,0.031,107,1.455]],["body/interfaces/Time.html",[0,0.123,2,0.31,3,0.393,4,0.213,6,0.277,7,3.486,10,0.845,13,0.905,14,0.023,20,0.183,21,1.47,26,0.788,40,0.882,41,0.581,42,1.145,44,1.161,57,0.31,61,0.5,66,0.903,81,0.31,82,0.345,86,0.506,87,0.053,88,1.233,89,0.356,90,0.442,91,0.682,100,0.017,101,0.017,102,3.423,103,2.635,104,1.966,105,2.429,106,3.19,107,3.006,109,1.285,110,4.075,111,3.19,112,2.635,113,1.47,114,3.037,115,2.818,116,2.881,117,2.977,118,4.309,119,2.881,120,2.1,121,2.881,122,2.881,123,2.088,124,2.635,125,2.881,126,2.047,127,4.094,128,3.19,129,3.19,130,3.698,131,4.094,132,3.19,133,3.19,134,4.094,135,3.19,136,3.195,137,1.729,138,3.19,139,2.635,140,3.19,141,3.19]],["title/classes/TimeUnit.html",[0,0.069,255,2.045]],["body/classes/TimeUnit.html",[0,0.113,2,0.291,3,0.342,4,0.2,6,0.26,14,0.023,16,0.654,19,1.075,20,0.172,21,1.411,22,1.168,26,0.988,29,0.512,40,0.906,41,0.661,43,0.998,45,0.661,47,0.867,57,0.291,58,1.616,61,0.483,66,0.867,67,0.986,81,0.291,82,0.324,86,0.505,89,0.342,90,0.503,91,0.73,100,0.016,101,0.016,107,2.781,113,1.411,114,1.843,115,2.813,117,3.066,126,2.29,130,3.549,153,1.075,156,1.183,169,2.587,196,1.495,217,1.584,249,4.119,255,4.068,259,1.678,296,3.099,299,3.099,386,4.439,884,4.836,885,2.705,886,4.386,887,6.708,888,5.211,889,6.176,890,5.211,891,5.211,892,5.211,893,3.971,894,5.211,895,4.836,896,6.176,897,5.211,898,3.971,899,5.817,900,3.971,901,3.382,902,3.382,903,3.382,904,3.382,905,3.382,906,3.382,907,2.994,908,3.382]],["title/coverage.html",[909,3.654]],["body/coverage.html",[0,0.141,1,1.097,4,0.193,5,3.834,9,0.679,13,0.818,14,0.023,24,1.471,41,0.41,44,1.444,58,0.922,83,2.383,84,2.383,87,0.064,100,0.016,101,0.016,102,1.899,103,3.79,107,1.564,114,1.776,115,1.564,123,1.471,136,2.038,142,3.834,147,2.038,148,1.899,191,3.258,194,1.899,198,2.383,199,3.89,201,1.776,208,1.564,226,2.038,230,2.606,231,3.834,232,3.463,238,2.606,255,2.197,296,2.038,299,2.038,310,1.564,311,3.834,319,2.383,322,3.258,326,3.258,331,2.383,341,2.197,363,2.197,369,3.834,396,2.197,397,3.639,398,3.375,402,2.197,403,2.197,404,2.197,406,2.383,424,2.885,425,3.258,430,2.709,431,3.258,450,2.606,451,3.47,452,3.557,460,2.197,461,2.038,463,2.383,464,2.383,465,2.383,473,2.383,474,2.197,661,2.885,674,2.606,675,3.463,691,2.885,706,3.258,713,3.834,747,4.777,756,2.885,763,3.834,793,2.383,828,2.606,829,4.331,837,4.598,876,3.258,878,3.258,884,5.09,885,4.598,886,2.885,895,2.885,907,2.885,909,2.885,910,3.258,911,3.826,912,3.258,913,6.22,914,5.396,915,5.396,916,3.826,917,3.826,918,3.258,919,5.085,920,3.826,921,3.826,922,3.826,923,3.826,924,3.826,925,4.864,926,6.751,927,3.258,928,3.258,929,3.826,930,3.826,931,3.826,932,3.826,933,3.826,934,4.331,935,3.826,936,3.826,937,3.826,938,3.826,939,5.183,940,3.826,941,3.826,942,4.331,943,3.258,944,6.086,945,3.258,946,3.826,947,3.826,948,3.826,949,3.258,950,3.258]],["title/dependencies.html",[292,2.665,951,2.981]],["body/dependencies.html",[3,0.373,14,0.022,57,0.418,100,0.02,101,0.02,292,3.543,952,5.688,953,5.688,954,5.688,955,4.845,956,5.688]],["title/miscellaneous/functions.html",[13,0.915,957,1.712]],["body/miscellaneous/functions.html",[6,0.357,13,1.165,14,0.021,16,0.684,20,0.235,66,1.115,67,1.031,89,0.357,100,0.02,101,0.02,103,3.394,107,2.908,110,3.949,115,2.227,116,3.711,117,3.147,118,4.567,119,3.711,120,2.705,121,3.711,122,3.711,123,2.438,125,3.711,793,3.949,957,3.13,958,5.449,959,6.34]],["title/index.html",[20,0.129,89,0.195,678,2.03]],["body/index.html",[0,0.084,1,1.242,9,1.277,10,0.674,13,1.08,14,0.023,16,0.634,18,2.398,19,0.82,22,0.573,24,2.241,26,0.8,40,0.87,41,0.325,42,0.82,43,0.943,44,1.08,47,0.72,50,1.615,51,1.29,58,1.623,61,0.222,71,0.983,81,0.468,88,0.688,89,0.284,92,1.239,100,0.013,101,0.013,104,2.111,107,2.382,110,2.697,114,2.345,115,1.239,117,1.505,124,1.888,126,2.475,137,1.239,148,2.894,154,1.888,190,1.239,194,2.508,196,1.581,208,2.693,209,2.307,212,2.949,222,1.035,227,1.098,259,2.055,274,2.508,277,2.697,283,2.697,286,3.265,295,2.064,296,1.615,301,1.741,310,2.655,313,1.407,317,2.867,318,3.265,319,1.888,327,3.265,339,2.581,384,2.581,426,4.694,430,2.691,432,4.706,433,2.901,434,4.302,445,3.63,460,2.487,461,3.461,462,3.441,465,3.887,469,2.285,471,1.741,473,2.697,474,3.999,655,1.888,667,2.581,669,2.581,674,2.949,679,2.285,692,2.581,766,2.285,782,2.285,828,2.949,870,2.581,928,2.581,955,3.688,960,6.59,961,3.031,962,3.031,963,3.031,964,4.33,965,3.031,966,3.031,967,3.031,968,3.031,969,3.031,970,3.031,971,4.33,972,3.031,973,3.031,974,3.031,975,3.031,976,3.031,977,3.031,978,3.031,979,3.031,980,4.33,981,3.031,982,3.031,983,3.031,984,3.031,985,4.33,986,3.031,987,3.031,988,3.031,989,3.031,990,3.031,991,3.031,992,3.031,993,3.031,994,3.031,995,3.031,996,3.031,997,3.031,998,3.031,999,3.031,1000,3.031,1001,3.031,1002,4.33,1003,3.031,1004,4.33,1005,3.031,1006,3.031,1007,4.33,1008,3.031,1009,3.031,1010,4.33,1011,3.031,1012,3.031,1013,3.031,1014,3.031,1015,3.031,1016,3.031,1017,3.031,1018,3.031,1019,3.031,1020,3.031,1021,3.031,1022,3.031,1023,3.031,1024,3.031,1025,3.031,1026,4.33,1027,3.031,1028,4.33,1029,3.031,1030,4.33,1031,3.031,1032,3.031,1033,3.031,1034,3.031,1035,3.031,1036,3.031,1037,3.031,1038,3.031,1039,3.031,1040,3.031,1041,5.052,1042,3.031,1043,3.031,1044,4.33,1045,4.33,1046,3.031,1047,3.031,1048,3.031,1049,3.031,1050,3.031,1051,3.031,1052,3.031,1053,3.031,1054,3.031,1055,3.031,1056,3.031,1057,3.031,1058,3.031,1059,3.031,1060,3.031,1061,3.031,1062,4.33,1063,3.031,1064,3.031,1065,3.031,1066,3.031,1067,3.031,1068,3.031,1069,5.511,1070,3.031,1071,3.031,1072,3.031,1073,3.031,1074,3.031,1075,2.285,1076,2.581]],["title/license.html",[89,0.195,678,2.03,1075,2.248]],["body/license.html",[4,0.256,14,0.019,100,0.019,101,0.019,104,2.2,301,2.911,327,3.821,501,3.821,754,3.821,910,4.316,1075,3.821,1076,4.316,1077,6.504,1078,5.068,1079,5.068,1080,6.074,1081,5.068,1082,5.068,1083,5.068,1084,5.068,1085,6.074,1086,5.068,1087,6.743,1088,7.183,1089,5.068,1090,6.074,1091,6.504,1092,5.068,1093,6.504,1094,6.074,1095,5.068,1096,5.068,1097,5.068,1098,5.068,1099,5.068,1100,5.068,1101,5.068,1102,5.068,1103,5.068,1104,5.068,1105,5.068,1106,5.068,1107,6.074,1108,6.074,1109,5.068,1110,5.068,1111,6.074,1112,5.068,1113,5.068,1114,5.068,1115,5.068,1116,5.068,1117,5.068,1118,5.068,1119,5.068,1120,5.068,1121,5.068,1122,5.068,1123,5.068,1124,5.068,1125,5.068,1126,5.068,1127,5.068,1128,5.068,1129,5.068,1130,5.068,1131,5.068,1132,5.068,1133,5.068]],["title/modules.html",[1134,4.127]],["body/modules.html",[14,0.02,100,0.02,101,0.02,1134,4.912]],["title/overview.html",[1135,4.127]],["body/overview.html",[0,0.112,14,0.02,87,0.051,100,0.02,101,0.02,757,4.322,1135,4.882,1136,5.732]],["title/miscellaneous/typealiases.html",[957,1.712,1137,4.279]],["body/miscellaneous/typealiases.html",[13,1.443,14,0.02,20,0.239,41,0.593,100,0.02,101,0.02,397,3.18,398,3.409,405,4.204,451,2.95,452,3.986,466,5.089,675,4.358,927,4.717,957,3.18,1138,5.538,1139,5.538,1140,6.749,1141,5.538,1142,5.538]],["title/unit-test.html",[249,2.2,1143,3.263]],["body/unit-test.html",[4,0.186,13,0.788,14,0.023,44,0.788,58,0.887,100,0.015,101,0.015,232,2.509,249,2.115,398,1.962,452,2.294,461,1.962,661,2.777,675,3.376,691,2.777,729,2.777,733,4.52,885,2.509,909,2.777,912,3.137,913,6.365,914,5.105,915,4.772,918,3.137,925,3.137,934,5.105,939,3.137,942,4.772,943,3.137,945,5.105,949,3.137,950,3.137,1143,3.137,1144,3.683,1145,3.683,1146,7.271,1147,3.683,1148,4.957,1149,3.683,1150,3.683,1151,7.378,1152,3.683,1153,5.603,1154,3.683,1155,3.683,1156,3.683,1157,5.994,1158,4.957,1159,3.683,1160,3.683,1161,4.957,1162,3.683,1163,3.683,1164,3.683,1165,4.957,1166,3.683,1167,3.683,1168,3.683,1169,3.683,1170,4.957,1171,3.683,1172,5.994,1173,5.603,1174,3.683,1175,3.683,1176,3.683,1177,3.683,1178,3.683,1179,3.683,1180,3.683,1181,4.957,1182,3.683,1183,3.683,1184,3.683,1185,3.683,1186,4.957,1187,3.683,1188,4.957,1189,3.683,1190,3.683,1191,3.683,1192,3.683,1193,3.683,1194,3.683,1195,3.683,1196,3.683,1197,3.683,1198,3.683,1199,3.683,1200,3.683,1201,3.683,1202,3.683,1203,3.683,1204,3.683,1205,3.683,1206,3.683,1207,4.957,1208,3.683,1209,4.957,1210,3.683]],["title/miscellaneous/variables.html",[837,2.914,957,1.712]],["body/miscellaneous/variables.html",[14,0.022,20,0.221,42,1.934,43,1.112,58,1.707,100,0.019,101,0.019,114,3.029,115,2.667,296,3.477,299,3.477,363,3.748,369,3.852,388,4.351,389,4.351,837,3.48,884,3.852,885,4.867,886,4.921,895,4.921,901,4.351,902,4.351,903,4.351,904,4.351,905,4.351,906,4.351,907,4.921,908,4.351,957,2.934,1211,7.089,1212,5.109]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":44,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["0.25",{"_index":765,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5",{"_index":297,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.5.6",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":769,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0.95",{"_index":772,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["0/0",{"_index":1151,"title":{},"body":{"unit-test.html":{}}}],["0/1",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1182,"title":{},"body":{"unit-test.html":{}}}],["1",{"_index":259,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["1.0",{"_index":270,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["1.3",{"_index":522,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["1.5",{"_index":632,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["1/1",{"_index":918,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1/2",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":773,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["100",{"_index":913,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1000000",{"_index":130,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["100000000",{"_index":1043,"title":{},"body":{"index.html":{}}}],["100m",{"_index":1044,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":1148,"title":{},"body":{"unit-test.html":{}}}],["11/12",{"_index":1184,"title":{},"body":{"unit-test.html":{}}}],["11/22",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":755,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["12/12",{"_index":1207,"title":{},"body":{"unit-test.html":{}}}],["12/23",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["12345",{"_index":1010,"title":{},"body":{"index.html":{}}}],["13/15",{"_index":1201,"title":{},"body":{"unit-test.html":{}}}],["13/19",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["14/16",{"_index":1193,"title":{},"body":{"unit-test.html":{}}}],["14/25",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":265,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{}}}],["15/18",{"_index":1181,"title":{},"body":{"unit-test.html":{}}}],["15/26",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":945,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["16/17",{"_index":1210,"title":{},"body":{"unit-test.html":{}}}],["161/171",{"_index":1179,"title":{},"body":{"unit-test.html":{}}}],["165/175",{"_index":1174,"title":{},"body":{"unit-test.html":{}}}],["17/17",{"_index":1202,"title":{},"body":{"unit-test.html":{}}}],["18/20",{"_index":1197,"title":{},"body":{"unit-test.html":{}}}],["19",{"_index":1136,"title":{},"body":{"overview.html":{}}}],["19/39",{"_index":1164,"title":{},"body":{"unit-test.html":{}}}],["2.0.0",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":914,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["20",{"_index":756,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["20/20",{"_index":1188,"title":{},"body":{"unit-test.html":{}}}],["2017",{"_index":1079,"title":{},"body":{"license.html":{}}}],["21/24",{"_index":1166,"title":{},"body":{"unit-test.html":{}}}],["21/25",{"_index":1192,"title":{},"body":{"unit-test.html":{}}}],["22",{"_index":757,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"overview.html":{}}}],["22/33",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["24.25",{"_index":767,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["25",{"_index":758,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["27/27",{"_index":1186,"title":{},"body":{"unit-test.html":{}}}],["28/28",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["29/40",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":766,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["3/3",{"_index":915,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["3/4",{"_index":1159,"title":{},"body":{"unit-test.html":{}}}],["30",{"_index":759,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["30.000",{"_index":298,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["32",{"_index":760,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["32bit",{"_index":382,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["33",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":768,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["36/38",{"_index":1209,"title":{},"body":{"unit-test.html":{}}}],["38",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["39/41",{"_index":1203,"title":{},"body":{"unit-test.html":{}}}],["4/4",{"_index":934,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["40",{"_index":761,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["41/43",{"_index":1199,"title":{},"body":{"unit-test.html":{}}}],["47/47",{"_index":1170,"title":{},"body":{"unit-test.html":{}}}],["49",{"_index":1163,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":263,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["5/5",{"_index":939,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["5/6",{"_index":1158,"title":{},"body":{"unit-test.html":{}}}],["50",{"_index":747,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["500",{"_index":294,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["51,25",{"_index":771,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["52",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["53/81",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":762,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["56",{"_index":763,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["57",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":925,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["60",{"_index":261,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["64bit",{"_index":380,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["65",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["68",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["7/18",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":942,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["72",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":729,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["79/85",{"_index":1178,"title":{},"body":{"unit-test.html":{}}}],["8",{"_index":770,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["8/8",{"_index":943,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["81/95",{"_index":1176,"title":{},"body":{"unit-test.html":{}}}],["82",{"_index":1194,"title":{},"body":{"unit-test.html":{}}}],["83",{"_index":1157,"title":{},"body":{"unit-test.html":{}}}],["84",{"_index":1191,"title":{},"body":{"unit-test.html":{}}}],["85",{"_index":1175,"title":{},"body":{"unit-test.html":{}}}],["87",{"_index":1200,"title":{},"body":{"unit-test.html":{}}}],["88",{"_index":1165,"title":{},"body":{"unit-test.html":{}}}],["9/11",{"_index":1195,"title":{},"body":{"unit-test.html":{}}}],["9/9",{"_index":1153,"title":{},"body":{"unit-test.html":{}}}],["90",{"_index":1196,"title":{},"body":{"unit-test.html":{}}}],["91/95",{"_index":1167,"title":{},"body":{"unit-test.html":{}}}],["92",{"_index":1183,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":1177,"title":{},"body":{"unit-test.html":{}}}],["94",{"_index":1173,"title":{},"body":{"unit-test.html":{}}}],["95",{"_index":733,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"unit-test.html":{}}}],["95/99",{"_index":1162,"title":{},"body":{"unit-test.html":{}}}],["96",{"_index":1161,"title":{},"body":{"unit-test.html":{}}}],["98",{"_index":736,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99",{"_index":742,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["99.9",{"_index":739,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["abov",{"_index":1106,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":7,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/Logger.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["accessor",{"_index":399,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["accord",{"_index":111,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["action",{"_index":1127,"title":{},"body":{"license.html":{}}}],["actual",{"_index":215,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{}}}],["ad",{"_index":655,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"index.html":{}}}],["add",{"_index":221,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{}}}],["add(valu",{"_index":377,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["addduration(dur",{"_index":849,"title":{},"body":{"classes/StopWatch.html":{}}}],["addlistener(listen",{"_index":507,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["addmetricregistri",{"_index":676,"title":{},"body":{"classes/MetricReporter.html":{}}}],["addmetricregistry(metricregistri",{"_index":681,"title":{},"body":{"classes/MetricReporter.html":{}}}],["again",{"_index":472,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["alias",{"_index":1138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alloc",{"_index":1071,"title":{},"body":{"index.html":{}}}],["alpha",{"_index":237,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_1_second_sampler",{"_index":241,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_15_minute_5_second_sampler",{"_index":242,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_1_second_sampler",{"_index":239,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_1_minute_5_second_sampler",{"_index":240,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_1_second_sampler",{"_index":243,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alpha_5_minute_5_second_sampler",{"_index":244,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["alway",{"_index":140,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["and/or",{"_index":1100,"title":{},"body":{"license.html":{}}}],["applic",{"_index":50,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"index.html":{}}}],["arg",{"_index":429,"title":{},"body":{"interfaces/Logger.html":{}}}],["aris",{"_index":1131,"title":{},"body":{"license.html":{}}}],["around",{"_index":1042,"title":{},"body":{"index.html":{}}}],["arr",{"_index":644,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr.length",{"_index":645,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["arr[0",{"_index":646,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["array",{"_index":222,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["arraylength",{"_index":1005,"title":{},"body":{"index.html":{}}}],["arraylength.getvalue();histogram",{"_index":1015,"title":{},"body":{"index.html":{}}}],["arraylengthgaug",{"_index":1000,"title":{},"body":{"index.html":{}}}],["arraylengthgauge(\"arraylength",{"_index":1006,"title":{},"body":{"index.html":{}}}],["associ",{"_index":1089,"title":{},"body":{"license.html":{}}}],["assum",{"_index":119,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["asynchron",{"_index":868,"title":{},"body":{"classes/StopWatch.html":{}}}],["attribut",{"_index":401,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["author",{"_index":1120,"title":{},"body":{"license.html":{}}}],["averag",{"_index":235,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["average.t",{"_index":232,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{},"unit-test.html":{}}}],["average.ts:103",{"_index":275,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:111",{"_index":256,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:134",{"_index":278,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:144",{"_index":281,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:155",{"_index":280,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:168",{"_index":291,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:182",{"_index":282,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:19",{"_index":699,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:29",{"_index":700,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:37",{"_index":702,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:45",{"_index":701,"title":{},"body":{"interfaces/MovingAverage.html":{}}}],["average.ts:57",{"_index":262,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:58",{"_index":264,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:59",{"_index":268,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:60",{"_index":269,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:61",{"_index":266,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:62",{"_index":267,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:71",{"_index":257,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:79",{"_index":272,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:87",{"_index":273,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["average.ts:95",{"_index":271,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{}}}],["avg",{"_index":245,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["await",{"_index":1052,"title":{},"body":{"index.html":{}}}],["b",{"_index":782,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["base",{"_index":8,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/SimpleGauge.html":{}}}],["basemetr",{"_index":1,"title":{"classes/BaseMetric.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["basemetric.count",{"_index":54,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:102",{"_index":346,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:110",{"_index":343,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:112",{"_index":354,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:116",{"_index":360,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:120",{"_index":352,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:124",{"_index":358,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:128",{"_index":353,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:132",{"_index":359,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:136",{"_index":356,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:140",{"_index":355,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:144",{"_index":361,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:148",{"_index":357,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:152",{"_index":362,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:70",{"_index":342,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:78",{"_index":345,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:86",{"_index":347,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basemetric:94",{"_index":344,"title":{},"body":{"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["basenam",{"_index":467,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["basic",{"_index":970,"title":{},"body":{"index.html":{}}}],["begin",{"_index":806,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["between",{"_index":839,"title":{},"body":{"classes/StopWatch.html":{}}}],["boolean",{"_index":492,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["boundari",{"_index":730,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["branch",{"_index":1144,"title":{},"body":{"unit-test.html":{}}}],["buffer",{"_index":1069,"title":{},"body":{"index.html":{}}}],["build",{"_index":504,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["c",{"_index":1078,"title":{},"body":{"license.html":{}}}],["calcul",{"_index":233,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["call",{"_index":433,"title":{},"body":{"interfaces/Metered.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricReporter.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["callcount",{"_index":1022,"title":{},"body":{"index.html":{}}}],["callcount.get15minuter",{"_index":1027,"title":{},"body":{"index.html":{}}}],["callcount.get1minuter",{"_index":1031,"title":{},"body":{"index.html":{}}}],["callcount.get5minuter",{"_index":1029,"title":{},"body":{"index.html":{}}}],["callcount.getcount",{"_index":1025,"title":{},"body":{"index.html":{}}}],["callcount.getmeanrate();tim",{"_index":1032,"title":{},"body":{"index.html":{}}}],["callcount.mark(1",{"_index":1024,"title":{},"body":{"index.html":{}}}],["callstat",{"_index":1033,"title":{},"body":{"index.html":{}}}],["callstats.addduration(100",{"_index":1035,"title":{},"body":{"index.html":{}}}],["callstats.get15minuter",{"_index":1037,"title":{},"body":{"index.html":{}}}],["callstats.get1minuter",{"_index":1039,"title":{},"body":{"index.html":{}}}],["callstats.get5minuter",{"_index":1038,"title":{},"body":{"index.html":{}}}],["callstats.getcount",{"_index":1036,"title":{},"body":{"index.html":{}}}],["callstats.getmeanr",{"_index":1040,"title":{},"body":{"index.html":{}}}],["callstats.getsnapshot",{"_index":1041,"title":{},"body":{"index.html":{}}}],["callstats.newstopwatch",{"_index":1046,"title":{},"body":{"index.html":{}}}],["callstats.tim",{"_index":1050,"title":{},"body":{"index.html":{}}}],["callstats.timeasync(async",{"_index":1053,"title":{},"body":{"index.html":{}}}],["capac",{"_index":212,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["carbon",{"_index":981,"title":{},"body":{"index.html":{}}}],["catch((err",{"_index":871,"title":{},"body":{"classes/StopWatch.html":{}}}],["caus",{"_index":175,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["charg",{"_index":1084,"title":{},"body":{"license.html":{}}}],["check",{"_index":407,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["child",{"_index":619,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["cint64",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["cint64\").int64",{"_index":389,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":1123,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["clock",{"_index":102,"title":{"classes/Clock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["clock:49",{"_index":827,"title":{},"body":{"classes/StdClock.html":{}}}],["clock=this.defaultclock",{"_index":601,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["code",{"_index":880,"title":{},"body":{"interfaces/Taggable.html":{}}}],["collect",{"_index":227,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["collection.length",{"_index":410,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["collection.s",{"_index":413,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["combin",{"_index":846,"title":{},"body":{"classes/StopWatch.html":{}}}],["commonli",{"_index":11,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["compon",{"_index":139,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["condit",{"_index":1105,"title":{},"body":{"license.html":{}}}],["connect",{"_index":1133,"title":{},"body":{"license.html":{}}}],["consid",{"_index":753,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["consol",{"_index":980,"title":{},"body":{"index.html":{}}}],["console.log(`ad",{"_index":1055,"title":{},"body":{"index.html":{}}}],["console.log(`remov",{"_index":1056,"title":{},"body":{"index.html":{}}}],["const",{"_index":126,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["constructor",{"_index":153,"title":{},"body":{"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["constructor(alpha",{"_index":254,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["constructor(clock",{"_index":832,"title":{},"body":{"classes/StopWatch.html":{}}}],["constructor(initi",{"_index":375,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["constructor(listen",{"_index":671,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(maxs",{"_index":210,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["constructor(metricref",{"_index":457,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(nam",{"_index":154,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"index.html":{}}}],["constructor(nanosecondsperunit",{"_index":890,"title":{},"body":{"classes/TimeUnit.html":{}}}],["constructor(priv",{"_index":475,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["constructor(reservoir",{"_index":334,"title":{},"body":{"classes/Histogram.html":{}}}],["constructor(valu",{"_index":724,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["continu",{"_index":337,"title":{},"body":{"classes/Histogram.html":{}}}],["contract",{"_index":1128,"title":{},"body":{"license.html":{}}}],["conveni",{"_index":830,"title":{},"body":{"classes/StopWatch.html":{}}}],["convert",{"_index":386,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/TimeUnit.html":{}}}],["convertto",{"_index":888,"title":{},"body":{"classes/TimeUnit.html":{}}}],["convertto(valu",{"_index":892,"title":{},"body":{"classes/TimeUnit.html":{}}}],["copi",{"_index":1087,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1077,"title":{},"body":{"license.html":{}}}],["corrspond",{"_index":506,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["count",{"_index":148,"title":{"interfaces/Counting.html":{}},"body":{"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["countabl",{"_index":193,"title":{},"body":{"interfaces/Counting.html":{}}}],["counter",{"_index":24,"title":{"classes/Counter.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"index.html":{}}}],["counter(nam",{"_index":596,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["counter.setgroup(group",{"_index":597,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["coverag",{"_index":909,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":156,"title":{},"body":{"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{}}}],["current",{"_index":109,"title":{},"body":{"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["damag",{"_index":1124,"title":{},"body":{"license.html":{}}}],["data",{"_index":1064,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":134,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["day",{"_index":907,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":1090,"title":{},"body":{"license.html":{}}}],["debug",{"_index":427,"title":{},"body":{"interfaces/Logger.html":{}}}],["decreas",{"_index":144,"title":{},"body":{"classes/Counter.html":{}}}],["decrement",{"_index":149,"title":{},"body":{"classes/Counter.html":{}}}],["decrement(valu",{"_index":167,"title":{},"body":{"classes/Counter.html":{}}}],["default",{"_index":42,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultclock",{"_index":502,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultnamefactory(basenam",{"_index":500,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["defaultreservoir",{"_index":198,"title":{"classes/DefaultReservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["defin",{"_index":45,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["delet",{"_index":513,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["depend",{"_index":292,"title":{"dependencies.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"dependencies.html":{}}}],["deprec",{"_index":520,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["description=nul",{"_index":593,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["determin",{"_index":105,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{}}}],["deviat",{"_index":750,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["diff",{"_index":793,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["diff(on",{"_index":125,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["differ",{"_index":283,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["directgaug",{"_index":491,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["distribut",{"_index":327,"title":{},"body":{"classes/Histogram.html":{},"index.html":{},"license.html":{}}}],["divid",{"_index":285,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["document",{"_index":910,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":124,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["dure",{"_index":1072,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":196,"title":{},"body":{"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["each",{"_index":1061,"title":{},"body":{"index.html":{}}}],["elaps",{"_index":116,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["elasticsearch",{"_index":983,"title":{},"body":{"index.html":{}}}],["elder",{"_index":121,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["element",{"_index":1068,"title":{},"body":{"index.html":{}}}],["embed",{"_index":852,"title":{},"body":{"classes/StopWatch.html":{}}}],["entitycount",{"_index":1016,"title":{},"body":{"index.html":{}}}],["entitycount.getsnapshot",{"_index":1020,"title":{},"body":{"index.html":{}}}],["entitycount.getvalu",{"_index":1019,"title":{},"body":{"index.html":{}}}],["entitycount.update(12345",{"_index":1018,"title":{},"body":{"index.html":{}}}],["equal",{"_index":896,"title":{},"body":{"classes/TimeUnit.html":{}}}],["err",{"_index":873,"title":{},"body":{"classes/StopWatch.html":{}}}],["error",{"_index":176,"title":{},"body":{"classes/Counter.html":{},"interfaces/Logger.html":{},"classes/MonotoneCounter.html":{}}}],["event",{"_index":301,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{},"license.html":{}}}],["everyth",{"_index":192,"title":{},"body":{"interfaces/Counting.html":{}}}],["exampl",{"_index":19,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["execut",{"_index":339,"title":{},"body":{"classes/Histogram.html":{},"index.html":{}}}],["exponenti",{"_index":236,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["exponentiallyweightedmovingaverag",{"_index":230,"title":{"classes/ExponentiallyWeightedMovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["export",{"_index":86,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["express",{"_index":1113,"title":{},"body":{"license.html":{}}}],["extend",{"_index":88,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["extractor",{"_index":415,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["f",{"_index":865,"title":{},"body":{"classes/StopWatch.html":{}}}],["factor",{"_index":293,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["factori",{"_index":503,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["few",{"_index":992,"title":{},"body":{"index.html":{}}}],["field",{"_index":1065,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["filter((metr",{"_index":648,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.iscount",{"_index":526,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.isgaug",{"_index":532,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ishistogram",{"_index":535,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ismet",{"_index":538,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.ispuremonotonecount",{"_index":545,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["filter(metricregistry.istim",{"_index":541,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["final",{"_index":866,"title":{},"body":{"classes/StopWatch.html":{}}}],["find",{"_index":642,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricadded(nam",{"_index":656,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["firemetricremoved(nam",{"_index":659,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["first",{"_index":120,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["fit",{"_index":1116,"title":{},"body":{"license.html":{}}}],["fo",{"_index":707,"title":{},"body":{"interfaces/Sampling.html":{},"interfaces/Summarizing.html":{}}}],["follow",{"_index":754,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"license.html":{}}}],["foreach((registr",{"_index":527,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["free",{"_index":1083,"title":{},"body":{"license.html":{}}}],["function",{"_index":13,"title":{"miscellaneous/functions.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["function'",{"_index":860,"title":{},"body":{"classes/StopWatch.html":{}}}],["furnish",{"_index":1103,"title":{},"body":{"license.html":{}}}],["gather",{"_index":1062,"title":{},"body":{"index.html":{}}}],["gaug",{"_index":310,"title":{"interfaces/Gauge.html":{}},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"index.html":{}}}],["gauge.t",{"_index":398,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["gauge.ts:13",{"_index":423,"title":{},"body":{"interfaces/LengthMethodInterface.html":{}}}],["gauge.ts:33",{"_index":803,"title":{},"body":{"interfaces/SizeMethodInterface.html":{}}}],["gaugeregistr",{"_index":494,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gener",{"_index":499,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["generatename(nam",{"_index":651,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["get",{"_index":89,"title":{"index.html":{},"license.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get15minuter",{"_index":435,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get1minuter",{"_index":436,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get5minuter",{"_index":437,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["get75thpercentil",{"_index":714,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get95thpercentil",{"_index":715,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get98thpercentil",{"_index":716,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get999thpercentil",{"_index":717,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["get99thpercentil",{"_index":718,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getalpha",{"_index":250,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverag",{"_index":251,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getaverage(unit",{"_index":279,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getbyname(nam",{"_index":647,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcount",{"_index":151,"title":{},"body":{"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/Histogram.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/StopWatch.html":{}}}],["getcounter(nam",{"_index":554,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcounterlist",{"_index":523,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbynam",{"_index":553,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getcountersbyname(nam",{"_index":567,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdefaultclock",{"_index":517,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getdescript",{"_index":30,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["getfirstbyname(nam",{"_index":643,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaug",{"_index":531,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgauge(nam",{"_index":556,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugelist",{"_index":530,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbynam",{"_index":555,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgaugesbyname(nam",{"_index":569,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getgroup",{"_index":31,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["gethistogram",{"_index":534,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogram(nam",{"_index":559,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramlist",{"_index":533,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbynam",{"_index":558,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gethistogramsbyname(nam",{"_index":571,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmax",{"_index":719,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmean",{"_index":720,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmeanr",{"_index":438,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{}}}],["getmedian",{"_index":721,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmet",{"_index":537,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeter(nam",{"_index":561,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmeterlist",{"_index":536,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbynam",{"_index":560,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetersbyname(nam",{"_index":572,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetr",{"_index":546,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetric(nam",{"_index":551,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetriclist",{"_index":547,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["getmetricsbynam",{"_index":550,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmetricsbyname(nam",{"_index":565,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmin",{"_index":722,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getmonotonecounterlist",{"_index":544,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getmonotonecountersbyname(nam",{"_index":568,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getnam",{"_index":32,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["getnanosecondsperunit",{"_index":889,"title":{},"body":{"classes/TimeUnit.html":{}}}],["getsnapshot",{"_index":332,"title":{},"body":{"classes/Histogram.html":{},"interfaces/Sampling.html":{},"classes/StopWatch.html":{}}}],["getstddev",{"_index":723,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getsum",{"_index":333,"title":{},"body":{"classes/Histogram.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["gettag",{"_index":33,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["gettag(nam",{"_index":64,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["gettim",{"_index":540,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimer(nam",{"_index":563,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimerlist",{"_index":539,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbynam",{"_index":562,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["gettimersbyname(nam",{"_index":573,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["getunit",{"_index":252,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["getvalu",{"_index":313,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"index.html":{}}}],["getvalue(0.5",{"_index":746,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.75",{"_index":728,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.95",{"_index":732,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.98",{"_index":735,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.99",{"_index":741,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(0.999",{"_index":738,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["getvalue(quantil",{"_index":751,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["give",{"_index":48,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["given",{"_index":169,"title":{},"body":{"classes/Counter.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/TimeUnit.html":{}}}],["grant",{"_index":1082,"title":{},"body":{"license.html":{}}}],["graphit",{"_index":982,"title":{},"body":{"index.html":{}}}],["group",{"_index":18,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"index.html":{}}}],["group=nul",{"_index":592,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["groupabl",{"_index":83,"title":{"interfaces/Groupable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Groupable.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["herebi",{"_index":1081,"title":{},"body":{"license.html":{}}}],["high",{"_index":287,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["histogram",{"_index":194,"title":{"classes/Histogram.html":{}},"body":{"interfaces/Counting.html":{},"classes/Histogram.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["histogram(reservoir",{"_index":611,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["histogram.setgroup(group",{"_index":612,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["hold",{"_index":160,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["holder",{"_index":1121,"title":{},"body":{"license.html":{}}}],["hour",{"_index":886,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["http://metrics.dropwizard.io",{"_index":963,"title":{},"body":{"index.html":{}}}],["id",{"_index":28,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["identifi",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":10,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{}}}],["impli",{"_index":1114,"title":{},"body":{"license.html":{}}}],["import",{"_index":81,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["includ",{"_index":1093,"title":{},"body":{"license.html":{}}}],["increas",{"_index":143,"title":{},"body":{"classes/Counter.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{}}}],["increment",{"_index":150,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["increment(valu",{"_index":171,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["index",{"_index":20,"title":{"index.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexof(metr",{"_index":585,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["indexof(metrics[0",{"_index":579,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["influx",{"_index":984,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["inherit",{"_index":158,"title":{},"body":{"classes/Counter.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/StdClock.html":{}}}],["initi",{"_index":146,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/Int64Wrapper.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["initial=0",{"_index":390,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["insert",{"_index":664,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["inspector",{"_index":960,"title":{},"body":{"index.html":{}}}],["instal",{"_index":964,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":47,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["instance.getmetr",{"_index":497,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.getvalu",{"_index":493,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref",{"_index":483,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instance.metricref.getvalu",{"_index":495,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instanceof",{"_index":482,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["instead",{"_index":524,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["int64",{"_index":363,"title":{},"body":{"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["int64(initi",{"_index":392,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64_t",{"_index":372,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["int64wrapp",{"_index":341,"title":{"classes/Int64Wrapper.html":{}},"body":{"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["integ",{"_index":384,"title":{},"body":{"classes/Int64Wrapper.html":{},"index.html":{}}}],["interfac",{"_index":87,"title":{"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"coverage.html":{},"overview.html":{}}}],["intern",{"_index":1066,"title":{},"body":{"index.html":{}}}],["interv",{"_index":246,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["invoc",{"_index":840,"title":{},"body":{"classes/StopWatch.html":{}}}],["invok",{"_index":654,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["iscounter(inst",{"_index":481,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isgauge(inst",{"_index":490,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ishistogram(inst",{"_index":487,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["islengthattributeinterface(collect",{"_index":408,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["islengthmethodinterface(collect",{"_index":411,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["ismeter(inst",{"_index":488,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismetricset(inst",{"_index":496,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["ismonotonecounter(inst",{"_index":484,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["isnan(quantil",{"_index":795,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["ispuremonotonecounter(inst",{"_index":485,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["issizeattributeinterface(collect",{"_index":412,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["issizemethodinterface(collect",{"_index":414,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["istimer(inst",{"_index":489,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["it'",{"_index":387,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["javascript",{"_index":381,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["keep",{"_index":662,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"classes/SlidingWindowReservoir.html":{}}}],["kind",{"_index":1112,"title":{},"body":{"license.html":{}}}],["last",{"_index":284,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["length",{"_index":400,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["lengthattributeinterfac",{"_index":396,"title":{"interfaces/LengthAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["lengthmethodinterfac",{"_index":402,"title":{"interfaces/LengthMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["liabil",{"_index":1125,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":1122,"title":{},"body":{"license.html":{}}}],["lib/.../clock.t",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../int64.t",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../logg",{"_index":1141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../metr",{"_index":1139,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../siz",{"_index":1142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../tim",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/metrics/clock.t",{"_index":103,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/metrics/clock.ts:49",{"_index":108,"title":{},"body":{"classes/Clock.html":{}}}],["lib/metrics/clock.ts:68",{"_index":826,"title":{},"body":{"classes/StdClock.html":{}}}],["lib/metrics/counter.t",{"_index":142,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{},"coverage.html":{}}}],["lib/metrics/counter.ts:103",{"_index":172,"title":{},"body":{"classes/Counter.html":{}}}],["lib/metrics/counter.ts:113",{"_index":168,"title":{},"body":{"classes/Counter.html":{}}}],["lib/metrics/counter.ts:25",{"_index":695,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["lib/metrics/counter.ts:46",{"_index":697,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["lib/metrics/counter.ts:59",{"_index":696,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["lib/metrics/counter.ts:68",{"_index":698,"title":{},"body":{"classes/MonotoneCounter.html":{}}}],["lib/metrics/counter.ts:84",{"_index":155,"title":{},"body":{"classes/Counter.html":{}}}],["lib/metrics/counting.t",{"_index":191,"title":{},"body":{"interfaces/Counting.html":{},"coverage.html":{}}}],["lib/metrics/counting.ts:20",{"_index":195,"title":{},"body":{"interfaces/Counting.html":{}}}],["lib/metrics/gauge.t",{"_index":311,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"coverage.html":{}}}],["lib/metrics/gauge.ts:21",{"_index":314,"title":{},"body":{"interfaces/Gauge.html":{}}}],["lib/metrics/gauge.ts:42",{"_index":710,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["lib/metrics/gauge.ts:63",{"_index":711,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["lib/metrics/gauge.ts:73",{"_index":712,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["lib/metrics/groupable.t",{"_index":322,"title":{},"body":{"interfaces/Groupable.html":{},"coverage.html":{}}}],["lib/metrics/groupable.ts:18",{"_index":324,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/groupable.ts:26",{"_index":325,"title":{},"body":{"interfaces/Groupable.html":{}}}],["lib/metrics/histogram.t",{"_index":326,"title":{},"body":{"classes/Histogram.html":{},"coverage.html":{}}}],["lib/metrics/histogram.ts:101",{"_index":350,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:30",{"_index":340,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:38",{"_index":336,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:46",{"_index":335,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:69",{"_index":351,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:81",{"_index":349,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/histogram.ts:91",{"_index":348,"title":{},"body":{"classes/Histogram.html":{}}}],["lib/metrics/int64.t",{"_index":369,"title":{},"body":{"classes/Int64Wrapper.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/int64.ts:18",{"_index":376,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:36",{"_index":378,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:46",{"_index":379,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/int64.ts:56",{"_index":385,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["lib/metrics/logg",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/logger.t",{"_index":425,"title":{},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["lib/metrics/meter.t",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["lib/metrics/metered.t",{"_index":431,"title":{},"body":{"interfaces/Metered.html":{},"coverage.html":{}}}],["lib/metrics/metered.ts:20",{"_index":442,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:28",{"_index":439,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:36",{"_index":441,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:44",{"_index":440,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metered.ts:52",{"_index":444,"title":{},"body":{"interfaces/Metered.html":{}}}],["lib/metrics/metr",{"_index":451,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/metric.t",{"_index":5,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"coverage.html":{}}}],["lib/metrics/metric.ts:102",{"_index":56,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:110",{"_index":52,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:112",{"_index":63,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:116",{"_index":77,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:120",{"_index":60,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:124",{"_index":73,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:128",{"_index":62,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:132",{"_index":75,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:136",{"_index":68,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:140",{"_index":65,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:144",{"_index":79,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:148",{"_index":70,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:152",{"_index":80,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:22",{"_index":447,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:30",{"_index":449,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:38",{"_index":446,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:46",{"_index":448,"title":{},"body":{"interfaces/Metric.html":{}}}],["lib/metrics/metric.ts:70",{"_index":46,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:78",{"_index":55,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:86",{"_index":59,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/metric.ts:94",{"_index":53,"title":{},"body":{"classes/BaseMetric.html":{}}}],["lib/metrics/mov",{"_index":231,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.t",{"_index":199,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["lib/metrics/reservoir.ts:110",{"_index":218,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:133",{"_index":809,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:141",{"_index":808,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:149",{"_index":807,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:167",{"_index":810,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:179",{"_index":812,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:19",{"_index":703,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:193",{"_index":811,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["lib/metrics/reservoir.ts:27",{"_index":705,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:35",{"_index":704,"title":{},"body":{"interfaces/Reservoir.html":{}}}],["lib/metrics/reservoir.ts:57",{"_index":213,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:65",{"_index":211,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:83",{"_index":214,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/reservoir.ts:95",{"_index":220,"title":{},"body":{"classes/DefaultReservoir.html":{}}}],["lib/metrics/s",{"_index":397,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/sampling.t",{"_index":706,"title":{},"body":{"interfaces/Sampling.html":{},"coverage.html":{}}}],["lib/metrics/sampling.ts:19",{"_index":708,"title":{},"body":{"interfaces/Sampling.html":{}}}],["lib/metrics/snapshot.t",{"_index":713,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["lib/metrics/snapshot.ts:105",{"_index":822,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:114",{"_index":823,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:134",{"_index":725,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:153",{"_index":727,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:163",{"_index":731,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:17",{"_index":813,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:173",{"_index":734,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:183",{"_index":737,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:193",{"_index":740,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:203",{"_index":745,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:213",{"_index":743,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:223",{"_index":748,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:233",{"_index":775,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:243",{"_index":776,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:25",{"_index":814,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:253",{"_index":744,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:269",{"_index":749,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:303",{"_index":752,"title":{},"body":{"classes/SimpleSnapshot.html":{}}}],["lib/metrics/snapshot.ts:33",{"_index":815,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:41",{"_index":816,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:49",{"_index":817,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:57",{"_index":820,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:65",{"_index":818,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:73",{"_index":821,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:81",{"_index":824,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:89",{"_index":825,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/snapshot.ts:97",{"_index":819,"title":{},"body":{"interfaces/Snapshot.html":{}}}],["lib/metrics/summarizing.t",{"_index":876,"title":{},"body":{"interfaces/Summarizing.html":{},"coverage.html":{}}}],["lib/metrics/summarizing.ts:18",{"_index":877,"title":{},"body":{"interfaces/Summarizing.html":{}}}],["lib/metrics/taggable.t",{"_index":878,"title":{},"body":{"interfaces/Taggable.html":{},"coverage.html":{}}}],["lib/metrics/taggable.ts:17",{"_index":881,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:26",{"_index":879,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:35",{"_index":883,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/taggable.ts:43",{"_index":882,"title":{},"body":{"interfaces/Taggable.html":{}}}],["lib/metrics/tim",{"_index":884,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/metrics/timer.t",{"_index":829,"title":{},"body":{"classes/StopWatch.html":{},"coverage.html":{}}}],["lib/metrics/timer.ts:30",{"_index":834,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:38",{"_index":835,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:46",{"_index":833,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:65",{"_index":836,"title":{},"body":{"classes/StopWatch.html":{}}}],["lib/metrics/timer.ts:75",{"_index":838,"title":{},"body":{"classes/StopWatch.html":{}}}],["librari",{"_index":426,"title":{},"body":{"interfaces/Logger.html":{},"index.html":{}}}],["licens",{"_index":1075,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":1094,"title":{},"body":{"license.html":{}}}],["line",{"_index":1145,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":197,"title":{},"body":{"interfaces/Counting.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{}}}],["list",{"_index":542,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["listen",{"_index":462,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["listener.metricadded(nam",{"_index":658,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.metricremoved(nam",{"_index":660,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["listener.t",{"_index":661,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"coverage.html":{},"unit-test.html":{}}}],["listener.ts:20",{"_index":668,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["listener.ts:29",{"_index":670,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["log",{"_index":328,"title":{},"body":{"classes/Histogram.html":{}}}],["logger",{"_index":424,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"coverage.html":{}}}],["loggerreport",{"_index":928,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["loggerreporter(global.consol",{"_index":987,"title":{},"body":{"index.html":{}}}],["logic",{"_index":112,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["lower",{"_index":799,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["m",{"_index":640,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.getnam",{"_index":639,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.metricref",{"_index":578,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m.setgroup(metric.getnam",{"_index":629,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["m1",{"_index":1030,"title":{},"body":{"index.html":{}}}],["m15",{"_index":1026,"title":{},"body":{"index.html":{}}}],["m5",{"_index":1028,"title":{},"body":{"index.html":{}}}],["mamang",{"_index":564,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["manag",{"_index":476,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["mani",{"_index":973,"title":{},"body":{"index.html":{}}}],["manual",{"_index":510,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["map",{"_index":57,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["map((m",{"_index":577,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((metr",{"_index":650,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map((registr",{"_index":543,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["map.set(registration.nam",{"_index":528,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["match",{"_index":101,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["math.exp",{"_index":260,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["math.floor(po",{"_index":802,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.round(po",{"_index":797,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["math.sqrt(sum",{"_index":794,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["max",{"_index":216,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["maximum",{"_index":202,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["maxsiz",{"_index":206,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["mean",{"_index":445,"title":{},"body":{"interfaces/Metered.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["meant",{"_index":965,"title":{},"body":{"index.html":{}}}],["measur",{"_index":432,"title":{},"body":{"interfaces/Metered.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["memberof",{"_index":90,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["merchant",{"_index":1115,"title":{},"body":{"license.html":{}}}],["merg",{"_index":1097,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":323,"title":{},"body":{"interfaces/Groupable.html":{}}}],["meter",{"_index":430,"title":{"interfaces/Metered.html":{}},"body":{"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["meter(clock",{"_index":605,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{}}}],["meter.setgroup(group",{"_index":606,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["method",{"_index":29,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["metric",{"_index":9,"title":{"interfaces/Metric.html":{}},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{},"index.html":{}}}],["metric.getgroup",{"_index":652,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getgroup()}.${nam",{"_index":653,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetriclist().foreach((m",{"_index":628,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.getmetrics().foreach((m",{"_index":637,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.metricref",{"_index":549,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.nam",{"_index":649,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setdescription(descript",{"_index":622,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setgroup(group",{"_index":621,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metric.setname(this.generatename(nam",{"_index":635,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricad",{"_index":665,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricadded(nam",{"_index":667,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricnam",{"_index":468,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref",{"_index":456,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricref.getnam",{"_index":479,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistr",{"_index":450,"title":{"classes/MetricRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{}}}],["metricregistration(metr",{"_index":625,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistri",{"_index":474,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metricregistry.defaultnamefactori",{"_index":505,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.iscounter(inst",{"_index":486,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.isgauge(metr",{"_index":623,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistry.ismetricset(metr",{"_index":627,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricregistrylisten",{"_index":460,"title":{"interfaces/MetricRegistryListener.html":{}},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistr",{"_index":473,"title":{"classes/MetricRegistryListenerRegistration.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"index.html":{}}}],["metricregistrylistenerregistration(listen",{"_index":509,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricremov",{"_index":666,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["metricremoved(nam",{"_index":669,"title":{},"body":{"interfaces/MetricRegistryListener.html":{},"index.html":{}}}],["metricreport",{"_index":674,"title":{"classes/MetricReporter.html":{}},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{}}}],["metrics.foreach((metr",{"_index":584,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics.length",{"_index":576,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metrics/lib/metrics/clock.t",{"_index":1147,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counter.t",{"_index":1149,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/counting.t",{"_index":1150,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/gauge.t",{"_index":1152,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/groupable.t",{"_index":1154,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/histogram.t",{"_index":1155,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/int64.t",{"_index":1156,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logg",{"_index":1160,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/logger.t",{"_index":1168,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/meter.t",{"_index":1169,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metered.t",{"_index":1171,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metr",{"_index":1172,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/metric.t",{"_index":1180,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/mov",{"_index":1185,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/reservoir.t",{"_index":1187,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/s",{"_index":1190,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/sampling.t",{"_index":1189,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/snapshot.t",{"_index":1198,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/summarizing.t",{"_index":1204,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/taggable.t",{"_index":1205,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/tim",{"_index":1206,"title":{},"body":{"unit-test.html":{}}}],["metrics/lib/metrics/timer.t",{"_index":1208,"title":{},"body":{"unit-test.html":{}}}],["metrics[0",{"_index":582,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["metricset",{"_index":463,"title":{"interfaces/MetricSet.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"coverage.html":{}}}],["microsecond",{"_index":895,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["microsecond.convertto(1000",{"_index":897,"title":{},"body":{"classes/TimeUnit.html":{}}}],["millisecond",{"_index":114,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":778,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["minut",{"_index":299,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["miscellan",{"_index":957,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1076,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":1146,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":1096,"title":{},"body":{"license.html":{}}}],["modul",{"_index":1134,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monitor",{"_index":961,"title":{},"body":{"index.html":{}}}],["monoton",{"_index":189,"title":{},"body":{"classes/Counter.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{}}}],["monotonecount",{"_index":147,"title":{"classes/MonotoneCounter.html":{}},"body":{"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"coverage.html":{}}}],["monotonecounter(nam",{"_index":600,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["monotonecounter:102",{"_index":165,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:110",{"_index":162,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:112",{"_index":180,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:116",{"_index":186,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:120",{"_index":178,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:124",{"_index":184,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:128",{"_index":179,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:132",{"_index":185,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:136",{"_index":182,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:140",{"_index":181,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:144",{"_index":187,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:148",{"_index":183,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:152",{"_index":188,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:25",{"_index":159,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:46",{"_index":174,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:59",{"_index":173,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:68",{"_index":177,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:70",{"_index":161,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:78",{"_index":164,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:86",{"_index":166,"title":{},"body":{"classes/Counter.html":{}}}],["monotonecounter:94",{"_index":163,"title":{},"body":{"classes/Counter.html":{}}}],["more",{"_index":288,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["move",{"_index":234,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["movingaverag",{"_index":238,"title":{"interfaces/MovingAverage.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"coverage.html":{}}}],["multipl",{"_index":455,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["multipli",{"_index":276,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["myarray",{"_index":1004,"title":{},"body":{"index.html":{}}}],["myarray.push(1",{"_index":1012,"title":{},"body":{"index.html":{}}}],["myarray.push(2",{"_index":1013,"title":{},"body":{"index.html":{}}}],["myarray.push(3",{"_index":1014,"title":{},"body":{"index.html":{}}}],["name",{"_index":16,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namefactori",{"_index":466,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"miscellaneous/typealiases.html":{}}}],["nan",{"_index":774,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["nanosecond",{"_index":115,"title":{},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nanosecond.convertto(1000",{"_index":894,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nanosecond.convertto(this.timeunitinnanosecond",{"_index":308,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["nanosecondsperunit",{"_index":887,"title":{},"body":{"classes/TimeUnit.html":{}}}],["nativ",{"_index":371,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["necessari",{"_index":972,"title":{},"body":{"index.html":{}}}],["need",{"_index":12,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["neg",{"_index":170,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["new",{"_index":58,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["newcounter(nam",{"_index":594,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newhistogram",{"_index":609,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmet",{"_index":603,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newmonotonecounter(nam",{"_index":599,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["newstopwatch",{"_index":874,"title":{},"body":{"classes/StopWatch.html":{}}}],["newtim",{"_index":614,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["node",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["nodej",{"_index":967,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":1119,"title":{},"body":{"license.html":{}}}],["notic",{"_index":1107,"title":{},"body":{"license.html":{}}}],["now",{"_index":1074,"title":{},"body":{"index.html":{}}}],["npm",{"_index":968,"title":{},"body":{"index.html":{}}}],["null",{"_index":595,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Taggable.html":{}}}],["num",{"_index":373,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["number",{"_index":40,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["object",{"_index":137,"title":{},"body":{"classes/Clock.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"index.html":{}}}],["obtain",{"_index":1086,"title":{},"body":{"license.html":{}}}],["old",{"_index":204,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["on",{"_index":117,"title":{},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["one.millisecond",{"_index":129,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["one.nanosecond",{"_index":128,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["onevalu",{"_index":127,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["oper",{"_index":338,"title":{},"body":{"classes/Histogram.html":{}}}],["option",{"_index":67,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":804,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["otherwis",{"_index":1130,"title":{},"body":{"license.html":{}}}],["out",{"_index":1132,"title":{},"body":{"license.html":{}}}],["over",{"_index":978,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1135,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":951,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":91,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["paramet",{"_index":66,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":1117,"title":{},"body":{"license.html":{}}}],["pass",{"_index":274,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/MovingAverage.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["per",{"_index":295,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["permiss",{"_index":1080,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1102,"title":{},"body":{"license.html":{}}}],["person",{"_index":1085,"title":{},"body":{"license.html":{}}}],["po",{"_index":796,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["point",{"_index":110,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pool",{"_index":862,"title":{},"body":{"classes/StopWatch.html":{}}}],["portion",{"_index":1110,"title":{},"body":{"license.html":{}}}],["posit",{"_index":225,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["previous",{"_index":685,"title":{},"body":{"classes/MetricReporter.html":{}}}],["print",{"_index":985,"title":{},"body":{"index.html":{}}}],["privat",{"_index":22,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["progress",{"_index":106,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["promis",{"_index":870,"title":{},"body":{"classes/StopWatch.html":{},"index.html":{}}}],["properti",{"_index":21,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["protect",{"_index":25,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["provid",{"_index":501,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"license.html":{}}}],["proxi",{"_index":453,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["public",{"_index":26,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["publish",{"_index":1098,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":1118,"title":{},"body":{"license.html":{}}}],["quantil",{"_index":764,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["queue",{"_index":318,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"index.html":{}}}],["queuesiz",{"_index":1002,"title":{},"body":{"index.html":{}}}],["queuesize.getvalu",{"_index":1011,"title":{},"body":{"index.html":{}}}],["queuesize.setvalue(12345",{"_index":1009,"title":{},"body":{"index.html":{}}}],["random",{"_index":224,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["rate",{"_index":277,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Metered.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reach",{"_index":203,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["refer",{"_index":480,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["regardless",{"_index":312,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{}}}],["regist",{"_index":454,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register",{"_index":631,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["register(nam",{"_index":634,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetr",{"_index":633,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registermetric(metr",{"_index":620,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registr",{"_index":469,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"index.html":{}}}],["registration.metricref",{"_index":529,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["registration.remove();metr",{"_index":1060,"title":{},"body":{"index.html":{}}}],["registri",{"_index":461,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["registry.addlistener(new",{"_index":1057,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"newalloc",{"_index":1073,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"request",{"_index":1059,"title":{},"body":{"index.html":{}}}],["registry.newcounter(\"requestcount",{"_index":995,"title":{},"body":{"index.html":{}}}],["registry.newhistogram(\"requestcount",{"_index":1017,"title":{},"body":{"index.html":{}}}],["registry.newmeter(\"callcount",{"_index":1023,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"callstat",{"_index":1034,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"request",{"_index":988,"title":{},"body":{"index.html":{}}}],["registry.registermetric(arraylength",{"_index":1008,"title":{},"body":{"index.html":{}}}],["registry.registermetric(capac",{"_index":1070,"title":{},"body":{"index.html":{}}}],["registry.registermetric(queues",{"_index":1007,"title":{},"body":{"index.html":{}}}],["registry.t",{"_index":452,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["registry.ts:23",{"_index":672,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:39",{"_index":673,"title":{},"body":{"classes/MetricRegistryListenerRegistration.html":{}}}],["registry.ts:60",{"_index":459,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["registry.ts:67",{"_index":458,"title":{},"body":{"classes/MetricRegistration.html":{}}}],["remov",{"_index":471,"title":{},"body":{"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["removecounter(nam",{"_index":586,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removegauge(nam",{"_index":588,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removehistogram(nam",{"_index":589,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removelistener(listen",{"_index":511,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemeter(nam",{"_index":590,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetr",{"_index":574,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetric(nam",{"_index":575,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removemetricregistri",{"_index":677,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetricregistry(metricregistri",{"_index":683,"title":{},"body":{"classes/MetricReporter.html":{}}}],["removemetrics(nam",{"_index":583,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["removetag",{"_index":34,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["removetag(nam",{"_index":69,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["removetimer(nam",{"_index":591,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["replac",{"_index":205,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["report",{"_index":317,"title":{},"body":{"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricReporter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":989,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":990,"title":{},"body":{"index.html":{}}}],["reporter.t",{"_index":675,"title":{},"body":{"classes/MetricReporter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["reporter.ts:21",{"_index":680,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:29",{"_index":686,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:37",{"_index":687,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:45",{"_index":682,"title":{},"body":{"classes/MetricReporter.html":{}}}],["reporter.ts:55",{"_index":684,"title":{},"body":{"classes/MetricReporter.html":{}}}],["repres",{"_index":113,"title":{},"body":{"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/Metered.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["represent",{"_index":85,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{}}}],["request",{"_index":434,"title":{},"body":{"interfaces/Metered.html":{},"index.html":{}}}],["requestcount",{"_index":994,"title":{},"body":{"index.html":{}}}],["requestcount.decrement(1",{"_index":997,"title":{},"body":{"index.html":{}}}],["requestcount.getcount",{"_index":998,"title":{},"body":{"index.html":{}}}],["requestcount.increment(1",{"_index":996,"title":{},"body":{"index.html":{}}}],["requestcount.reset();gaug",{"_index":999,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":993,"title":{},"body":{"index.html":{}}}],["require(\"nod",{"_index":388,"title":{},"body":{"classes/Int64Wrapper.html":{},"miscellaneous/variables.html":{}}}],["reservoir",{"_index":201,"title":{"interfaces/Reservoir.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/Histogram.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"coverage.html":{}}}],["reservoir=nul",{"_index":608,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["reset",{"_index":152,"title":{},"body":{"classes/Counter.html":{},"classes/MonotoneCounter.html":{}}}],["resourc",{"_index":976,"title":{},"body":{"index.html":{}}}],["restart",{"_index":805,"title":{},"body":{"classes/SlidingWindowReservoir.html":{}}}],["restrict",{"_index":1092,"title":{},"body":{"license.html":{}}}],["result",{"_index":100,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":61,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"index.html":{}}}],["right",{"_index":1095,"title":{},"body":{"license.html":{}}}],["safe",{"_index":470,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["sampl",{"_index":123,"title":{"interfaces/Sampling.html":{}},"body":{"classes/Clock.html":{},"interfaces/Counting.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/MovingAverage.html":{},"interfaces/Sampling.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sampler",{"_index":604,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["samplerate=1",{"_index":602,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["save",{"_index":969,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":1140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["search",{"_index":330,"title":{},"body":{"classes/Histogram.html":{}}}],["second",{"_index":296,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":1101,"title":{},"body":{"license.html":{}}}],["sesond",{"_index":122,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":15,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{}}}],["set.t",{"_index":691,"title":{},"body":{"interfaces/MetricSet.html":{},"coverage.html":{},"unit-test.html":{}}}],["set.ts:21",{"_index":694,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["set.ts:29",{"_index":693,"title":{},"body":{"interfaces/MetricSet.html":{}}}],["setdefaultclock(defaultclock",{"_index":519,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["setdescript",{"_index":35,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setdescription(descript",{"_index":72,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setgroup",{"_index":36,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setgroup(group",{"_index":74,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setinterv",{"_index":991,"title":{},"body":{"index.html":{}}}],["setnam",{"_index":37,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setname(nam",{"_index":76,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["setnamefactory(namefactori",{"_index":515,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["settag",{"_index":38,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["settag(nam",{"_index":78,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["setvalu",{"_index":709,"title":{},"body":{"classes/SimpleGauge.html":{}}}],["setvalue(valu",{"_index":321,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{}}}],["shall",{"_index":1108,"title":{},"body":{"license.html":{}}}],["ship",{"_index":979,"title":{},"body":{"index.html":{}}}],["sign",{"_index":383,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["similar",{"_index":962,"title":{},"body":{"index.html":{}}}],["simpl",{"_index":200,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{}}}],["simplegaug",{"_index":319,"title":{"classes/SimpleGauge.html":{}},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"coverage.html":{},"index.html":{}}}],["simplegauge(\"requestcount",{"_index":1003,"title":{},"body":{"index.html":{}}}],["simplesnapshot",{"_index":226,"title":{"classes/SimpleSnapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"coverage.html":{}}}],["singl",{"_index":692,"title":{},"body":{"interfaces/MetricSet.html":{},"index.html":{}}}],["size",{"_index":207,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Gauge.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["sizeattributeinterfac",{"_index":404,"title":{"interfaces/SizeAttributeInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegaug",{"_index":406,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["sizegauge.islengthattributeinterface(collect",{"_index":418,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.islengthmethodinterface(collect",{"_index":420,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizeattributeinterface(collect",{"_index":421,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizegauge.issizemethodinterface(collect",{"_index":422,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["sizemethodinterfac",{"_index":403,"title":{"interfaces/SizeMethodInterface.html":{}},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"coverage.html":{}}}],["slidingwindowreservoir",{"_index":464,"title":{"classes/SlidingWindowReservoir.html":{}},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SlidingWindowReservoir.html":{},"coverage.html":{}}}],["slidingwindowreservoir(1024",{"_index":610,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["snapshot",{"_index":208,"title":{"interfaces/Snapshot.html":{}},"body":{"classes/DefaultReservoir.html":{},"classes/Histogram.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["snapshot.getmean",{"_index":1045,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();met",{"_index":1021,"title":{},"body":{"index.html":{}}}],["snapshot.getmean();metriclisten",{"_index":1054,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":1088,"title":{},"body":{"license.html":{}}}],["sort",{"_index":726,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"dependencies.html":{}}}],["specifi",{"_index":217,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{}}}],["standard",{"_index":498,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["start",{"_index":678,"title":{"index.html":{},"license.html":{}},"body":{"classes/MetricReporter.html":{},"classes/StopWatch.html":{}}}],["starttim",{"_index":831,"title":{},"body":{"classes/StopWatch.html":{}}}],["stat",{"_index":986,"title":{},"body":{"index.html":{}}}],["state",{"_index":777,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["statement",{"_index":912,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":23,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"interfaces/Snapshot.html":{}}}],["statist",{"_index":977,"title":{},"body":{"index.html":{}}}],["stdclock",{"_index":136,"title":{"classes/StdClock.html":{}},"body":{"classes/Clock.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"coverage.html":{}}}],["step",{"_index":145,"title":{},"body":{"classes/Counter.html":{}}}],["stop",{"_index":679,"title":{},"body":{"classes/MetricReporter.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["stopwatch",{"_index":828,"title":{"classes/StopWatch.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["stopwatch(this.clock",{"_index":875,"title":{},"body":{"classes/StopWatch.html":{}}}],["storag",{"_index":1067,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["subject",{"_index":1104,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":1099,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":1109,"title":{},"body":{"license.html":{}}}],["sum",{"_index":247,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/MovingAverage.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{}}}],["summar",{"_index":331,"title":{"interfaces/Summarizing.html":{}},"body":{"classes/Histogram.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"coverage.html":{}}}],["super",{"_index":190,"title":{},"body":{"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["support",{"_index":955,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["support/regist",{"_index":82,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Clock.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metered.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"interfaces/MetricSet.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{}}}],["synchron",{"_index":861,"title":{},"body":{"classes/StopWatch.html":{}}}],["t",{"_index":315,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{}}}],["tabl",{"_index":950,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":949,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":17,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"interfaces/Taggable.html":{}}}],["taggabl",{"_index":84,"title":{"interfaces/Taggable.html":{}},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{},"interfaces/Taggable.html":{},"coverage.html":{}}}],["templat",{"_index":316,"title":{},"body":{"interfaces/Gauge.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/SimpleGauge.html":{}}}],["test",{"_index":1143,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.a.length",{"_index":1001,"title":{},"body":{"index.html":{}}}],["this.addduration(diff(starttim",{"_index":867,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.alpha",{"_index":302,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.avg",{"_index":307,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.clock",{"_index":841,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.clock.tim",{"_index":844,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.count",{"_index":365,"title":{},"body":{"classes/Histogram.html":{}}}],["this.defaultclock",{"_index":518,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.descript",{"_index":93,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{}}}],["this.extractor",{"_index":419,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.firemetricadded(metric.getnam",{"_index":626,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricadded(nam",{"_index":636,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.firemetricremoved(nam",{"_index":581,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname(nam",{"_index":566,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getbyname>(nam",{"_index":570,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname(nam",{"_index":552,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getfirstbyname>(nam",{"_index":557,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.getmax",{"_index":798,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getmean",{"_index":792,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.5",{"_index":788,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.75",{"_index":783,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.95",{"_index":784,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.98",{"_index":785,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.99",{"_index":787,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.getvalue(0.999",{"_index":786,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.group",{"_index":94,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.group}.${this.nam",{"_index":99,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.histogram",{"_index":848,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getcount",{"_index":854,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsnapshot",{"_index":853,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.getsum",{"_index":855,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.histogram.update(unit.convertto(dur",{"_index":850,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.interv",{"_index":303,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.listeners.foreach((listen",{"_index":657,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.indexof(listen",{"_index":512,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners.push(listen",{"_index":508,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.listeners[index",{"_index":514,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.maxs",{"_index":228,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["this.met",{"_index":847,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get15minuter",{"_index":856,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get1minuter",{"_index":858,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.get5minuter",{"_index":857,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.getmeanr",{"_index":859,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.meter.mark(1",{"_index":851,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.metr",{"_index":525,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricref",{"_index":478,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metricregistries.indexof(metricregistri",{"_index":689,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.push(metricregistri",{"_index":688,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metricregistries.splice(index",{"_index":690,"title":{},"body":{"classes/MetricReporter.html":{}}}],["this.metrics.map((metr",{"_index":548,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.push(new",{"_index":624,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.metrics.splice(index",{"_index":580,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nam",{"_index":92,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{},"classes/StopWatch.html":{},"index.html":{}}}],["this.namefactori",{"_index":516,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.namefactory(nam",{"_index":638,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.nanosecondsperunit",{"_index":899,"title":{},"body":{"classes/TimeUnit.html":{}}}],["this.num",{"_index":391,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.add(valu",{"_index":393,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tonumb",{"_index":394,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.num.tostr",{"_index":395,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["this.register(counter.getnam",{"_index":598,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(histogram.getnam",{"_index":613,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(meter.getnam",{"_index":607,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(metricnam",{"_index":641,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.register(timer.getnam",{"_index":617,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registermetric(m",{"_index":630,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.registry.removelistener(this.listen",{"_index":477,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.removemetric(nam",{"_index":587,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["this.reservoir",{"_index":364,"title":{},"body":{"classes/Histogram.html":{}}}],["this.reservoir.snapshot",{"_index":368,"title":{},"body":{"classes/Histogram.html":{}}}],["this.reservoir.update(valu",{"_index":367,"title":{},"body":{"classes/Histogram.html":{}}}],["this.setdescription(descript",{"_index":417,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.setname(nam",{"_index":416,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["this.starttim",{"_index":843,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.sum",{"_index":309,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/MovingAverage.html":{}}}],["this.sum.add(valu",{"_index":366,"title":{},"body":{"classes/Histogram.html":{}}}],["this.tag",{"_index":95,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.delete(nam",{"_index":98,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.get(nam",{"_index":96,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tags.set(nam",{"_index":97,"title":{},"body":{"classes/BaseMetric.html":{},"interfaces/Metric.html":{}}}],["this.tim",{"_index":842,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timer.addduration(diff(this.starttim",{"_index":845,"title":{},"body":{"classes/StopWatch.html":{}}}],["this.timeunitinnanosecond",{"_index":305,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.unit",{"_index":304,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["this.valu",{"_index":320,"title":{},"body":{"interfaces/Gauge.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.foreach((valu",{"_index":791,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values.length",{"_index":229,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SimpleSnapshot.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{}}}],["this.values.sort((a",{"_index":781,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[0",{"_index":790,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[index",{"_index":800,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["this.values[this.values.length",{"_index":789,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["thread",{"_index":975,"title":{},"body":{"index.html":{}}}],["through",{"_index":286,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"index.html":{}}}],["throw",{"_index":872,"title":{},"body":{"classes/StopWatch.html":{}}}],["tick",{"_index":253,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["time",{"_index":107,"title":{"interfaces/Time.html":{}},"body":{"classes/Clock.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["time(f",{"_index":863,"title":{},"body":{"classes/StopWatch.html":{}}}],["timeasync(f",{"_index":869,"title":{},"body":{"classes/StopWatch.html":{}}}],["timer",{"_index":465,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/StopWatch.html":{},"coverage.html":{},"index.html":{}}}],["timer(clock",{"_index":615,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.setgroup(group",{"_index":616,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["timer.start",{"_index":1047,"title":{},"body":{"index.html":{}}}],["timer.stop",{"_index":1048,"title":{},"body":{"index.html":{}}}],["timeunit",{"_index":255,"title":{"classes/TimeUnit.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"coverage.html":{}}}],["timeunit(1",{"_index":901,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000",{"_index":902,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000",{"_index":903,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(1000000000",{"_index":904,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(3600000000000",{"_index":906,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(60000000000",{"_index":905,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunit(86400000000000",{"_index":908,"title":{},"body":{"classes/TimeUnit.html":{},"miscellaneous/variables.html":{}}}],["timeunitinnanosecond",{"_index":248,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["tonumb",{"_index":374,"title":{},"body":{"classes/Int64Wrapper.html":{}}}],["tort",{"_index":1129,"title":{},"body":{"license.html":{}}}],["tostr",{"_index":39,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["total",{"_index":443,"title":{},"body":{"interfaces/Metered.html":{}}}],["track",{"_index":663,"title":{},"body":{"interfaces/MetricRegistryListener.html":{}}}],["tri",{"_index":864,"title":{},"body":{"classes/StopWatch.html":{}}}],["trigger",{"_index":300,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["truth",{"_index":135,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two",{"_index":118,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{},"miscellaneous/functions.html":{}}}],["two.millisecond",{"_index":133,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["two.nanosecond",{"_index":132,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["twovalu",{"_index":131,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Logger.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"interfaces/Time.html":{},"classes/TimeUnit.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1137,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":409,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{}}}],["typescript",{"_index":966,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":618,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{}}}],["uniqu",{"_index":49,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/Histogram.html":{},"interfaces/Metric.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["unit",{"_index":249,"title":{"unit-test.html":{}},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{},"classes/StopWatch.html":{},"classes/TimeUnit.html":{},"unit-test.html":{}}}],["unit.convertto(interv",{"_index":306,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["unit.nanosecondsperunit",{"_index":900,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.t",{"_index":885,"title":{},"body":{"classes/TimeUnit.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["unit.ts:18",{"_index":891,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:36",{"_index":898,"title":{},"body":{"classes/TimeUnit.html":{}}}],["unit.ts:53",{"_index":893,"title":{},"body":{"classes/TimeUnit.html":{}}}],["until",{"_index":223,"title":{},"body":{"classes/DefaultReservoir.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["updat",{"_index":209,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{},"index.html":{}}}],["update(valu",{"_index":219,"title":{},"body":{"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"classes/Histogram.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SlidingWindowReservoir.html":{}}}],["upper",{"_index":801,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["us",{"_index":104,"title":{},"body":{"classes/Clock.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"interfaces/Logger.html":{},"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StdClock.html":{},"classes/StopWatch.html":{},"interfaces/Time.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":971,"title":{},"body":{"index.html":{}}}],["user",{"_index":329,"title":{},"body":{"classes/Histogram.html":{}}}],["valu",{"_index":43,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"interfaces/Counting.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/Metric.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"interfaces/Sampling.html":{},"classes/SimpleGauge.html":{},"classes/SimpleSnapshot.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"classes/SlidingWindowReservoir.html":{},"interfaces/Snapshot.html":{},"interfaces/Summarizing.html":{},"interfaces/Taggable.html":{},"classes/TimeUnit.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["valueextractor",{"_index":405,"title":{},"body":{"interfaces/LengthAttributeInterface.html":{},"interfaces/LengthMethodInterface.html":{},"interfaces/SizeAttributeInterface.html":{},"interfaces/SizeMethodInterface.html":{},"miscellaneous/typealiases.html":{}}}],["values.length",{"_index":780,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["values.slice(0",{"_index":779,"title":{},"body":{"classes/SimpleSnapshot.html":{},"interfaces/Snapshot.html":{}}}],["variabl",{"_index":837,"title":{"miscellaneous/variables.html":{}},"body":{"classes/StopWatch.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["versa",{"_index":290,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["version",{"_index":521,"title":{},"body":{"classes/MetricRegistration.html":{},"classes/MetricRegistryListenerRegistration.html":{},"interfaces/MetricSet.html":{}}}],["via",{"_index":1058,"title":{},"body":{"index.html":{}}}],["vice",{"_index":289,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["void",{"_index":71,"title":{},"body":{"classes/BaseMetric.html":{},"classes/Counter.html":{},"classes/DefaultReservoir.html":{},"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/Gauge.html":{},"interfaces/Groupable.html":{},"classes/Histogram.html":{},"classes/Int64Wrapper.html":{},"interfaces/Metric.html":{},"classes/MetricRegistration.html":{},"interfaces/MetricRegistryListener.html":{},"classes/MetricRegistryListenerRegistration.html":{},"classes/MetricReporter.html":{},"classes/MonotoneCounter.html":{},"interfaces/MovingAverage.html":{},"interfaces/Reservoir.html":{},"classes/SimpleGauge.html":{},"classes/SlidingWindowReservoir.html":{},"classes/StopWatch.html":{},"interfaces/Taggable.html":{},"index.html":{}}}],["wait",{"_index":974,"title":{},"body":{"index.html":{}}}],["warn",{"_index":428,"title":{},"body":{"interfaces/Logger.html":{}}}],["warranti",{"_index":1111,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1049,"title":{},"body":{"index.html":{}}}],["weight",{"_index":258,"title":{},"body":{"classes/ExponentiallyWeightedMovingAverage.html":{},"interfaces/MovingAverage.html":{}}}],["whether",{"_index":1126,"title":{},"body":{"license.html":{}}}],["who",{"_index":138,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}],["within",{"_index":1063,"title":{},"body":{"index.html":{}}}],["without",{"_index":1091,"title":{},"body":{"license.html":{}}}],["work",{"_index":1051,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":370,"title":{},"body":{"classes/Int64Wrapper.html":{},"classes/StopWatch.html":{}}}],["ye",{"_index":157,"title":{},"body":{"classes/Counter.html":{},"classes/Histogram.html":{},"classes/MonotoneCounter.html":{},"classes/SimpleGauge.html":{}}}],["zero",{"_index":141,"title":{},"body":{"classes/Clock.html":{},"classes/StdClock.html":{},"interfaces/Time.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BaseMetric.html":{"url":"classes/BaseMetric.html","title":"class - BaseMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Abstract base-class for a metric which implements commonly needed functions:\n\nget / set name\nget / set tags\nget / set group\n\n\n            \n\n\n            \n                Implements\n            \n            \n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:70\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:110\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:94\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:78\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:102\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric.ts:86\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:128\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:148\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:132\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:116\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:144\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:152\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Abstraction of a clock. Used to determine progress in time.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Counter.html":{"url":"classes/Counter.html","title":"class - Counter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counter.ts\n        \n\n            \n                Description\n            \n            \n                A counter represents a number that can be increased or decreased in steps.\nThe initial value is 0.\n\n            \n\n            \n                Extends\n            \n            \n                    MonotoneCounter\n            \n\n            \n                Implements\n            \n            \n                        Counting\n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                decrement\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/counter.ts:84\n                            \n                        \n\n                \n                    \n                            Creates an instance of Counter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional name of the counter\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional description of the counter\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        count:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:25\n                            \n                        \n\n                \n                    \n                        Holds the current value.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:70\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:110\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:94\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:78\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:102\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:86\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            decrement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        decrement(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counter.ts:113\n                            \n                        \n\n\n                \n                    \n                            Decreases the current count by the given value - a negative value is increasing the current count.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            increment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        increment(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counter.ts:103\n                            \n                        \n\n\n                \n                    \n                            Increases the current count by the given value - a negative value is decreasing the current count.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCount()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:59\n                            \n                        \n\n\n                \n                    \n                            Gets the current count.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            increment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        increment(value: number)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:46\n                            \n                        \n\n\n                \n                    \n                            Increases the current count by the given value - a negative value is causing an error.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reset\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reset()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:68\n                            \n                        \n\n\n                \n                    \n                            Sets the current count to 0.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:128\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:148\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:132\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:116\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:144\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MonotoneCounter\n\n                                \n                            \n                        \n                            \n                                    Defined in MonotoneCounter:152\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Counting } from \"./counting\";\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A monotonically increasing number.\n * The initial value is 0.\n *\n * @export\n * @class MonotoneCounter\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n */\nexport class MonotoneCounter extends BaseMetric implements Counting, Metric {\n\n    /**\n     * Holds the current value.\n     *\n     * @private\n     * @type {number}\n     * @memberof MonotoneCounter\n     */\n    protected count: number = 0;\n\n    /**\n     * Creates an instance of MonotoneCounter.\n     *\n     * @param {string} [name] optional name of the counter\n     * @param {string} [description] optional description of the counter\n     * @memberof MonotoneCounter\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Increases the current count by the given value - a negative value is causing an error.\n     *\n     * @param {number} value\n     * @memberof MonotoneCounter\n     */\n    public increment(value: number): void {\n        if (value \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Counting.html":{"url":"interfaces/Counting.html","title":"interface - Counting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Counting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counting.ts\n        \n\n            \n                Description\n            \n            \n                Represents everything that is countable (Counter, MonotoneCounter, Histogram).\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getCount\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counting.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents everything that is countable ({@link Counter}, {@link MonotoneCounter}, {@link Histogram}).\n *\n * @export\n * @interface Counting\n * @extends {Metric}\n */\nexport interface Counting extends Metric {\n\n    /**\n     * Gets the current count - e.g. the number of samples in Histogram or the value of a counter.\n     *\n     * @returns {number}\n     * @memberof Counting\n     */\n    getCount(): number;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultReservoir.html":{"url":"classes/DefaultReservoir.html","title":"class - DefaultReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Simple implementation of a reservoir.\nIt has a maximum number of values, if the maximum\nis reached old values are replaced by new values.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:65\n                            \n                        \n\n                \n                    \n                        The capacity of this reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:57\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:83\n                            \n                        \n\n\n                \n                    \n                            Gets the actual number of value, but at max the specified maximum.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:110\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot instance.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:95\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of numbers until the maximum number of\nvalues is reached. If the maximum number of values is reached\nan old value at a random position is replaced with the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExponentiallyWeightedMovingAverage.html":{"url":"classes/ExponentiallyWeightedMovingAverage.html","title":"class - ExponentiallyWeightedMovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExponentiallyWeightedMovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Calculates the moving average with an exponential alpha value.\n\n            \n\n\n            \n                Implements\n            \n            \n                        MovingAverage\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                alpha\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                                    Static\n                                ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                                    Private\n                                avg\n                            \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                timeUnitInNanoseconds\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getAlpha\n                            \n                            \n                                    Public\n                                getAverage\n                            \n                            \n                                    Public\n                                getUnit\n                            \n                            \n                                    Public\n                                tick\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(alpha: number, interval: number, unit: TimeUnit)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                            Creates an instance of ExponentiallyWeightedMovingAverage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alpha\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                    TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            alpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        alpha:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:71\n                            \n                        \n\n                \n                    \n                        Alpha component (weight) of the moving average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_1_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_1_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / 60))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_15_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_15_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 15)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_1_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_1_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(1 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            ALPHA_5_MINUTE_5_SECOND_SAMPLERATE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ALPHA_5_MINUTE_5_SECOND_SAMPLERATE:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 1 - Math.exp(-(5 / (60 * 5)))\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            avg\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        avg:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : -1.0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:95\n                            \n                        \n\n                \n                    \n                        The current average.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:79\n                            \n                        \n\n                \n                    \n                        The sampling interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:87\n                            \n                        \n\n                \n                    \n                        The sum of all values passed to the update function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timeUnitInNanoseconds\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timeUnitInNanoseconds:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:103\n                            \n                        \n\n                \n                    \n                        Multiplier of the time unit specified in the constructor in nanoseconds.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unit:     TimeUnit\n\n                    \n                \n                    \n                        \n                            Type :     TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:111\n                            \n                        \n\n                \n                    \n                        The time unit of the sampling rate.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:134\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:155\n                            \n                        \n\n\n                \n                    \n                            Gets the average in the specified time unit.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:144\n                            \n                        \n\n\n                \n                    \n                            Gets the time unit.\n\n\n                            \n                            \n                            \n                                Returns :     TimeUnit\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        tick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:182\n                            \n                        \n\n\n                \n                    \n                            Updates the current average by multiplying the alpha value with the difference\nof the last average and the current average.\nAverages are calculated by dividing the sum through the sampling interval.\nIf the alpha value is high the last average has more weight and vice versa.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:168\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the current sum.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Gauge.html":{"url":"interfaces/Gauge.html","title":"interface - Gauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Gauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A gauge can represent any value - regardless of the type.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets the current value of the gauge.\n\n\n                            \n                            \n                            \n                                Returns :     T\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @template T\n */\nexport interface Gauge extends Metric {\n\n    /**\n     * Gets the current value of the gauge.\n     *\n     * @returns {T}\n     * @memberof Gauge\n     */\n    getValue(): T;\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n\n    /**\n     * The value - initially set to 0.\n     *\n     * @private\n     * @type {number}\n     * @memberof SimpleGauge\n     */\n    private value: number = 0;\n\n    /**\n     * Creates an instance of SimpleGauge with an optional name.\n     *\n     * @param {string} [name] optional metric name.\n     * @param {string} [description] optional metric description.\n     * @memberof SimpleGauge\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @returns {number}\n     * @memberof SimpleGauge\n     */\n    public getValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Sets the current value.\n     *\n     * @param {number} value\n     * @memberof SimpleGauge\n     */\n    public setValue(value: number): void {\n        this.value = value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Groupable.html":{"url":"interfaces/Groupable.html","title":"interface - Groupable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Groupable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/groupable.ts\n        \n\n            \n                Description\n            \n            \n                Name-based (string) grouping interface - the group as metadata\nof a metric is used in some metric-reporter.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getGroup\n                                \n                                \n                                    setGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetGroup()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the group name.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetGroup(group: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/groupable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Sets the group name.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new group name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Name-based (string) grouping interface - the group as metadata\n * of a metric is used in some metric-reporter.\n *\n * @export\n * @interface Groupable\n */\nexport interface Groupable {\n\n    /**\n     * Gets the group name.\n     *\n     * @returns {string}\n     * @memberof Groupable\n     */\n    getGroup(): string;\n\n    /**\n     * Sets the group name.\n     *\n     * @param {string} group the new group name\n     * @memberof Groupable\n     */\n    setGroup(group: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Histogram.html":{"url":"classes/Histogram.html","title":"class - Histogram","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Histogram\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/histogram.ts\n        \n\n            \n                Description\n            \n            \n                Represents the distribution of values - e.g. number of logged-in users, search result count.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        Counting\n                        Metric\n                        Sampling\n                        Summarizing\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                count\n                            \n                            \n                                    Private\n                                reservoir\n                            \n                            \n                                    Private\n                                sum\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                getSnapshot\n                            \n                            \n                                    Public\n                                getSum\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reservoir: Reservoir, name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/histogram.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of Histogram.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reservoir\n                                                  \n                                                        \n                                                                    Reservoir\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the number reservoir used\n\n                                                        \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                an optional metric name\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                an optional metric description\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        count:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:38\n                            \n                        \n\n                \n                    \n                        Continuous number representing the update operations executed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reservoir\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reservoir:     Reservoir\n\n                    \n                \n                    \n                        \n                            Type :     Reservoir\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:30\n                            \n                        \n\n                \n                    \n                        The value reservoir used to do sampling.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            sum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sum:     Int64Wrapper\n\n                    \n                \n                    \n                        \n                            Type :     Int64Wrapper\n\n                        \n                    \n                    \n                        \n                            Default value : new Int64Wrapper()\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:46\n                            \n                        \n\n                \n                    \n                        Sum of all values.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:70\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:110\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:94\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:78\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:102\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:86\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:91\n                            \n                        \n\n\n                \n                    \n                            Gets the count of update operations executed.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:81\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getSum()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:101\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of all values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/histogram.ts:69\n                            \n                        \n\n\n                \n                    \n                            Increases the current count and updates the reservoir.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:128\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:148\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:132\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:116\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:144\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:152\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Counting } from \"./counting\";\nimport { Int64Wrapper } from \"./int64\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { Reservoir } from \"./reservoir\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\n\n/**\n * Represents the distribution of values - e.g. number of logged-in users, search result count.\n *\n * @export\n * @class Histogram\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n * @implements {Sampling}\n */\nexport class Histogram extends BaseMetric implements Counting, Metric, Sampling, Summarizing {\n\n    /**\n     * The value reservoir used to do sampling.\n     *\n     * @private\n     * @type {Reservoir}\n     * @memberof Histogram\n     */\n    private reservoir: Reservoir;\n    /**\n     * Continuous number representing the update operations executed.\n     *\n     * @private\n     * @type {number}\n     * @memberof Histogram\n     */\n    private count: number = 0;\n    /**\n     * Sum of all values.\n     *\n     * @private\n     * @type {number}\n     * @memberof Histogram\n     */\n    private sum: Int64Wrapper = new Int64Wrapper();\n\n    /**\n     * Creates an instance of Histogram.\n     *\n     * @param {Reservoir} reservoir the number reservoir used\n     * @param {string} [name] an optional metric name\n     * @param {string} [description] an optional metric description\n     * @memberof Histogram\n     */\n    public constructor(reservoir: Reservoir, name?: string, description?: string) {\n        super();\n        this.reservoir = reservoir;\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Increases the current count and updates the reservoir.\n     *\n     * @param {number} value\n     * @memberof Histogram\n     */\n    public update(value: number): void {\n        this.count += 1;\n        this.sum.add(value);\n        this.reservoir.update(value);\n    }\n\n    /**\n     * Gets the snapshot of the reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Histogram\n     */\n    public getSnapshot(): Snapshot {\n        return this.reservoir.snapshot();\n    }\n\n    /**\n     * Gets the count of update operations executed.\n     *\n     * @returns {number}\n     * @memberof Histogram\n     */\n    public getCount(): number {\n        return this.count;\n    }\n\n    /**\n     * Gets the sum of all values.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Histogram\n     */\n    public getSum(): Int64Wrapper {\n        return this.sum;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Int64Wrapper.html":{"url":"classes/Int64Wrapper.html","title":"class - Int64Wrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Int64Wrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/int64.ts\n        \n\n            \n                Description\n            \n            \n                Wrapper class for a native int64_t value.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                num\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                toNumber\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(initial: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of Int64Wrapper.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initial\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            num\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        num:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/int64.ts:18\n                            \n                        \n\n                \n                    \n                        int64_t value instance.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:36\n                            \n                        \n\n\n                \n                    \n                            Adds the specified value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toNumber\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toNumber()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:46\n                            \n                        \n\n\n                \n                    \n                            Gets the 64bit value as javascript 32bit signed integer.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/int64.ts:56\n                            \n                        \n\n\n                \n                    \n                            Converts the 64bit integer to it's string representation.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        const Int64 = require(\"node-cint64\").Int64;\n\n/**\n * Wrapper class for a native int64_t value.\n *\n * @export\n * @class Int64Wrapper\n */\nexport class Int64Wrapper {\n\n    /**\n     * int64_t value instance.\n     *\n     * @private\n     * @type {*}\n     * @memberof Int64Wrapper\n     */\n    private num: any;\n\n    /**\n     * Creates an instance of Int64Wrapper.\n     *\n     * @param {number} [initial=0]\n     * @memberof Int64Wrapper\n     */\n    public constructor(initial: number = 0) {\n        this.num = new Int64(initial);\n    }\n\n    /**\n     * Adds the specified value.\n     *\n     * @param {number} value\n     * @memberof Int64Wrapper\n     */\n    public add(value: number): void {\n        this.num = this.num.add(value);\n    }\n\n    /**\n     * Gets the 64bit value as javascript 32bit signed integer.\n     *\n     * @returns {number}\n     * @memberof Int64Wrapper\n     */\n    public toNumber(): number {\n        return this.num.toNumber();\n    }\n\n    /**\n     * Converts the 64bit integer to it's string representation.\n     *\n     * @returns {string}\n     * @memberof Int64Wrapper\n     */\n    public toString(): string {\n        return this.num.toString();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthAttributeInterface.html":{"url":"interfaces/LengthAttributeInterface.html","title":"interface - LengthAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length\" attribute (e.g. Array).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                    \n                                \n                                \n                                    \n                                        length:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LengthMethodInterface.html":{"url":"interfaces/LengthMethodInterface.html","title":"interface - LengthMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LengthMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"length()\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            length\n                            \n                            \n                        \n                    \n                \n                \n                    \nlength()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/logger.ts\n        \n\n            \n                Description\n            \n            \n                A logger abstraction used in this library.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        debug\n                                \n                                \n                                        error\n                                \n                                \n                                        info\n                                \n                                \n                                        warn\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                    \n                                \n                                \n                                    \n                                        debug:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                    \n                                \n                                \n                                    \n                                        info:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warn\n                                    \n                                \n                                \n                                    \n                                        warn:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A logger abstraction used in this library.\n *\n * @export\n * @interface Logger\n */\nexport interface Logger {\n    error: (...args: any[]) => any;\n    warn: (...args: any[]) => any;\n    info: (...args: any[]) => any;\n    debug: (...args: any[]) => any;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metered.html":{"url":"interfaces/Metered.html","title":"interface - Metered","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metered\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metered.ts\n        \n\n            \n                Description\n            \n            \n                Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get15MinuteRate\n                                \n                                \n                                    get1MinuteRate\n                                \n                                \n                                    get5MinuteRate\n                                \n                                \n                                    getCount\n                                \n                                \n                                    getMeanRate\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get15MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget15MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:28\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 15 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get1MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget1MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:44\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last minute.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get5MinuteRate\n                            \n                            \n                        \n                    \n                \n                \n                    \nget5MinuteRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the rate of the last 5 minutes.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:20\n                            \n                        \n\n\n                \n                    \n                            Gets the total number of events.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMeanRate\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMeanRate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metered.ts:52\n                            \n                        \n\n\n                \n                    \n                            Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a metric which measure a rate of events - e.g. function call rate or request rate.\n *\n * @export\n * @interface Metered\n * @extends {Metric}\n */\nexport interface Metered extends Metric {\n\n    /**\n     * Gets the total number of events.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getCount(): number;\n\n    /**\n     * Gets the rate of the last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get15MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get5MinuteRate(): number;\n\n    /**\n     * Gets the rate of the last minute.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    get1MinuteRate(): number;\n\n    /**\n     * Gets the mean rate - the meaning of the mean-rate depends on the actual implementation.\n     *\n     * @returns {number}\n     * @memberof Metered\n     */\n    getMeanRate(): number;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Metric.html":{"url":"interfaces/Metric.html","title":"interface - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric.ts\n        \n\n            \n                Description\n            \n            \n                Representation for a metrics.\n\n            \n\n            \n                Extends\n            \n            \n                    Groupable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getDescription\n                                \n                                \n                                    getName\n                                \n                                \n                                    setDescription\n                                \n                                \n                                    setName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetDescription()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:38\n                            \n                        \n\n\n                \n                    \n                            Gets the description of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetName()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:22\n                            \n                        \n\n\n                \n                    \n                            Gets the name of the metric.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetDescription(description: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:46\n                            \n                        \n\n\n                \n                    \n                            Sets the description of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetName(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric.ts:30\n                            \n                        \n\n\n                \n                    \n                            Sets the name of the metric.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Groupable } from \"./groupable\";\nimport { Taggable } from \"./taggable\";\n\n/**\n * Representation for a metrics.\n *\n * @export\n * @interface Metric\n * @extends {Groupable}\n * @extends {Taggable}\n */\nexport interface Metric extends Groupable, Taggable {\n\n    /**\n     * Gets the name of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getName(): string;\n\n    /**\n     * Sets the name of the metric.\n     *\n     * @param {string} name\n     * @memberof Metric\n     */\n    setName(name: string): void;\n\n    /**\n     * Gets the description of the metric.\n     *\n     * @returns {string}\n     * @memberof Metric\n     */\n    getDescription(): string;\n\n    /**\n     * Sets the description of the metric.\n     *\n     * @param {string} description\n     * @memberof Metric\n     */\n    setDescription(description: string): void;\n\n}\n\n/**\n * Abstract base-class for a metric which implements commonly needed functions:\n * - get / set name\n * - get / set tags\n * - get / set group\n *\n * @export\n * @abstract\n * @class BaseMetric\n * @implements {Metric}\n */\nexport abstract class BaseMetric implements Metric {\n\n    /**\n     * A static number instance to give an unique id with an application instance.\n     *\n     * @private\n     * @static\n     * @memberof BaseMetric\n     */\n    private static COUNTER = 0;\n\n    /**\n     * The unique id of this metric instance.\n     *\n     * @type {number}\n     * @memberof BaseMetric\n     */\n    public readonly id: number = BaseMetric.COUNTER++;\n    /**\n     * Maps of tags for this metric.\n     *\n     * @protected\n     * @type {Map}\n     * @memberof BaseMetric\n     */\n    protected tags: Map = new Map();\n    /**\n     * The group set to this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected group: string;\n    /**\n     * The name of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected name: string;\n    /**\n     * The description of this metric.\n     *\n     * @protected\n     * @type {string}\n     * @memberof BaseMetric\n     */\n    protected description: string;\n\n    public getName(): string {\n        return this.name;\n    }\n\n    public setName(name: string): void {\n        this.name = name;\n    }\n\n    public getDescription(): string {\n        return this.description;\n    }\n\n    public setDescription(description: string): void {\n        this.description = description;\n    }\n\n    public getGroup(): string {\n        return this.group;\n    }\n\n    public setGroup(group: string): void {\n        this.group = group;\n    }\n\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    public getTag(name: string): string {\n        return this.tags.get(name);\n    }\n\n    public setTag(name: string, value: string): void {\n        this.tags.set(name, value);\n    }\n\n    public removeTag(name: string): void {\n        this.tags.delete(name);\n    }\n\n    public toString(): string {\n        if (this.group) {\n            return `${this.group}.${this.name}`;\n        }\n        return this.name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistration.html":{"url":"classes/MetricRegistration.html","title":"class - MetricRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                metricRef\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(metricRef: T)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:67\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRef\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            metricRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRef:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:60\n                            \n                        \n\n                \n                    \n                        The metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:67\n                            \n                        \n\n                \n                    \n                        The name the metric is registered with.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Gauge } from \"./gauge\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null): Histogram {\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricRegistryListener.html":{"url":"interfaces/MetricRegistryListener.html","title":"interface - MetricRegistryListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricRegistryListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry-listener.ts\n        \n\n            \n                Description\n            \n            \n                A listener interface to keep track of metric insertion / removal.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    metricAdded\n                                \n                                \n                                    metricRemoved\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricAdded\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricAdded(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:20\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was added to a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the metric\n\n                                                        \n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                metric object\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metricRemoved\n                            \n                            \n                        \n                    \n                \n                \n                    \nmetricRemoved(name: string, metric: Metric)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry-listener.ts:29\n                            \n                        \n\n\n                \n                    \n                            Called when a metric was removed from a MetricRegistry.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        metric\n                                                        \n                                                                    Metric\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * A listener interface to keep track of metric insertion / removal.\n *\n * @export\n * @interface MetricRegistryListener\n */\nexport interface MetricRegistryListener {\n\n    /**\n     * Called when a metric was added to a {@link MetricRegistry}.\n     *\n     * @param {string} name name of the metric\n     * @param {Metric} metric metric object\n     * @memberof MetricRegistryListener\n     */\n    metricAdded(name: string, metric: Metric): void;\n\n    /**\n     * Called when a metric was removed from a {@link MetricRegistry}.\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistryListener\n     */\n    metricRemoved(name: string, metric: Metric): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricRegistryListenerRegistration.html":{"url":"classes/MetricRegistryListenerRegistration.html","title":"class - MetricRegistryListenerRegistration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricRegistryListenerRegistration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-registry.ts\n        \n\n            \n                Description\n            \n            \n                Represents a registration of a MetricRegistryListener.\nThis instance can be used to safely remove the listener from registry again.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(listener: MetricRegistryListener, registry: MetricRegistry)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/metric-registry.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of MetricRegistryListenerRegistration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        listener\n                                                  \n                                                        \n                                                                    MetricRegistryListener\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registry\n                                                  \n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        remove()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-registry.ts:39\n                            \n                        \n\n\n                \n                    \n                            Removes the managed listener from the metric registry.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, StdClock } from \"./clock\";\nimport { Counter, MonotoneCounter } from \"./counter\";\nimport { Gauge } from \"./gauge\";\nimport { Histogram } from \"./histogram\";\nimport { Meter } from \"./meter\";\nimport { BaseMetric, Metric } from \"./metric\";\nimport { MetricRegistryListener } from \"./metric-registry-listener\";\nimport { MetricSet } from \"./metric-set\";\nimport { Reservoir, SlidingWindowReservoir } from \"./reservoir\";\nimport { Timer } from \"./timer\";\n\nexport type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;\n\n/**\n * Represents a registration of a {@link MetricRegistryListener}.\n * This instance can be used to safely remove the listener from registry again.\n *\n * @export\n * @class MetricRegistryListenerRegistration\n */\nexport class MetricRegistryListenerRegistration {\n\n    /**\n     * Creates an instance of MetricRegistryListenerRegistration.\n     *\n     * @param {MetricRegistryListener} listener\n     * @param {MetricRegistry} registry\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public constructor(private listener: MetricRegistryListener, private registry: MetricRegistry) {}\n\n    /**\n     * Removes the managed listener from the metric registry.\n     *\n     * @memberof MetricRegistryListenerRegistration\n     */\n    public remove(): void {\n        this.registry.removeListener(this.listener);\n    }\n\n}\n\n/**\n * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).\n *\n * @export\n * @class MetricRegistration\n * @template T\n */\nexport class MetricRegistration {\n\n    /**\n     * The metric instance.\n     *\n     * @type {T}\n     * @memberof MetricRegistration\n     */\n    public metricRef: T;\n    /**\n     * The name the metric is registered with.\n     *\n     * @type {string}\n     * @memberof MetricRegistration\n     */\n    public name: string;\n\n    /**\n     * Creates an instance of MetricRegistration.\n     *\n     * @param {T} metricRef\n     * @memberof MetricRegistration\n     */\n    public constructor(metricRef: T) {\n        this.metricRef = metricRef;\n        this.name = metricRef.getName();\n    }\n\n}\n\n/**\n * A metric registry manages metric instances.\n *\n * @export\n * @class MetricRegistry\n * @extends {BaseMetric}\n * @implements {MetricSet}\n */\nexport class MetricRegistry extends BaseMetric implements MetricSet {\n\n    /**\n     * Determines if the specified object is a {@link Counter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Counter}\n     * @memberof MetricRegistry\n     */\n    public static isCounter(instance: any): instance is Counter {\n        return instance instanceof Counter || instance.metricRef instanceof Counter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MonotoneCounter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public static isPureMonotoneCounter(instance: any): instance is MonotoneCounter {\n        return (instance instanceof MonotoneCounter || instance.metricRef instanceof MonotoneCounter) &&\n                !MetricRegistry.isCounter(instance);\n    }\n\n    /**\n     * Determines if the specified object is a {@link Histogram} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Histogram}\n     * @memberof MetricRegistry\n     */\n    public static isHistogram(instance: any): instance is Histogram {\n        return instance instanceof Histogram || instance.metricRef instanceof Histogram;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Meter} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Meter}\n     * @memberof MetricRegistry\n     */\n    public static isMeter(instance: any): instance is Meter {\n        return instance instanceof Meter || instance.metricRef instanceof Meter;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Timer} or references one.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is Timer}\n     * @memberof MetricRegistry\n     */\n    public static isTimer(instance: any): instance is Timer {\n        return instance instanceof Timer || instance.metricRef instanceof Timer;\n    }\n\n    /**\n     * Determines if the specified object is a {@link Gauge} or references one.\n     *\n     * @static\n     * @template T\n     * @param {*} instance\n     * @returns {instance is Gauge}\n     * @memberof MetricRegistry\n     */\n    public static isGauge(instance: any): instance is Gauge {\n        const directGauge: boolean = !!instance.getValue && instance.getValue instanceof Function;\n        const gaugeRegistration =   !!instance.metricRef &&\n                                    !!instance.metricRef.getValue &&\n                                    instance.metricRef.getValue instanceof Function;\n        return directGauge || gaugeRegistration;\n    }\n\n    /**\n     * Determines if the specified object is a {@link MetricSet}.\n     *\n     * @static\n     * @param {*} instance\n     * @returns {instance is MetricSet}\n     * @memberof MetricRegistry\n     */\n    public static isMetricSet(instance: any): instance is MetricSet {\n        return !!instance.getMetrics && instance.getMetrics instanceof Function;\n    }\n\n    /**\n     * Standard function to generate the name for a metric.\n     *\n     * @private\n     * @static\n     * @param {string} baseName\n     * @param {string} metricName\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private static defaultNameFactory(baseName: string, metricName: string, metric: Metric): string {\n        return baseName + \".\" + metricName;\n    }\n\n    /**\n     * Default clock instance if no clock instance if provided.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof MetricRegistry\n     */\n    private defaultClock: Clock = new StdClock();\n    /**\n     * A collection metric references.\n     *\n     * @private\n     * @type {Array>}\n     * @memberof MetricRegistry\n     */\n    private metrics: Array> = [];\n    /**\n     * The name factory to build metric names.\n     *\n     * @private\n     * @type {NameFactory}\n     * @memberof MetricRegistry\n     */\n    private nameFactory: NameFactory = MetricRegistry.defaultNameFactory;\n    /**\n     * A collection of metric listeners.\n     *\n     * @private\n     * @type {MetricRegistryListener[]}\n     * @memberof MetricRegistry\n     */\n    private listeners: MetricRegistryListener[] = [];\n\n    /**\n     * Adds the specified listener and returns the corrsponding\n     * registration object.\n     *\n     * @param {MetricRegistryListener} listener\n     * @returns {MetricRegistryListenerRegistration}\n     * @memberof MetricRegistry\n     */\n    public addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration {\n        this.listeners.push(listener);\n        return new MetricRegistryListenerRegistration(listener, this);\n    }\n\n    /**\n     * Removes a listener manually.\n     *\n     * @param {MetricRegistryListener} listener\n     * @memberof MetricRegistry\n     */\n    public removeListener(listener: MetricRegistryListener): void {\n        const index = this.listeners.indexOf(listener);\n        if (index > -1) {\n            delete this.listeners[index];\n        }\n    }\n\n    /**\n     * Sets the default name factory for metric instances.\n     *\n     * @param {NameFactory} nameFactory\n     * @memberof MetricRegistry\n     */\n    public setNameFactory(nameFactory: NameFactory): void {\n        this.nameFactory = nameFactory;\n    }\n\n    /**\n     * Gets the default clock.\n     *\n     * @returns {Clock}\n     * @memberof MetricRegistry\n     */\n    public getDefaultClock(): Clock {\n        return this.defaultClock;\n    }\n\n    /**\n     * Sets the default clock.\n     *\n     * @param {Clock} defaultClock\n     * @memberof MetricRegistry\n     */\n    public setDefaultClock(defaultClock: Clock): void {\n        this.defaultClock = defaultClock;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCounterList} instead\n     */\n    public getCounters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isCounter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Counter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugeList} instead\n     */\n    public getGauges(): Map> {\n        const map: Map> = new Map();\n        this.metrics\n            .filter(MetricRegistry.isGauge)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Gauge));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramList} instead\n     */\n    public getHistograms(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Histogram));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMeterList} instead\n     */\n    public getMeters(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isMeter)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Meter));\n        return map;\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimerList} instead\n     */\n    public getTimers(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .filter(MetricRegistry.isTimer)\n            .forEach((registration) => map.set(registration.name, registration.metricRef as Timer));\n        return map;\n    }\n\n    /**\n     * Gets the list of all managed counter instances.\n     *\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCounterList(): Counter[] {\n        return this.metrics\n            .filter(MetricRegistry.isCounter)\n            .map((registration) => registration.metricRef as Counter);\n    }\n\n    /**\n     * Gets the list of all managed monotone counter instances.\n     *\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCounterList(): MonotoneCounter[] {\n        return this.metrics\n            .filter(MetricRegistry.isPureMonotoneCounter)\n            .map((registration) => registration.metricRef as MonotoneCounter);\n    }\n\n    /**\n     * Gets the list of all managed gauge instances.\n     *\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugeList(): Array> {\n        return this.metrics\n            .filter(MetricRegistry.isGauge)\n            .map((registration) => registration.metricRef as Gauge);\n    }\n\n    /**\n     * Gets the list of all managed histogram instances.\n     *\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramList(): Histogram[] {\n        return this.metrics\n            .filter(MetricRegistry.isHistogram)\n            .map((registration) => registration.metricRef as Histogram);\n    }\n\n    /**\n     * Gets the list of all managed meter instances.\n     *\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMeterList(): Meter[] {\n        return this.metrics\n            .filter(MetricRegistry.isMeter)\n            .map((registration) => registration.metricRef as Meter);\n    }\n\n    /**\n     * Gets the list of all managed timer instances.\n     *\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimerList(): Timer[] {\n        return this.metrics\n            .filter(MetricRegistry.isTimer)\n            .map((registration) => registration.metricRef as Timer);\n    }\n\n    /**\n     * Gets a mapping of all managed metric instances regardless of the type.\n     *\n     * @returns {Map}\n     * @memberof MetricRegistry\n     */\n    public getMetrics(): Map {\n        const map: Map = new Map();\n        this.metrics\n            .forEach((registration) => map.set(registration.name, registration.metricRef));\n        return map;\n    }\n\n    /**\n     * Gets a list of all managed metric instances regardless of the type.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricList(): Metric[] {\n        return this.metrics.map((metric) => metric.metricRef);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetricsByName} instead\n     */\n    public getMetric(name: string): Metric {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getCountersByName} instead\n     */\n    public getCounter(name: string): Counter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getGaugesByName} instead\n     */\n    public getGauge(name: string): Gauge {\n        return this.getFirstByName>(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead\n     */\n    public getHistogram(name: string): Histogram {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getMetersByName} instead\n     */\n    public getMeter(name: string): Meter {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link getTimersByName} instead\n     */\n    public getTimer(name: string): Timer {\n        return this.getFirstByName(name);\n    }\n\n    /**\n     * Gets all mamanged metric instance by name.\n     *\n     * @param {string} name\n     * @returns {Metric[]}\n     * @memberof MetricRegistry\n     */\n    public getMetricsByName(name: string): Metric[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed counter instances by name.\n     *\n     * @param {string} name\n     * @returns {Counter[]}\n     * @memberof MetricRegistry\n     */\n    public getCountersByName(name: string): Counter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed monotone counter instances by name.\n     *\n     * @param {string} name\n     * @returns {MonotoneCounter[]}\n     * @memberof MetricRegistry\n     */\n    public getMonotoneCountersByName(name: string): MonotoneCounter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed gauge instances by name.\n     *\n     * @param {string} name\n     * @returns {Array>}\n     * @memberof MetricRegistry\n     */\n    public getGaugesByName(name: string): Array> {\n        return this.getByName>(name);\n    }\n\n    /**\n     * Gets all managed histogram instances by name.\n     *\n     * @param {string} name\n     * @returns {Histogram[]}\n     * @memberof MetricRegistry\n     */\n    public getHistogramsByname(name: string): Histogram[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed meter instances by name.\n     *\n     * @param {string} name\n     * @returns {Meter[]}\n     * @memberof MetricRegistry\n     */\n    public getMetersByName(name: string): Meter[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * Gets all managed timer instances by name.\n     *\n     * @param {string} name\n     * @returns {Timer[]}\n     * @memberof MetricRegistry\n     */\n    public getTimersByName(name: string): Timer[] {\n        return this.getByName(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMetric(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        if (metrics.length > 0) {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metrics[0], 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metrics[0]);\n        }\n    }\n\n    /**\n     * Removes all managed metric instances by name regardless of the type.\n     *\n     * @param {string} name\n     * @memberof MetricRegistry\n     */\n    public removeMetrics(name: string): void {\n        const metrics: Metric[] = this.getByName(name);\n\n        metrics.forEach((metric) => {\n            const index = this.metrics\n                .map((m) => m.metricRef)\n                .indexOf(metric, 0);\n            if (index > -1) {\n                this.metrics.splice(index, 1);\n            }\n            this.fireMetricRemoved(name, metric);\n        });\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeCounter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeGauge(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeHistogram(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeMeter(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * @deprecated since version 1.3 - use {@link removeMetrics} instead\n     */\n    public removeTimer(name: string): void {\n        this.removeMetric(name);\n    }\n\n    /**\n     * Builds a new counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {Counter}\n     * @memberof MetricRegistry\n     */\n    public newCounter(name: string, group: string = null, description: string = null): Counter {\n        const counter = new Counter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new monotone counter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @returns {MonotoneCounter}\n     * @memberof MetricRegistry\n     */\n    public newMonotoneCounter(name: string, group: string = null, description: string = null): MonotoneCounter {\n        const counter = new MonotoneCounter(name, description);\n        if (!!group) {\n            counter.setGroup(group);\n        }\n        this.register(counter.getName(), counter);\n        return counter;\n    }\n\n    /**\n     * Builds a new meter with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {number} [sampleRate=1]\n     * @param {string} [description=null]\n     * @returns {Meter}\n     * @memberof MetricRegistry\n     */\n    public newMeter(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        sampleRate: number = 1,\n        description: string = null): Meter {\n\n        const meter = new Meter(clock, sampleRate, name, description);\n        if (!!group) {\n            meter.setGroup(group);\n        }\n        this.register(meter.getName(), meter);\n        return meter;\n    }\n\n    /**\n     * Builds a new histogram with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Histogram}\n     * @memberof MetricRegistry\n     */\n    public newHistogram(\n        name: string,\n        group: string = null,\n        reservoir: Reservoir = null,\n        description: string = null): Histogram {\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const histogram = new Histogram(reservoir, name, description);\n        if (!!group) {\n            histogram.setGroup(group);\n        }\n        this.register(histogram.getName(), histogram);\n        return histogram;\n    }\n\n    /**\n     * Builds a new timer with the given name and adds it\n     * to the registry.\n     *\n     * @param {string} name\n     * @param {string} [group=null]\n     * @param {string} [description=null]\n     * @param {Clock} [clock=this.defaultClock]\n     * @param {Reservoir} [reservoir=null]\n     * @returns {Timer}\n     * @memberof MetricRegistry\n     */\n    public newTimer(\n        name: string,\n        group: string = null,\n        clock: Clock = this.defaultClock,\n        reservoir: Reservoir = null,\n        description: string = null): Timer {\n\n        if (!reservoir) {\n            reservoir = new SlidingWindowReservoir(1024);\n        }\n        const timer = new Timer(clock, reservoir, name, description);\n        if (!!group) {\n            timer.setGroup(group);\n        }\n        this.register(timer.getName(), timer);\n        return timer;\n    }\n\n    /**\n     * Registers the given metric under it's name in this registry.\n     *\n     * If the metric is a metric-set the child-metrics are\n     * registered using their names the name of the metric-set is set as group.\n     *\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     *\n     * @memberof MetricRegistry\n     */\n    public registerMetric(metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(metric.getName(), metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetricList().forEach((m: Metric) => {\n                m.setGroup(metric.getName());\n                this.registerMetric(m);\n            });\n        }\n    }\n\n    /**\n     * Registeres a metric by name\n     *\n     * @param {string} name\n     * @param {Metric} metric\n     * @param {string} [group=null]\n     * @deprecated since version 1.5 - use {@link registerMetric} instead\n     * @memberof MetricRegistry\n     */\n    public register(name: string, metric: Metric, group: string = null, description: string = null): void {\n        if (!!group) {\n            metric.setGroup(group);\n        }\n        if (!!description) {\n            metric.setDescription(description);\n        }\n\n        metric.setName(this.generateName(name, metric));\n\n        if (metric instanceof Meter ||\n            metric instanceof Counter ||\n            metric instanceof MonotoneCounter ||\n            MetricRegistry.isGauge(metric) ||\n            metric instanceof Histogram ||\n            metric instanceof Timer) {\n            this.metrics.push(new MetricRegistration(metric));\n            this.fireMetricAdded(name, metric);\n        } else if (MetricRegistry.isMetricSet(metric)) {\n            metric.getMetrics().forEach((m: Metric) => {\n                const metricName = this.nameFactory(name, m.getName(), m);\n                this.register(metricName, m);\n            });\n        }\n    }\n\n    /**\n     * Finds the first metric instance by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T}\n     * @memberof MetricRegistry\n     */\n    private getFirstByName(name: string): T {\n        const arr: Metric[] = this.getByName(name);\n        if (arr.length === 0) {\n            return null;\n        }\n        return arr[0] as T;\n    }\n\n    /**\n     * Gets all metric instances by name.\n     *\n     * @private\n     * @template T\n     * @param {string} name\n     * @returns {T[]}\n     * @memberof MetricRegistry\n     */\n    private getByName(name: string): T[] {\n        return this.metrics\n            .filter((metric) => metric.name === name)\n            .map((metric) => metric.metricRef) as T[];\n    }\n\n    /**\n     * Builds the name of the metric.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof MetricRegistry\n     */\n    private generateName(name: string, metric: Metric): string {\n        if (!!metric.getGroup()) {\n            return `${metric.getGroup()}.${name}`;\n        }\n        return name;\n    }\n\n    /**\n     * Invokes all metric listeners when a new metric was added.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricAdded(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricAdded(name, metric));\n    }\n\n    /**\n     * Invokes all metric listeners when a metric was removed.\n     *\n     * @private\n     * @param {string} name\n     * @param {Metric} metric\n     * @memberof MetricRegistry\n     */\n    private fireMetricRemoved(name: string, metric: Metric): void {\n        this.listeners.forEach((listener) => listener.metricRemoved(name, metric));\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetricReporter.html":{"url":"classes/MetricReporter.html","title":"class - MetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-reporter.ts\n        \n\n            \n                Description\n            \n            \n                Base-class for metric-reporter implementations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                metricRegistries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addMetricRegistry\n                            \n                            \n                                    Public\n                                removeMetricRegistry\n                            \n                            \n                                    Public\n                                    Abstract\n                                start\n                            \n                            \n                                    Public\n                                    Abstract\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            metricRegistries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        metricRegistries:     MetricRegistry[]\n\n                    \n                \n                    \n                        \n                            Type :     MetricRegistry[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:21\n                            \n                        \n\n                \n                    \n                        MetricRegistry instances.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            addMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        addMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:45\n                            \n                        \n\n\n                \n                    \n                            Adds a new MetricRegistry to be reported.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeMetricRegistry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeMetricRegistry(metricRegistry: MetricRegistry)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:55\n                            \n                        \n\n\n                \n                    \n                            Removes the given MetricRegistry if it was previously added.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metricRegistry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:29\n                            \n                        \n\n\n                \n                    \n                            Implementations start reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-reporter.ts:37\n                            \n                        \n\n\n                \n                    \n                            Implementations stop reporting metrics when called.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { MetricRegistry } from \"./metric-registry\";\n\n/**\n * Base-class for metric-reporter implementations.\n *\n * @export\n * @abstract\n * @class MetricReporter\n */\nexport abstract class MetricReporter {\n\n    /**\n     * {@link MetricRegistry} instances.\n     *\n     * @protected\n     * @type {MetricRegistry[]}\n     * @memberof MetricReporter\n     */\n    protected metricRegistries: MetricRegistry[] = [];\n\n    /**\n     * Implementations start reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract start(): void;\n\n    /**\n     * Implementations stop reporting metrics when called.\n     *\n     * @abstract\n     * @memberof MetricReporter\n     */\n    public abstract stop(): void;\n\n    /**\n     * Adds a new {@link MetricRegistry} to be reported.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public addMetricRegistry(metricRegistry: MetricRegistry): void {\n        this.metricRegistries.push(metricRegistry);\n    }\n\n    /**\n     * Removes the given {@link MetricRegistry} if it was previously added.\n     *\n     * @param {MetricRegistry} metricRegistry\n     * @memberof MetricReporter\n     */\n    public removeMetricRegistry(metricRegistry: MetricRegistry): void {\n        const index: number = this.metricRegistries.indexOf(metricRegistry);\n        if (index > -1) {\n            this.metricRegistries.splice(index, 1);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricSet.html":{"url":"interfaces/MetricSet.html","title":"interface - MetricSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/metric-set.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of metric instances as a single metric.\n\n            \n\n            \n                Extends\n            \n            \n                    Metric\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getMetricList\n                                \n                                \n                                    getMetrics\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetricList\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetricList()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets a list of all Metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Metric[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMetrics\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMetrics()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/metric-set.ts:21\n                            \n                        \n\n\n                \n                    \n                            Gets a mapping from names to metric instances.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Metric } from \"./metric\";\n\n/**\n * Represents a collection of metric instances as a single metric.\n *\n * @export\n * @interface MetricSet\n * @extends {Metric}\n */\nexport interface MetricSet extends Metric {\n\n    /**\n     * Gets a mapping from names to metric instances.\n     *\n     * @deprecated since version 1.3 - use {@link getMetricList} instead\n     * @returns {Map}\n     * @memberof MetricSet\n     */\n    getMetrics(): Map;\n\n    /**\n     * Gets a list of all {@link Metric} instances.\n     *\n     * @returns {Metric[]}\n     * @memberof MetricSet\n     */\n    getMetricList(): Metric[];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MonotoneCounter.html":{"url":"classes/MonotoneCounter.html","title":"class - MonotoneCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MonotoneCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/counter.ts\n        \n\n            \n                Description\n            \n            \n                A monotonically increasing number.\nThe initial value is 0.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        Counting\n                        Metric\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                count\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getCount\n                            \n                            \n                                    Public\n                                increment\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/counter.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of MonotoneCounter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional name of the counter\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional description of the counter\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        count:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/counter.ts:25\n                            \n                        \n\n                \n                    \n                        Holds the current value.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:70\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:110\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:94\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:78\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:102\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:86\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getCount\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCount()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counter.ts:59\n                            \n                        \n\n\n                \n                    \n                            Gets the current count.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            increment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        increment(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counter.ts:46\n                            \n                        \n\n\n                \n                    \n                            Increases the current count by the given value - a negative value is causing an error.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reset\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reset()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/counter.ts:68\n                            \n                        \n\n\n                \n                    \n                            Sets the current count to 0.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:128\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:148\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:132\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:116\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:144\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:152\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Counting } from \"./counting\";\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A monotonically increasing number.\n * The initial value is 0.\n *\n * @export\n * @class MonotoneCounter\n * @extends {BaseMetric}\n * @implements {Counting}\n * @implements {Metric}\n */\nexport class MonotoneCounter extends BaseMetric implements Counting, Metric {\n\n    /**\n     * Holds the current value.\n     *\n     * @private\n     * @type {number}\n     * @memberof MonotoneCounter\n     */\n    protected count: number = 0;\n\n    /**\n     * Creates an instance of MonotoneCounter.\n     *\n     * @param {string} [name] optional name of the counter\n     * @param {string} [description] optional description of the counter\n     * @memberof MonotoneCounter\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Increases the current count by the given value - a negative value is causing an error.\n     *\n     * @param {number} value\n     * @memberof MonotoneCounter\n     */\n    public increment(value: number): void {\n        if (value \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MovingAverage.html":{"url":"interfaces/MovingAverage.html","title":"interface - MovingAverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MovingAverage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/moving-average.ts\n        \n\n            \n                Description\n            \n            \n                Represents an average value which depends on an alpha factor.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getAlpha\n                                \n                                \n                                    getAverage\n                                \n                                \n                                    tick\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAlpha\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAlpha()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the alpha value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAverage\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAverage(unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:29\n                            \n                        \n\n\n                \n                    \n                            Gets the average for the specified time unit -\ne.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tick\n                            \n                            \n                        \n                    \n                \n                \n                    \ntick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:45\n                            \n                        \n\n\n                \n                    \n                            Triggers the actual average to be updated.\nA tick represents an update event.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/moving-average.ts:37\n                            \n                        \n\n\n                \n                    \n                            Adds the given value to the logic of the implementation.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * Represents an average value which depends on an alpha factor.\n *\n * @export\n * @interface MovingAverage\n */\nexport interface MovingAverage {\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAlpha(): number;\n\n    /**\n     * Gets the average for the specified time unit -\n     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof MovingAverage\n     */\n    getAverage(unit: TimeUnit): number;\n\n    /**\n     * Adds the given value to the logic of the implementation.\n     *\n     * @param {number} value\n     * @memberof MovingAverage\n     */\n    update(value: number): void;\n\n    /**\n     * Triggers the actual average to be updated.\n     * A tick represents an update event.\n     *\n     * @memberof MovingAverage\n     */\n    tick(): void;\n}\n\n/**\n * Calculates the moving average with an exponential alpha value.\n *\n * @export\n * @class ExponentiallyWeightedMovingAverage\n * @implements {MovingAverage}\n */\nexport class ExponentiallyWeightedMovingAverage implements MovingAverage {\n\n    public static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / 60));\n    public static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / 60));\n    public static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 5)));\n    public static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 5)));\n    public static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number = 1 - Math.exp(-(1 / (60 * 15)));\n    public static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number = 1 - Math.exp(-(5 / (60 * 15)));\n\n    /**\n     * Alpha component (weight) of the moving average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private alpha: number;\n    /**\n     * The sampling interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private interval: number;\n    /**\n     * The sum of all values passed to the update function.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private sum: number = 0;\n    /**\n     * The current average.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private avg: number = -1.0;\n    /**\n     * Multiplier of the time unit specified in the constructor in nanoseconds.\n     *\n     * @private\n     * @type {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private timeUnitInNanoseconds: number;\n    /**\n     * The time unit of the sampling rate.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    private unit: TimeUnit;\n\n    /**\n     * Creates an instance of ExponentiallyWeightedMovingAverage.\n     *\n     * @param {number} alpha\n     * @param {number} interval\n     * @param {TimeUnit} unit\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public constructor(alpha: number, interval: number, unit: TimeUnit) {\n        this.alpha = alpha;\n        this.interval = interval;\n        this.unit = unit;\n        this.timeUnitInNanoseconds = unit.convertTo(interval, NANOSECOND);\n    }\n\n    /**\n     * Gets the alpha value.\n     *\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n    /**\n     * Gets the time unit.\n     *\n     * @returns {TimeUnit}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getUnit(): TimeUnit {\n        return this.unit;\n    }\n\n    /**\n     * Gets the average in the specified time unit.\n     *\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public getAverage(unit: TimeUnit): number {\n        if (this.avg === -1.0) {\n            return 0;\n        }\n        return this.avg * NANOSECOND.convertTo(this.timeUnitInNanoseconds, unit);\n    }\n\n    /**\n     * Adds the value to the current sum.\n     *\n     * @param {number} value\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public update(value: number): void {\n        this.sum += value;\n    }\n\n    /**\n     * Updates the current average by multiplying the alpha value with the difference\n     * of the last average and the current average.\n     *\n     * Averages are calculated by dividing the sum through the sampling interval.\n     *\n     * If the alpha value is high the last average has more weight and vice versa.\n     *\n     * @memberof ExponentiallyWeightedMovingAverage\n     */\n    public tick(): void {\n        const sum = this.sum;\n        const avg = sum / this.interval;\n        this.sum -= sum;\n\n        if (this.avg === -1.0) {\n            this.avg = avg;\n        } else {\n            this.avg += this.alpha * (avg - this.avg);\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reservoir.html":{"url":"interfaces/Reservoir.html","title":"interface - Reservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Reservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                Represents a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                                \n                                    snapshot\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the capacity of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nsnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:35\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot of this reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:27\n                            \n                        \n\n\n                \n                    \n                            Adds a value to the reservoir.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sampling.html":{"url":"interfaces/Sampling.html","title":"interface - Sampling","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sampling\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/sampling.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that can build a snapshot of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSnapshot\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSnapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/sampling.ts:19\n                            \n                        \n\n\n                \n                    \n                            Gets the snapshot of values.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Snapshot } from \"./snapshot\";\n\n/**\n * Interface fo all metric classes that can build a snapshot of values.\n *\n * @export\n * @interface Sampling\n */\nexport interface Sampling {\n\n    /**\n     * Gets the snapshot of values.\n     *\n     * @returns {Snapshot}\n     * @memberof Sampling\n     */\n    getSnapshot(): Snapshot;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleGauge.html":{"url":"classes/SimpleGauge.html","title":"class - SimpleGauge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleGauge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/gauge.ts\n        \n\n            \n                Description\n            \n            \n                A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n\n            \n\n            \n                Extends\n            \n            \n                    BaseMetric\n            \n\n            \n                Implements\n            \n            \n                        Gauge\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                            \n                                    Private\n                                    Static\n                                COUNTER\n                            \n                            \n                                    Protected\n                                description\n                            \n                            \n                                    Protected\n                                group\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Protected\n                                name\n                            \n                            \n                                    Protected\n                                tags\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                setValue\n                            \n                            \n                                    Public\n                                getDescription\n                            \n                            \n                                    Public\n                                getGroup\n                            \n                            \n                                    Public\n                                getName\n                            \n                            \n                                    Public\n                                getTag\n                            \n                            \n                                    Public\n                                getTags\n                            \n                            \n                                    Public\n                                removeTag\n                            \n                            \n                                    Public\n                                setDescription\n                            \n                            \n                                    Public\n                                setGroup\n                            \n                            \n                                    Public\n                                setName\n                            \n                            \n                                    Public\n                                setTag\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(name?: string, description?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/gauge.ts:42\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleGauge with an optional name.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric name.\n\n                                                        \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                optional metric description.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:42\n                            \n                        \n\n                \n                    \n                        The value - initially set to 0.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            COUNTER\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        COUNTER:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:70\n                            \n                        \n\n                \n                    \n                        A static number instance to give an unique id with an application instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            description\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        description:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:110\n                            \n                        \n\n                \n                    \n                        The description of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            group\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        group:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:94\n                            \n                        \n\n                \n                    \n                        The group set to this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : BaseMetric.COUNTER++\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:78\n                            \n                        \n\n                \n                    \n                        The unique id of this metric instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:102\n                            \n                        \n\n                \n                    \n                        The name of this metric.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            tags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tags:     Map\n\n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:86\n                            \n                        \n\n                \n                    \n                        Maps of tags for this metric.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:63\n                            \n                        \n\n\n                \n                    \n                            Gets the current value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setValue(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/gauge.ts:73\n                            \n                        \n\n\n                \n                    \n                            Sets the current value.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getDescription()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:120\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getGroup()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:128\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getName()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:112\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:140\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTags()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:136\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Map\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        removeTag(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:148\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setDescription\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setDescription(description: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:124\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        description\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setGroup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setGroup(group: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:132\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setName(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:116\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTag(name: string, value: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:144\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseMetric\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseMetric:152\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { BaseMetric, Metric } from \"./metric\";\n\n/**\n * A gauge can represent any value - regardless of the type.\n *\n * @export\n * @interface Gauge\n * @extends {Metric}\n * @template T\n */\nexport interface Gauge extends Metric {\n\n    /**\n     * Gets the current value of the gauge.\n     *\n     * @returns {T}\n     * @memberof Gauge\n     */\n    getValue(): T;\n\n}\n\n/**\n * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.\n *\n * @export\n * @class SimpleGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SimpleGauge extends BaseMetric implements Gauge {\n\n    /**\n     * The value - initially set to 0.\n     *\n     * @private\n     * @type {number}\n     * @memberof SimpleGauge\n     */\n    private value: number = 0;\n\n    /**\n     * Creates an instance of SimpleGauge with an optional name.\n     *\n     * @param {string} [name] optional metric name.\n     * @param {string} [description] optional metric description.\n     * @memberof SimpleGauge\n     */\n    public constructor(name?: string, description?: string) {\n        super();\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Gets the current value.\n     *\n     * @returns {number}\n     * @memberof SimpleGauge\n     */\n    public getValue(): number {\n        return this.value;\n    }\n\n    /**\n     * Sets the current value.\n     *\n     * @param {number} value\n     * @memberof SimpleGauge\n     */\n    public setValue(value: number): void {\n        this.value = value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SimpleSnapshot.html":{"url":"classes/SimpleSnapshot.html","title":"class - SimpleSnapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SimpleSnapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of the Snapshot interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Snapshot\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get75thPercentile\n                            \n                            \n                                    Public\n                                get95thPercentile\n                            \n                            \n                                    Public\n                                get98thPercentile\n                            \n                            \n                                    Public\n                                get999thPercentile\n                            \n                            \n                                    Public\n                                get99thPercentile\n                            \n                            \n                                    Public\n                                getMax\n                            \n                            \n                                    Public\n                                getMean\n                            \n                            \n                                    Public\n                                getMedian\n                            \n                            \n                                    Public\n                                getMin\n                            \n                            \n                                    Public\n                                getStdDev\n                            \n                            \n                                    Public\n                                getValue\n                            \n                            \n                                    Public\n                                getValues\n                            \n                            \n                                    Public\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(values: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                            Creates an instance of SimpleSnapshot.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:134\n                            \n                        \n\n                \n                    \n                        Sorted collection of values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:153\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.75) to get the value of the 75% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:163\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.95) to get the value of the 95% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:173\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.98) to get the value of the 98% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:183\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.999) to get the value of the 99.9% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:193\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.99) to get the value of the 99% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:213\n                            \n                        \n\n\n                \n                    \n                            Gets the last value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:253\n                            \n                        \n\n\n                \n                    \n                            Gets average value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:203\n                            \n                        \n\n\n                \n                    \n                            Calls getValue(0.5) to get the value of the 50% boundary\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:223\n                            \n                        \n\n\n                \n                    \n                            Gets the first value of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:269\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:303\n                            \n                        \n\n\n                \n                    \n                            Gets the value of the boundary specified.\nE.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\nquantile | position / index | value\n0.25 | 3 | 24.25\n0.5 | 5 | 36\n0.75 | 8 | 51,25\n0.95 | 10 | NaN\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:233\n                            \n                        \n\n\n                \n                    \n                            Gets the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:243\n                            \n                        \n\n\n                \n                    \n                            Gets the length of the value array.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeAttributeInterface.html":{"url":"interfaces/SizeAttributeInterface.html","title":"interface - SizeAttributeInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeAttributeInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizeMethodInterface.html":{"url":"interfaces/SizeMethodInterface.html","title":"interface - SizeMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SizeMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/size-gauge.ts\n        \n\n            \n                Description\n            \n            \n                Accessor-interface for objects with \"size\" method.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/size-gauge.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Gauge } from \"./gauge\";\nimport { BaseMetric } from \"./metric\";\n\n/**\n * Accessor-interface for objects with \"length()\" method.\n *\n * @export\n * @interface LengthMethodInterface\n */\nexport interface LengthMethodInterface {\n    length(): number;\n}\n\n/**\n * Accessor-interface for objects with \"length\" attribute (e.g. Array).\n *\n * @export\n * @interface LengthAttributeInterface\n */\nexport interface LengthAttributeInterface {\n    length: number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" method.\n *\n * @export\n * @interface SizeMethodInterface\n */\nexport interface SizeMethodInterface {\n    size(): number;\n}\n\n/**\n * Accessor-interface for objects with \"size\" attribute (e.g. Map, Set).\n *\n * @export\n * @interface SizeAttributeInterface\n */\nexport interface SizeAttributeInterface {\n    size: number;\n}\n\ntype ValueExtractor = () => number;\n\n/**\n * Gets the current size / length of an object as gauge metric.\n *\n * @export\n * @class SizeGauge\n * @extends {BaseMetric}\n * @implements {Gauge}\n */\nexport class SizeGauge extends BaseMetric implements Gauge {\n\n    /**\n     * Checks if the specified collection is a {link LengthAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface {\n        return collection && typeof collection.length === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link LengthMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is LengthMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface {\n        return collection && typeof collection.length === \"function\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeAttributeInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeAttributeInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface {\n        return collection && typeof collection.size === \"number\";\n    }\n\n    /**\n     * Checks if the specified collection is a {link SizeMethodInterface}.\n     *\n     * @protected\n     * @static\n     * @param {*} collection\n     * @returns {collection is SizeMethodInterface}\n     * @memberof SizeGauge\n     */\n    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface {\n        return collection && typeof collection.size === \"function\";\n    }\n\n    /**\n     * Gets the actual value for the collection passed to the constructor.\n     *\n     * @private\n     * @type {ValueExtractor}\n     * @memberof SizeGauge\n     */\n    private extractor: ValueExtractor;\n\n    /**\n     * Creates an instance of SizeGauge.\n     *\n     * @param {string} name The name of the metric\n     * @param collection The collection to get the size / length from.\n     * @param {string} [description] The description of the metric\n     * @memberof SizeGauge\n     */\n    public constructor(\n        name: string,\n        collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface,\n        description?: string) {\n\n        super();\n        this.setName(name);\n        this.setDescription(description);\n\n        if (SizeGauge.isLengthAttributeInterface(collection)) {\n            this.extractor = () => collection.length;\n        } else if (SizeGauge.isLengthMethodInterface(collection)) {\n            this.extractor = () => collection.length();\n        } else if (SizeGauge.isSizeAttributeInterface(collection)) {\n            this.extractor = () => collection.size;\n        } else if (SizeGauge.isSizeMethodInterface(collection)) {\n            this.extractor = () => collection.size();\n        } else {\n            this.extractor = () => -1;\n        }\n    }\n\n    /**\n     * Reports the size / length of the collection.\n     *\n     * @returns {number} Returns the current size of the collection or -1.\n     * @memberof SizeGauge\n     */\n    public getValue(): number {\n        return this.extractor();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlidingWindowReservoir.html":{"url":"classes/SlidingWindowReservoir.html","title":"class - SlidingWindowReservoir","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlidingWindowReservoir\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/reservoir.ts\n        \n\n            \n                Description\n            \n            \n                A reservoir that keeps the order of values and restarts\nat the beginning if the maximum number of values is reached.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Reservoir\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                index\n                            \n                            \n                                    Private\n                                maxSize\n                            \n                            \n                                    Private\n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                size\n                            \n                            \n                                    Public\n                                snapshot\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(maxSize: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                            Creates an instance of SlidingWindowReservoir.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        maxSize\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            index\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        index:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:149\n                            \n                        \n\n                \n                    \n                        The current index in the value array.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            maxSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        maxSize:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:141\n                            \n                        \n\n                \n                    \n                        The capacity of the reservoir.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        values:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:133\n                            \n                        \n\n                \n                    \n                        The values.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        size()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:167\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values, but at may the capacity of the reservoir.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            snapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        snapshot()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:193\n                            \n                        \n\n\n                \n                    \n                            Creates a new snapshot using the values array.\n\n\n                            \n                            \n                            \n                                Returns :     Snapshot\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        update(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/reservoir.ts:179\n                            \n                        \n\n\n                \n                    \n                            Adds the value to the array of values until the capacity\nof the reservoir is reached. If the maximum number of\nvalues is reached, the insertion restarts at the beginning.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { SimpleSnapshot, Snapshot } from \"./snapshot\";\n\n/**\n * Represents a collection of values.\n *\n * @export\n * @interface Reservoir\n */\nexport interface Reservoir {\n\n    /**\n     * Gets the capacity of this reservoir.\n     *\n     * @returns {number}\n     * @memberof Reservoir\n     */\n    size(): number;\n\n    /**\n     * Adds a value to the reservoir.\n     *\n     * @param {number} value\n     * @memberof Reservoir\n     */\n    update(value: number): void;\n\n    /**\n     * Creates a new snapshot of this reservoir.\n     *\n     * @returns {Snapshot}\n     * @memberof Reservoir\n     */\n    snapshot(): Snapshot;\n\n}\n\n/**\n * Simple implementation of a reservoir.\n * It has a maximum number of values, if the maximum\n * is reached old values are replaced by new values.\n *\n * @export\n * @class DefaultReservoir\n * @implements {Reservoir}\n */\nexport class DefaultReservoir implements Reservoir {\n\n    /**\n     * The values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof DefaultReservoir\n     */\n    private values: number[] = [];\n    /**\n     * The capacity of this reservoir.\n     *\n     * @private\n     * @type {number}\n     * @memberof DefaultReservoir\n     */\n    private maxSize: number;\n\n    /**\n     * Creates an instance of DefaultReservoir.\n     *\n     * @param {number} maxSize\n     * @memberof DefaultReservoir\n     */\n    public constructor(maxSize: number) {\n        this.maxSize = maxSize;\n    }\n\n    /**\n     * Gets the actual number of value, but at max the specified maximum.\n     *\n     * @returns {number}\n     * @memberof DefaultReservoir\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Adds the value to the array of numbers until the maximum number of\n     * values is reached. If the maximum number of values is reached\n     * an old value at a random position is replaced with the specified value.\n     *\n     * @param {number} value\n     * @memberof DefaultReservoir\n     */\n    public update(value: number): void {\n        if (this.values.length \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Snapshot.html":{"url":"interfaces/Snapshot.html","title":"interface - Snapshot","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Snapshot\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/snapshot.ts\n        \n\n            \n                Description\n            \n            \n                A static state of a collection of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get75thPercentile\n                                \n                                \n                                    get95thPercentile\n                                \n                                \n                                    get98thPercentile\n                                \n                                \n                                    get999thPercentile\n                                \n                                \n                                    get99thPercentile\n                                \n                                \n                                    getMax\n                                \n                                \n                                    getMean\n                                \n                                \n                                    getMedian\n                                \n                                \n                                    getMin\n                                \n                                \n                                    getStdDev\n                                \n                                \n                                    getValue\n                                \n                                \n                                    getValues\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get75thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget75thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 75% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get95thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget95thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:25\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 95% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get98thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget98thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:33\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 98% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get999thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget999thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:41\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99.9% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get99thPercentile\n                            \n                            \n                        \n                    \n                \n                \n                    \nget99thPercentile()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:49\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 99% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMax\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMax()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:65\n                            \n                        \n\n\n                \n                    \n                            Gets the maximum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMean\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMean()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets the average of all values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMedian\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMedian()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:57\n                            \n                        \n\n\n                \n                    \n                            Gets the value of 50% boundary.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getMin\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetMin()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:73\n                            \n                        \n\n\n                \n                    \n                            Gets the minimum value.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getStdDev\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetStdDev()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:105\n                            \n                        \n\n\n                \n                    \n                            Gets the average deviation among the values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValue\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValue(quantile: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the value of boundary specified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        quantile\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getValues\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetValues()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:81\n                            \n                        \n\n\n                \n                    \n                            Gets all values.\n\n\n                            \n                            \n                            \n                                Returns :     number[]\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                            \n                        \n                    \n                \n                \n                    \nsize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/snapshot.ts:89\n                            \n                        \n\n\n                \n                    \n                            Gets the number of values.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * A static state of a collection of values.\n *\n * @export\n * @interface Snapshot\n */\nexport interface Snapshot {\n\n    /**\n     * Gets the value of 75% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get75thPercentile(): number;\n\n    /**\n     * Gets the value of 95% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get95thPercentile(): number;\n\n    /**\n     * Gets the value of 98% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get98thPercentile(): number;\n\n    /**\n     * Gets the value of 99.9% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get999thPercentile(): number;\n\n    /**\n     * Gets the value of 99% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    get99thPercentile(): number;\n\n    /**\n     * Gets the value of 50% boundary.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMedian(): number;\n\n    /**\n     * Gets the maximum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMax(): number;\n\n    /**\n     * Gets the minimum value.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMin(): number;\n\n    /**\n     * Gets all values.\n     *\n     * @returns {number[]}\n     * @memberof Snapshot\n     */\n    getValues(): number[];\n\n    /**\n     * Gets the number of values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    size(): number;\n\n    /**\n     * Gets the average of all values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getMean(): number;\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getStdDev(): number;\n\n    /**\n     * Gets the value of boundary specified.\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof Snapshot\n     */\n    getValue(quantile: number): number;\n\n}\n\n/**\n * Default implementation of the {@link Snapshot} interface.\n *\n * @export\n * @class SimpleSnapshot\n * @implements {Snapshot}\n */\nexport class SimpleSnapshot implements Snapshot {\n\n    /**\n     * Sorted collection of values.\n     *\n     * @private\n     * @type {number[]}\n     * @memberof SimpleSnapshot\n     */\n    private values: number[] = [];\n\n    /**\n     * Creates an instance of SimpleSnapshot.\n     *\n     * @param {number[]} values\n     * @memberof SimpleSnapshot\n     */\n    public constructor(values: number[]) {\n        this.values = values.slice(0, values.length);\n        this.values = this.values.sort((a, b) => a - b);\n    }\n\n    /**\n     * Calls getValue(0.75) to get the value of the 75% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get75thPercentile(): number {\n        return this.getValue(0.75);\n    }\n\n    /**\n     * Calls getValue(0.95) to get the value of the 95% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get95thPercentile(): number {\n        return this.getValue(0.95);\n    }\n\n    /**\n     * Calls getValue(0.98) to get the value of the 98% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get98thPercentile(): number {\n        return this.getValue(0.98);\n    }\n\n    /**\n     * Calls getValue(0.999) to get the value of the 99.9% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get999thPercentile(): number {\n        return this.getValue(0.999);\n    }\n\n    /**\n     * Calls getValue(0.99) to get the value of the 99% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public get99thPercentile(): number {\n        return this.getValue(0.99);\n    }\n\n    /**\n     * Calls getValue(0.5) to get the value of the 50% boundary\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMedian(): number {\n        return this.getValue(0.5);\n    }\n\n    /**\n     * Gets the last value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMax(): number {\n        return this.values[this.values.length - 1];\n    }\n\n    /**\n     * Gets the first value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMin(): number {\n        return this.values[0];\n    }\n\n    /**\n     * Gets the value array.\n     *\n     * @returns {number[]}\n     * @memberof SimpleSnapshot\n     */\n    public getValues(): number[] {\n        return this.values;\n    }\n\n    /**\n     * Gets the length of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public size(): number {\n        return this.values.length;\n    }\n\n    /**\n     * Gets average value of the value array.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getMean(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        let sum = 0;\n        this.values.forEach((value) => sum += value);\n        return sum / this.values.length;\n    }\n\n    /**\n     * Gets the average deviation among the values.\n     *\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getStdDev(): number {\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const mean = this.getMean();\n        let sum = 0;\n        this.values.forEach((value) => {\n            const diff = value - mean;\n            sum += diff * diff;\n        });\n\n        return Math.sqrt(sum / (this.values.length - 1));\n    }\n\n    /**\n     * Gets the value of the boundary specified.\n     *\n     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]\n     *\n     * quantile | position / index | value\n     *\n     * 0.25 | 3 | 24.25\n     *\n     * 0.5 | 5 | 36\n     *\n     * 0.75 | 8 | 51,25\n     *\n     * 0.95 | 10 | NaN\n     *\n     * @param {number} quantile\n     * @returns {number}\n     * @memberof SimpleSnapshot\n     */\n    public getValue(quantile: number): number {\n        if (quantile  1.0 || isNaN(quantile)) {\n            return NaN;\n        }\n\n        if (this.values.length === 0) {\n            return 0;\n        }\n\n        const pos = quantile * (this.values.length + 1);\n        const index = Math.round(pos);\n\n        if (index = this.values.length) {\n            return this.getMax();\n        }\n\n        const lower = this.values[index - 1];\n        const upper = this.values[index];\n        return lower + (pos - Math.floor(pos)) * (upper - lower);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StdClock.html":{"url":"classes/StdClock.html","title":"class - StdClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StdClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation of a Clock. Uses Date.now() as source of truth.\n\n            \n\n            \n                Extends\n            \n            \n                    Clock\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                time\n                            \n                            \n                                    Public\n                                    Abstract\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/clock.ts:68\n                            \n                        \n\n\n                \n                    \n                            Returns a Time object whos nanoseconds component is always zero.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Abstract\n                            time\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        time()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     Clock\n\n                                \n                            \n                        \n                            \n                                    Defined in Clock:49\n                            \n                        \n\n\n                \n                    \n                            Gets the current point in time according to the logic of the clock implementation.\n\n\n                            \n                            \n                            \n                                Returns :     Time\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StopWatch.html":{"url":"classes/StopWatch.html","title":"class - StopWatch","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StopWatch\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/timer.ts\n        \n\n            \n                Description\n            \n            \n                A convenience wrapper class for a Timer to measure durations.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clock\n                            \n                            \n                                    Private\n                                startTime\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(clock: Clock, timer: Timer)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/timer.ts:46\n                            \n                        \n\n                \n                    \n                            Creates an instance of StopWatch.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clock\n                                                  \n                                                        \n                                                                    Clock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timer\n                                                  \n                                                        \n                                                                    Timer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            clock\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        clock:     Clock\n\n                    \n                \n                    \n                        \n                            Type :     Clock\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:30\n                            \n                        \n\n                \n                    \n                        Used to determine a duration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            startTime\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        startTime:     Time\n\n                    \n                \n                    \n                        \n                            Type :     Time\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:46\n                            \n                        \n\n                \n                    \n                        Gets set when the start function is invoked using the clock.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     Timer\n\n                    \n                \n                    \n                        \n                            Type :     Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/timer.ts:38\n                            \n                        \n\n                \n                    \n                        The timer the duration is reported to.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:65\n                            \n                        \n\n\n                \n                    \n                            Sets the startTime variable.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/timer.ts:75\n                            \n                        \n\n\n                \n                    \n                            Adds the duration between the last invocation of the start function\nand this invocation to the timer in nanoseconds.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport { Clock, diff, Time } from \"./clock\";\nimport { Histogram } from \"./histogram\";\nimport { Int64Wrapper } from \"./int64\";\nimport { Meter } from \"./meter\";\nimport { Metered } from \"./metered\";\nimport { BaseMetric } from \"./metric\";\nimport { Reservoir } from \"./reservoir\";\nimport { Sampling } from \"./sampling\";\nimport { Snapshot } from \"./snapshot\";\nimport { Summarizing } from \"./summarizing\";\nimport { NANOSECOND, TimeUnit } from \"./time-unit\";\n\n/**\n * A convenience wrapper class for a {@link Timer} to measure durations.\n *\n * @export\n * @class StopWatch\n */\nexport class StopWatch {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof StopWatch\n     */\n    private clock: Clock;\n    /**\n     * The timer the duration is reported to.\n     *\n     * @private\n     * @type {Timer}\n     * @memberof StopWatch\n     */\n    private timer: Timer;\n    /**\n     * Gets set when the start function is invoked using the clock.\n     *\n     * @private\n     * @type {Time}\n     * @memberof StopWatch\n     */\n    private startTime: Time;\n\n    /**\n     * Creates an instance of StopWatch.\n     *\n     * @param {Clock} clock\n     * @param {Timer} timer\n     * @memberof StopWatch\n     */\n    public constructor(clock: Clock, timer: Timer) {\n        this.clock = clock;\n        this.timer = timer;\n    }\n\n    /**\n     * Sets the startTime variable.\n     *\n     * @memberof StopWatch\n     */\n    public start(): void {\n        this.startTime = this.clock.time();\n    }\n\n    /**\n     * Adds the duration between the last invocation of the start function\n     * and this invocation to the timer in nanoseconds.\n     *\n     * @memberof StopWatch\n     */\n    public stop(): void {\n        this.timer.addDuration(diff(this.startTime, this.clock.time()), NANOSECOND);\n    }\n\n}\n\n/**\n * A Timer is a combination of a {@link Histogram} (for the duration of an event)\n * and a {@link Meter} (for the rate of events).\n *\n * @export\n * @class Timer\n * @extends {BaseMetric}\n * @implements {Metered}\n * @implements {Sampling}\n */\nexport class Timer extends BaseMetric implements Metered, Sampling, Summarizing {\n\n    /**\n     * Used to determine a duration.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof Timer\n     */\n    private clock: Clock;\n    /**\n     * Metric to measure the event rate.\n     *\n     * @private\n     * @type {Meter}\n     * @memberof Timer\n     */\n    private meter: Meter;\n    /**\n     * Metric to measure the duration of events.\n     *\n     * @private\n     * @type {Histogram}\n     * @memberof Timer\n     */\n    private histogram: Histogram;\n\n    /**\n     * Creates an instance of Timer.\n     *\n     * @param {Clock} clock\n     * @param {Reservoir} reservoir\n     * @param {string} [name]\n     * @param {string} [description]\n     * @memberof Timer\n     */\n    public constructor(clock: Clock, reservoir: Reservoir, name?: string, description?: string) {\n        super();\n        this.clock = clock;\n        this.name = name;\n        this.description = description;\n        this.meter = new Meter(clock, 1, name);\n        this.histogram = new Histogram(reservoir, name);\n    }\n\n    /**\n     * Adds a duration manually.\n     *\n     * @param {number} duration\n     * @param {TimeUnit} unit\n     * @memberof Timer\n     */\n    public addDuration(duration: number, unit: TimeUnit): void {\n        if (duration >= 0) {\n            this.histogram.update(unit.convertTo(duration, NANOSECOND));\n            this.meter.mark(1);\n        }\n    }\n\n    /**\n     * Gets a snapshot from the embedded {@link Histogram}.\n     *\n     * @returns {Snapshot}\n     * @memberof Timer\n     */\n    public getSnapshot(): Snapshot {\n        return this.histogram.getSnapshot();\n    }\n\n    /**\n     * Gets the count from the embedded {@link Histogram}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getCount(): number {\n        return this.histogram.getCount();\n    }\n\n    /**\n     * Gets the sum from the embedded {@link Histogram}.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Timer\n     */\n    public getSum(): Int64Wrapper {\n        return this.histogram.getSum();\n    }\n\n    /**\n     * Gets the average rate per second of last 15 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get15MinuteRate(): number {\n        return this.meter.get15MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last 5 minutes.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get5MinuteRate(): number {\n        return this.meter.get5MinuteRate();\n    }\n\n    /**\n     * Gets the average rate per second of last minute.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public get1MinuteRate(): number {\n        return this.meter.get1MinuteRate();\n    }\n\n    /**\n     * Gets the mean rate from the embedded {@link Meter}.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public getMeanRate(): number {\n        return this.meter.getMeanRate();\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * synchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public time(f: () => void): void {\n        const startTime: Time = this.clock.time();\n        try {\n            f();\n        } finally {\n            this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n        }\n    }\n\n    /**\n     * Measures the duration of the passed function's invocation\n     * asynchronously and adds it to the pool.\n     *\n     * @returns {number}\n     * @memberof Timer\n     */\n    public timeAsync(f: () => Promise): Promise {\n        const startTime: Time = this.clock.time();\n        return f()\n            .then(() => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n            })\n            .catch((err) => {\n                this.addDuration(diff(startTime, this.clock.time()), NANOSECOND);\n                throw err;\n            });\n    }\n\n    /**\n     * Builds a new StopWatch.\n     *\n     * @returns {StopWatch}\n     * @memberof Timer\n     */\n    public newStopWatch(): StopWatch {\n        return new StopWatch(this.clock, this);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Summarizing.html":{"url":"interfaces/Summarizing.html","title":"interface - Summarizing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Summarizing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/summarizing.ts\n        \n\n            \n                Description\n            \n            \n                Interface fo all metric classes that build a sum of values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSum\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getSum\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetSum()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/summarizing.ts:18\n                            \n                        \n\n\n                \n                    \n                            Gets the sum of values.\n\n\n                            \n                            \n                            \n                                Returns :     Int64Wrapper\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\nimport { Int64Wrapper } from \"./int64\";\n\n/**\n * Interface fo all metric classes that build a sum of values.\n *\n * @export\n * @interface Summarizing\n */\nexport interface Summarizing {\n\n    /**\n     * Gets the sum of values.\n     *\n     * @returns {Int64Wrapper}\n     * @memberof Summarizing\n     */\n    getSum(): Int64Wrapper;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Taggable.html":{"url":"interfaces/Taggable.html","title":"interface - Taggable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Taggable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/taggable.ts\n        \n\n            \n                Description\n            \n            \n                An interface for taggable classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getTag\n                                \n                                \n                                    getTags\n                                \n                                \n                                    removeTag\n                                \n                                \n                                    setTag\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTag\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:26\n                            \n                        \n\n\n                \n                    \n                            Gets the specified tag or {@code null}.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getTags\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetTags()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:17\n                            \n                        \n\n\n                \n                    \n                            Gets all tags.\n\n\n                            \n                            \n                            \n                                Returns :     Map\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            removeTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nremoveTag(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:43\n                            \n                        \n\n\n                \n                    \n                            Removes the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setTag\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetTag(name: string, value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/taggable.ts:35\n                            \n                        \n\n\n                \n                    \n                            Sets the specified tag.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * An interface for taggable classes.\n *\n * @export\n * @interface Taggable\n */\nexport interface Taggable {\n\n    /**\n     * Gets all tags.\n     *\n     * @returns {Map}\n     * @memberof Taggable\n     */\n    getTags(): Map;\n\n    /**\n     * Gets the specified tag or {@code null}.\n     *\n     * @param {string} name\n     * @returns {string}\n     * @memberof Taggable\n     */\n    getTag(name: string): string;\n\n    /**\n     * Sets the specified tag.\n     *\n     * @param {string} name\n     * @param {string} value\n     * @memberof Taggable\n     */\n    setTag(name: string, value: string): void;\n\n    /**\n     * Removes the specified tag.\n     *\n     * @param {string} name\n     * @memberof Taggable\n     */\n    removeTag(name: string): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Time.html":{"url":"interfaces/Time.html","title":"interface - Time","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Time\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/clock.ts\n        \n\n            \n                Description\n            \n            \n                Represents a point in time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        milliseconds\n                                \n                                \n                                        nanoseconds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        milliseconds\n                                    \n                                \n                                \n                                    \n                                        milliseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nanoseconds\n                                    \n                                \n                                \n                                    \n                                        nanoseconds:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a point in time.\n *\n * @export\n * @interface Time\n */\nexport interface Time {\n    milliseconds: number;\n    nanoseconds: number;\n}\n\n/**\n * Gets the time elapsed from parameter one to parameter two in nanoseconds.\n *\n * Also assumes that the first point in time time is elder than the sesond point in time.\n *\n * @export\n * @param {Time} one time sample\n * @param {Time} two time sample\n * @returns {number} a duration in nanoseconds\n */\nexport function diff(one: Time, two: Time): number {\n    if (!one || !two) {\n        return 0;\n    }\n    const oneValue: number = one.nanoseconds + one.milliseconds * 1000000;\n    const twoValue: number = two.nanoseconds + two.milliseconds * 1000000;\n    return twoValue - oneValue;\n}\n\n/**\n * Abstraction of a clock. Used to determine progress in time.\n *\n * @export\n * @abstract\n * @class Clock\n */\nexport abstract class Clock {\n\n    /**\n     * Gets the current point in time according to the logic of the clock implementation.\n     *\n     * @abstract\n     * @returns {Time}\n     * @memberof Clock\n     */\n    public abstract time(): Time;\n\n}\n\n/**\n * Default implementation of a Clock. Uses Date.now() as source of truth.\n *\n * @export\n * @class StdClock\n * @extends {Clock}\n */\nexport class StdClock extends Clock {\n\n    /**\n     * Returns a Time object whos nanoseconds component is always zero.\n     *\n     * @returns {Time}\n     * @memberof StdClock\n     */\n    public time(): Time {\n        const time = {\n            milliseconds: Date.now(),\n            nanoseconds: 0,\n        };\n        return time;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeUnit.html":{"url":"classes/TimeUnit.html","title":"class - TimeUnit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeUnit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/time-unit.ts\n        \n\n            \n                Description\n            \n            \n                Represents a time unit like second, minute, hour.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nanosecondsPerUnit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convertTo\n                            \n                            \n                                    Public\n                                getNanosecondsPerUnit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(nanosecondsPerUnit: number)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of TimeUnit.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nanosecondsPerUnit\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            nanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nanosecondsPerUnit:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:18\n                            \n                        \n\n                \n                    \n                        The nanoseconds for one unit of this time unit.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            convertTo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        convertTo(value: number, unit: TimeUnit)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:53\n                            \n                        \n\n\n                \n                    \n                            Converts the given value to the time unit specified.\nE.g.:\nNANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\nMICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        unit\n                                                        \n                                                                    TimeUnit\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getNanosecondsPerUnit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getNanosecondsPerUnit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/time-unit.ts:36\n                            \n                        \n\n\n                \n                    \n                            Gets the nanoseconds in one unit of this time unit.\n\n\n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\n/**\n * Represents a time unit like second, minute, hour.\n *\n * @export\n * @class TimeUnit\n */\nexport class TimeUnit {\n\n    /**\n     * The nanoseconds for one unit of this time unit.\n     *\n     * @private\n     * @type {number}\n     * @memberof TimeUnit\n     */\n    private nanosecondsPerUnit: number;\n\n    /**\n     * Creates an instance of TimeUnit.\n     *\n     * @param {number} nanosecondsPerUnit\n     * @memberof TimeUnit\n     */\n    public constructor(nanosecondsPerUnit: number) {\n        this.nanosecondsPerUnit = nanosecondsPerUnit;\n    }\n\n    /**\n     * Gets the nanoseconds in one unit of this time unit.\n     *\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public getNanosecondsPerUnit(): number {\n        return this.nanosecondsPerUnit;\n    }\n\n    /**\n     * Converts the given value to the time unit specified.\n     *\n     * E.g.:\n     *\n     * NANOSECOND.convertTo(1000, MICROSECOND) equals 1 microsecond.\n     * MICROSECOND.convertTo(1000, NANOSECOND) equals 1000000 nanoseconds.\n     *\n     * @param {number} value\n     * @param {TimeUnit} unit\n     * @returns {number}\n     * @memberof TimeUnit\n     */\n    public convertTo(value: number, unit: TimeUnit): number {\n        return (value * this.nanosecondsPerUnit) / unit.nanosecondsPerUnit;\n    }\n\n}\n\nexport const NANOSECOND = new TimeUnit(1);\nexport const MICROSECOND = new TimeUnit(1000);\nexport const MILLISECOND = new TimeUnit(1000000);\nexport const SECOND = new TimeUnit(1000000000);\nexport const MINUTE = new TimeUnit(60000000000);\nexport const HOUR = new TimeUnit(3600000000000);\nexport const DAY = new TimeUnit(86400000000000);\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                Clock\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                class\n            \n            \n                StdClock\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                interface\n            \n            \n                Time\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                lib/metrics/clock.ts\n            \n            \n                function\n            \n            \n                diff\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                Counter\n            \n            \n                56 %\n                (14/25)\n            \n        \n        \n            \n                \n                lib/metrics/counter.ts\n            \n            \n                class\n            \n            \n                MonotoneCounter\n            \n            \n                52 %\n                (12/23)\n            \n        \n        \n            \n                \n                lib/metrics/counting.ts\n            \n            \n                interface\n            \n            \n                Counting\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                class\n            \n            \n                SimpleGauge\n            \n            \n                50 %\n                (11/22)\n            \n        \n        \n            \n                \n                lib/metrics/gauge.ts\n            \n            \n                interface\n            \n            \n                Gauge\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/groupable.ts\n            \n            \n                interface\n            \n            \n                Groupable\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/histogram.ts\n            \n            \n                class\n            \n            \n                Histogram\n            \n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                class\n            \n            \n                Int64Wrapper\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/int64.ts\n            \n            \n                variable\n            \n            \n                Int64\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/logger-reporter.ts\n            \n            \n                class\n            \n            \n                LoggerReporter\n            \n            \n                100 %\n                (28/28)\n            \n        \n        \n            \n                \n                lib/metrics/logger.ts\n            \n            \n                interface\n            \n            \n                Logger\n            \n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                lib/metrics/meter.ts\n            \n            \n                class\n            \n            \n                Meter\n            \n            \n                72 %\n                (29/40)\n            \n        \n        \n            \n                \n                lib/metrics/metered.ts\n            \n            \n                interface\n            \n            \n                Metered\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry-listener.ts\n            \n            \n                interface\n            \n            \n                MetricRegistryListener\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistration\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistry\n            \n            \n                65 %\n                (53/81)\n            \n        \n        \n            \n                \n                lib/metrics/metric-registry.ts\n            \n            \n                class\n            \n            \n                MetricRegistryListenerRegistration\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric-reporter.ts\n            \n            \n                class\n            \n            \n                MetricReporter\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                lib/metrics/metric-set.ts\n            \n            \n                interface\n            \n            \n                MetricSet\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                class\n            \n            \n                BaseMetric\n            \n            \n                38 %\n                (7/18)\n            \n        \n        \n            \n                \n                lib/metrics/metric.ts\n            \n            \n                interface\n            \n            \n                Metric\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                class\n            \n            \n                ExponentiallyWeightedMovingAverage\n            \n            \n                68 %\n                (13/19)\n            \n        \n        \n            \n                \n                lib/metrics/moving-average.ts\n            \n            \n                interface\n            \n            \n                MovingAverage\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                DefaultReservoir\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                class\n            \n            \n                SlidingWindowReservoir\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/reservoir.ts\n            \n            \n                interface\n            \n            \n                Reservoir\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/sampling.ts\n            \n            \n                interface\n            \n            \n                Sampling\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                class\n            \n            \n                SizeGauge\n            \n            \n                56 %\n                (14/25)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                LengthMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeAttributeInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/size-gauge.ts\n            \n            \n                interface\n            \n            \n                SizeMethodInterface\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                class\n            \n            \n                SimpleSnapshot\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                lib/metrics/snapshot.ts\n            \n            \n                interface\n            \n            \n                Snapshot\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                lib/metrics/summarizing.ts\n            \n            \n                interface\n            \n            \n                Summarizing\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                lib/metrics/taggable.ts\n            \n            \n                interface\n            \n            \n                Taggable\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                class\n            \n            \n                TimeUnit\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                DAY\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                HOUR\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MICROSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MILLISECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                MINUTE\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                NANOSECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/time-unit.ts\n            \n            \n                variable\n            \n            \n                SECOND\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                StopWatch\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                lib/metrics/timer.ts\n            \n            \n                class\n            \n            \n                Timer\n            \n            \n                66 %\n                (22/33)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            node-cint64 : 2.0.0\n        \n            source-map-support : 0.5.6\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            diff   (lib/.../clock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/clock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            diff\n                            \n                            \n                        \n                    \n                \n                \n                    \ndiff(one: undefined, two: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Gets the time elapsed from parameter one to parameter two in nanoseconds.\nAlso assumes that the first point in time time is elder than the sesond point in time.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        one\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                                \n                                                        two\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                time sample\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-metrics\nMonitoring / metric library similar to http://metrics.dropwizard.io\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\ninstall\nThis library is meant to be used with typescript / nodejs.\nnpm install --save inspector-metrics\nbasic usage\nAt least a MetricRegistry, a Metric and a MetricReporter is necessary\nto use the library.\nSupported metric types:\n\nCounter - measures an integer value (e.g. \"how many time was my function called\")\nGauge - measurement of a value (e.g. \"number of waiting threads on a resource\")\nHistogram - measures the statistical distribution of all values\nMeter - measures the rate of events over time (e.g. \"requests per second\")\nTimer - measures call-rate of a function and the distribution of the duration of all calls\n\nThe library ships with a default console MetricReporter.\nSome other reporter:\n\nCarbon / Graphite\nElasticsearch\nInflux\n\nimport { LoggerReporter, MetricRegistry, Timer } from \"inspector-metrics\";\n\n// a registry is a collection of metric objects\nconst registry = new MetricRegistry();\n// the reporter prints the stats\nconst reporter = new LoggerReporter(global.console);\n// a new timer instance\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.addMetricRegistry(registry);\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i Counter\nimport { Counter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst requestCount: Counter = registry.newCounter(\"requestCount\");\n\n// +1\nrequestCount.increment(1);\n\n// -1\nrequestCount.decrement(1);\n\n// =0\nrequestCount.getCount();\n\nrequestCount.reset();Gauge\nimport { BaseMetric, Gauge, MetricRegistry, SimpleGauge } from \"inspector-metrics\";\n\nclass ArrayLengthGauge extends BaseMetric implements Gauge {\n\n    public constructor(name: string, private a: Array) {\n        super();\n        this.name = name;\n    }\n\n    public getValue(): number {\n        return this.a.length;\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst queueSize: Gauge = new SimpleGauge(\"requestCount\");\nlet myArray: number[] = [];\nconst arrayLength: Gauge = new ArrayLengthGauge(\"arrayLength\", myArray);\n\nregistry.registerMetric(queueSize);\nregistry.registerMetric(arrayLength);\n\nqueueSize.setValue(12345);\n\n// 12345\nqueueSize.getValue();\n\nmyArray.push(1);\nmyArray.push(2);\nmyArray.push(3);\n\n// 3\narrayLength.getValue();Histogram\nimport { Histogram, MetricRegistry, Snapshot } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst entityCount: Histogram = registry.newHistogram(\"requestCount\");\n\nentityCount.update(12345);\n\n// 12345\nentityCount.getValue();\n\nconst snapshot: Snapshot = entityCount.getSnapshot();\n\n// mean count\nconst mean: number = snapshot.getMean();Meter\nimport { Meter, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callCount: Meter = registry.newMeter(\"callCount\");\n\ncallCount.mark(1);\n\nconst count: number = callCount.getCount();\nconst m15: number = callCount.get15MinuteRate();\nconst m5: number = callCount.get5MinuteRate();\nconst m1: number = callCount.get1MinuteRate();\nconst mean: number = callCount.getMeanRate();Timer\nimport { MetricRegistry, MILLISECOND, Snapshot, StopWatch, Timer } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\nconst callStats: Timer = registry.newTimer(\"callStats\");\n\ncallStats.addDuration(100, MILLISECOND);\n\n// 1\nconst count: number = callStats.getCount();\n// ~1\nconst m15: number = callStats.get15MinuteRate();\n// ~1\nconst m5: number = callStats.get5MinuteRate();\n// ~1\nconst m1: number = callStats.get1MinuteRate();\n// ~1\nconst mean: number = callStats.getMeanRate();\n\nlet snapshot: Snapshot = callStats.getSnapshot();\n\n// some value around 100000000 (100ms in nanoseconds)\nconst mean: number = snapshot.getMean();\n\nconst timer: StopWatch = callStats.newStopWatch();\n\ntimer.start();\n// 100ms has passed\ntimer.stop();\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through stop-watch ...\nsnapshot.getMean();\n\ncallStats.time(() => {\n    // some time has passed\n});\n\n// works with promise too\nawait callStats.timeAsync(async () => {\n    // some time has passed\n});\n\nsnapshot = callStats.getSnapshot();\n// snapshot gets updated through time function ...\nsnapshot.getMean();MetricListeners\nimport { Metric, MetricRegistry, MetricRegistryListener, MetricRegistryListenerRegistration } from \"inspector-metrics\";\n\nclass Listener implements MetricRegistryListener {\n\n    public metricAdded(name: string, metric: Metric): void {\n        console.log(`added metric ${name}: ${metric}`);\n    }\n\n    public metricRemoved(name: string, metric: Metric): void {\n        console.log(`removed metric ${name}: ${metric}`);\n    }\n\n}\n\nconst registry = new MetricRegistry();\nconst registration: MetricRegistryListenerRegistration = registry.addListener(new Listener());\n\n// prints \"added metric requests: Counter...\" via console\nregistry.newCounter(\"requests\");\n\n// removes the listener\nregistration.remove();Metric Groups\nEach metric can have a group, which is used to gather different metrics\nwithin metric reporter instances. E.g. if only gauges are used\nto gather metrics data a group can be used to report them all as one\nmeasure point with different fields.\nimport { Gauge, MetricRegistry } from \"inspector-metrics\";\n\nconst registry = new MetricRegistry();\n// reports the internal storage capacity of a queue\nconst capacity: Gauge = ...;\n// reports the element count in the queue\nconst queueSize: Gauge = ...;\n\n// all values grouped as buffer\nregistry.registerMetric(queueSize, \"buffer\");\nregistry.registerMetric(capacity, \"buffer\");\n// counts the number of allocations during the execution of the application\nregistry.newCounter(\"newAllocations\", \"buffer\");\n\n// the reporter can now report the values as a single measurement point if supported ...License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    19 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NameFactory   (lib/.../metric-registry.ts)\n                        \n                        \n                            Scheduler   (lib/.../logger-reporter.ts)\n                        \n                        \n                            ValueExtractor   (lib/.../size-gauge.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/metric-registry.ts\n    \n        \n            \n                \n                    \n                        \n                        NameFactory\n                    \n                \n                \n                    \n                        NameFactory:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/logger-reporter.ts\n    \n        \n            \n                \n                    \n                        \n                        Scheduler\n                    \n                \n                \n                    \n                        Scheduler:     function\n\n                    \n                \n            \n        \n\n    lib/metrics/size-gauge.ts\n    \n        \n            \n                \n                    \n                        \n                        ValueExtractor\n                    \n                \n                \n                    \n                        ValueExtractor:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                    /mnt/c/git/inspector-metrics/lib/metrics/clock.ts\n            \n            \n                100 %\n                (11/11)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counter.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/counting.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/gauge.ts\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/groupable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/histogram.ts\n            \n            \n                100 %\n                (16/16)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (5/5)\n            \n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/int64.ts\n            \n            \n                83 %\n                (5/6)\n            \n            \n                100 %\n                (1/1)\n            \n            \n                75 %\n                (3/4)\n            \n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger-reporter.ts\n            \n            \n                96 %\n                (95/99)\n            \n            \n                49 %\n                (19/39)\n            \n            \n                88 %\n                (21/24)\n            \n            \n                96 %\n                (91/95)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/logger.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/meter.ts\n            \n            \n                100 %\n                (47/47)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (9/9)\n            \n            \n                100 %\n                (47/47)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metered.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry-listener.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-registry.ts\n            \n            \n                94 %\n                (165/175)\n            \n            \n                85 %\n                (81/95)\n            \n            \n                93 %\n                (79/85)\n            \n            \n                94 %\n                (161/171)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-reporter.ts\n            \n            \n                100 %\n                (7/7)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric-set.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/metric.ts\n            \n            \n                83 %\n                (15/18)\n            \n            \n                0 %\n                (0/2)\n            \n            \n                92 %\n                (11/12)\n            \n            \n                83 %\n                (15/18)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/moving-average.ts\n            \n            \n                100 %\n                (27/27)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (6/6)\n            \n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/reservoir.ts\n            \n            \n                100 %\n                (20/20)\n            \n            \n                100 %\n                (4/4)\n            \n            \n                100 %\n                (8/8)\n            \n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/sampling.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/size-gauge.ts\n            \n            \n                84 %\n                (21/25)\n            \n            \n                88 %\n                (14/16)\n            \n            \n                82 %\n                (9/11)\n            \n            \n                90 %\n                (18/20)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/snapshot.ts\n            \n            \n                95 %\n                (41/43)\n            \n            \n                87 %\n                (13/15)\n            \n            \n                100 %\n                (17/17)\n            \n            \n                95 %\n                (39/41)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/summarizing.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/taggable.ts\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (0/0)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/time-unit.ts\n            \n            \n                100 %\n                (12/12)\n            \n            \n                100 %\n                (0/0)\n            \n            \n                100 %\n                (3/3)\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-metrics/lib/metrics/timer.ts\n            \n            \n                95 %\n                (36/38)\n            \n            \n                100 %\n                (2/2)\n            \n            \n                94 %\n                (16/17)\n            \n            \n                95 %\n                (36/38)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DAY   (lib/.../time-unit.ts)\n                        \n                        \n                            HOUR   (lib/.../time-unit.ts)\n                        \n                        \n                            Int64   (lib/.../int64.ts)\n                        \n                        \n                            MICROSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MILLISECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            MINUTE   (lib/.../time-unit.ts)\n                        \n                        \n                            NANOSECOND   (lib/.../time-unit.ts)\n                        \n                        \n                            SECOND   (lib/.../time-unit.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/time-unit.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DAY\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DAY:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(86400000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HOUR\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        HOUR:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(3600000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MICROSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MICROSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MILLISECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MILLISECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MINUTE\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MINUTE:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(60000000000)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NANOSECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        NANOSECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECOND\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        SECOND:     \n\n                    \n                \n                    \n                        \n                            Default value : new TimeUnit(1000000000)\n                        \n                    \n\n\n            \n        \n\n    lib/metrics/int64.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Int64\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Int64:     \n\n                    \n                \n                    \n                        \n                            Default value : require(\"node-cint64\").Int64\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
